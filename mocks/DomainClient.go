// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by mockery v1.0.0
package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import shared "go.uber.org/cadence/.gen/go/shared"

// DomainClient is an autogenerated mock type for the DomainClient type
type DomainClient struct {
	mock.Mock
}

// Describe provides a mock function with given fields: ctx, name
func (_m *DomainClient) Describe(ctx context.Context, name string) (*shared.DomainInfo, *shared.DomainConfiguration, error) {
	ret := _m.Called(ctx, name)

	var r0 *shared.DomainInfo
	if rf, ok := ret.Get(0).(func(context.Context, string) *shared.DomainInfo); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shared.DomainInfo)
		}
	}

	var r1 *shared.DomainConfiguration
	if rf, ok := ret.Get(1).(func(context.Context, string) *shared.DomainConfiguration); ok {
		r1 = rf(ctx, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*shared.DomainConfiguration)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Register provides a mock function with given fields: ctx, request
func (_m *DomainClient) Register(ctx context.Context, request *shared.RegisterDomainRequest) error {
	ret := _m.Called(ctx, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *shared.RegisterDomainRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, name, domainInfo, domainConfig
func (_m *DomainClient) Update(ctx context.Context, name string, domainInfo *shared.UpdateDomainInfo, domainConfig *shared.DomainConfiguration) error {
	ret := _m.Called(ctx, name, domainInfo, domainConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *shared.UpdateDomainInfo, *shared.DomainConfiguration) error); ok {
		r0 = rf(ctx, name, domainInfo, domainConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
