// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	shared "go.uber.org/cadence/.gen/go/shared"
)

// HistoryEventIterator is an autogenerated mock type for the HistoryEventIterator type
type HistoryEventIterator struct {
	mock.Mock
}

// HasNext provides a mock function with given fields:
func (_m *HistoryEventIterator) HasNext() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Next provides a mock function with given fields:
func (_m *HistoryEventIterator) Next() (*shared.HistoryEvent, error) {
	ret := _m.Called()

	var r0 *shared.HistoryEvent
	if rf, ok := ret.Get(0).(func() *shared.HistoryEvent); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shared.HistoryEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewHistoryEventIterator interface {
	mock.TestingT
	Cleanup(func())
}

// NewHistoryEventIterator creates a new instance of HistoryEventIterator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHistoryEventIterator(t mockConstructorTestingTNewHistoryEventIterator) *HistoryEventIterator {
	mock := &HistoryEventIterator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
