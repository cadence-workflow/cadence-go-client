// Copyright (c) 2017-2021 Uber Technologies Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by mockery v2.23.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	internal "go.uber.org/cadence/internal"
)

// Worker is an autogenerated mock type for the Worker type
type Worker struct {
	mock.Mock
}

// RegisterActivity provides a mock function with given fields: a
func (_m *Worker) RegisterActivity(a interface{}) {
	_m.Called(a)
}

// RegisterActivityWithOptions provides a mock function with given fields: a, options
func (_m *Worker) RegisterActivityWithOptions(a interface{}, options internal.RegisterActivityOptions) {
	_m.Called(a, options)
}

// RegisterWorkflow provides a mock function with given fields: w
func (_m *Worker) RegisterWorkflow(w interface{}) {
	_m.Called(w)
}

// RegisterWorkflowWithOptions provides a mock function with given fields: w, options
func (_m *Worker) RegisterWorkflowWithOptions(w interface{}, options internal.RegisterWorkflowOptions) {
	_m.Called(w, options)
}

// Run provides a mock function with given fields:
func (_m *Worker) Run() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *Worker) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *Worker) Stop() {
	_m.Called()
}

type mockConstructorTestingTNewWorker interface {
	mock.TestingT
	Cleanup(func())
}

// NewWorker creates a new instance of Worker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWorker(t mockConstructorTestingTNewWorker) *Worker {
	mock := &Worker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
