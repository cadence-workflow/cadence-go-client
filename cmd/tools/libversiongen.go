// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"regexp"
)

// file that contains the source version header
const licenseFilePath = "LICENSE"

var (
	outputFilePerms = os.FileMode(0644)
	semVerRegex     = regexp.MustCompile("^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)$")
	shaRegex        = regexp.MustCompile("[0-9a-f]{40}$")
)

type config struct {
	version        string // semver string for this lib
	pkgname        string // package name for the output src file
	outputFileName string // output src file
	gitSHA         string // git-sha for this lib
}

// command line utility to auto-generate a source
// file containing const defines for library version
// and gitSHA.
//
//  Usage:
//     go run ./cmd/tools/libversiongen.go -v v0.1.0 -s "abcded...." -o ./client/cadence/version.go
//
func main() {

	cfg := new(config)
	flag.StringVar(&cfg.version, "v", "", "library version as semver")
	flag.StringVar(&cfg.pkgname, "p", "cadence", "package name to be used in autogenerated source")
	flag.StringVar(&cfg.outputFileName, "o", "", "output source file name")
	flag.StringVar(&cfg.gitSHA, "s", "", "git sha of this library")
	flag.Parse()

	if err := validateConfig(cfg); err != nil {
		fmt.Println(err)
		os.Exit(-1)
	}

	license, err := ioutil.ReadFile(licenseFilePath)
	if err != nil {
		fmt.Printf("error reading license file, err=%v\n", err.Error())
		os.Exit(-1)
	}

	content := generateCode(cfg, string(license))
	err = ioutil.WriteFile(cfg.outputFileName, []byte(content), outputFilePerms)
	if err != nil {
		fmt.Errorf("error creating file %v, err=%v", cfg.outputFileName, err.Error())
		os.Exit(-1)
	}
}

func validateConfig(cfg *config) error {

	if !semVerRegex.MatchString(cfg.version) {
		return fmt.Errorf("invalid version, must conform to semver format")
	}

	if !shaRegex.MatchString(cfg.gitSHA) {
		return fmt.Errorf("invalid git-sha, must be a hex string of length 40")
	}

	if len(cfg.outputFileName) == 0 {
		return fmt.Errorf("output source file name is empty")
	}

	return nil
}

func generateCode(cfg *config, license string) string {

	fmtString := `%v
// ******** AUTOGENERATED CODE ************

package %v

// LibraryVersion is a semver string that represents
// the version of this cadence client library
// it will be embedded as a "version" header in every
// rpc call made by this client to cadence server.
// In addition, the version string will be used by
// the server to enforce compatibility checks
// Update to this version number is typically done
// by the cadence team as part of a major feature or
// behavior change
const LibraryVersion = "%v"

// GitSHA is the git tag corresponding to this library
const GitSHA = "%v"
`
	return fmt.Sprintf(fmtString, license, cfg.pkgname, cfg.version, cfg.gitSHA)
}
