// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package shared

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type DomainStatus int64
const (
  DomainStatus_REGISTERED DomainStatus = 0
  DomainStatus_DEPRECATED DomainStatus = 1
  DomainStatus_DELETED DomainStatus = 2
)

func (p DomainStatus) String() string {
  switch p {
  case DomainStatus_REGISTERED: return "REGISTERED"
  case DomainStatus_DEPRECATED: return "DEPRECATED"
  case DomainStatus_DELETED: return "DELETED"
  }
  return "<UNSET>"
}

func DomainStatusFromString(s string) (DomainStatus, error) {
  switch s {
  case "REGISTERED": return DomainStatus_REGISTERED, nil 
  case "DEPRECATED": return DomainStatus_DEPRECATED, nil 
  case "DELETED": return DomainStatus_DELETED, nil 
  }
  return DomainStatus(0), fmt.Errorf("not a valid DomainStatus string")
}


func DomainStatusPtr(v DomainStatus) *DomainStatus { return &v }

func (p DomainStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *DomainStatus) UnmarshalText(text []byte) error {
q, err := DomainStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *DomainStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = DomainStatus(v)
return nil
}

func (p * DomainStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TimeoutType int64
const (
  TimeoutType_START_TO_CLOSE TimeoutType = 0
  TimeoutType_SCHEDULE_TO_START TimeoutType = 1
  TimeoutType_SCHEDULE_TO_CLOSE TimeoutType = 2
  TimeoutType_HEARTBEAT TimeoutType = 3
)

func (p TimeoutType) String() string {
  switch p {
  case TimeoutType_START_TO_CLOSE: return "START_TO_CLOSE"
  case TimeoutType_SCHEDULE_TO_START: return "SCHEDULE_TO_START"
  case TimeoutType_SCHEDULE_TO_CLOSE: return "SCHEDULE_TO_CLOSE"
  case TimeoutType_HEARTBEAT: return "HEARTBEAT"
  }
  return "<UNSET>"
}

func TimeoutTypeFromString(s string) (TimeoutType, error) {
  switch s {
  case "START_TO_CLOSE": return TimeoutType_START_TO_CLOSE, nil 
  case "SCHEDULE_TO_START": return TimeoutType_SCHEDULE_TO_START, nil 
  case "SCHEDULE_TO_CLOSE": return TimeoutType_SCHEDULE_TO_CLOSE, nil 
  case "HEARTBEAT": return TimeoutType_HEARTBEAT, nil 
  }
  return TimeoutType(0), fmt.Errorf("not a valid TimeoutType string")
}


func TimeoutTypePtr(v TimeoutType) *TimeoutType { return &v }

func (p TimeoutType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TimeoutType) UnmarshalText(text []byte) error {
q, err := TimeoutTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TimeoutType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TimeoutType(v)
return nil
}

func (p * TimeoutType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type DecisionType int64
const (
  DecisionType_ScheduleActivityTask DecisionType = 0
  DecisionType_RequestCancelActivityTask DecisionType = 1
  DecisionType_StartTimer DecisionType = 2
  DecisionType_CompleteWorkflowExecution DecisionType = 3
  DecisionType_FailWorkflowExecution DecisionType = 4
  DecisionType_CancelTimer DecisionType = 5
  DecisionType_RecordMarker DecisionType = 6
)

func (p DecisionType) String() string {
  switch p {
  case DecisionType_ScheduleActivityTask: return "ScheduleActivityTask"
  case DecisionType_RequestCancelActivityTask: return "RequestCancelActivityTask"
  case DecisionType_StartTimer: return "StartTimer"
  case DecisionType_CompleteWorkflowExecution: return "CompleteWorkflowExecution"
  case DecisionType_FailWorkflowExecution: return "FailWorkflowExecution"
  case DecisionType_CancelTimer: return "CancelTimer"
  case DecisionType_RecordMarker: return "RecordMarker"
  }
  return "<UNSET>"
}

func DecisionTypeFromString(s string) (DecisionType, error) {
  switch s {
  case "ScheduleActivityTask": return DecisionType_ScheduleActivityTask, nil 
  case "RequestCancelActivityTask": return DecisionType_RequestCancelActivityTask, nil 
  case "StartTimer": return DecisionType_StartTimer, nil 
  case "CompleteWorkflowExecution": return DecisionType_CompleteWorkflowExecution, nil 
  case "FailWorkflowExecution": return DecisionType_FailWorkflowExecution, nil 
  case "CancelTimer": return DecisionType_CancelTimer, nil 
  case "RecordMarker": return DecisionType_RecordMarker, nil 
  }
  return DecisionType(0), fmt.Errorf("not a valid DecisionType string")
}


func DecisionTypePtr(v DecisionType) *DecisionType { return &v }

func (p DecisionType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *DecisionType) UnmarshalText(text []byte) error {
q, err := DecisionTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *DecisionType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = DecisionType(v)
return nil
}

func (p * DecisionType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EventType int64
const (
  EventType_WorkflowExecutionStarted EventType = 0
  EventType_WorkflowExecutionCompleted EventType = 1
  EventType_WorkflowExecutionFailed EventType = 2
  EventType_WorkflowExecutionTimedOut EventType = 3
  EventType_DecisionTaskScheduled EventType = 4
  EventType_DecisionTaskStarted EventType = 5
  EventType_DecisionTaskCompleted EventType = 6
  EventType_DecisionTaskTimedOut EventType = 7
  EventType_ActivityTaskScheduled EventType = 8
  EventType_ActivityTaskStarted EventType = 9
  EventType_ActivityTaskCompleted EventType = 10
  EventType_ActivityTaskFailed EventType = 11
  EventType_ActivityTaskTimedOut EventType = 12
  EventType_ActivityTaskCancelRequested EventType = 13
  EventType_RequestCancelActivityTaskFailed EventType = 14
  EventType_ActivityTaskCanceled EventType = 15
  EventType_TimerStarted EventType = 16
  EventType_TimerFired EventType = 17
  EventType_CompleteWorkflowExecutionFailed EventType = 18
  EventType_CancelTimerFailed EventType = 19
  EventType_TimerCanceled EventType = 20
  EventType_MarkerRecorded EventType = 21
)

func (p EventType) String() string {
  switch p {
  case EventType_WorkflowExecutionStarted: return "WorkflowExecutionStarted"
  case EventType_WorkflowExecutionCompleted: return "WorkflowExecutionCompleted"
  case EventType_WorkflowExecutionFailed: return "WorkflowExecutionFailed"
  case EventType_WorkflowExecutionTimedOut: return "WorkflowExecutionTimedOut"
  case EventType_DecisionTaskScheduled: return "DecisionTaskScheduled"
  case EventType_DecisionTaskStarted: return "DecisionTaskStarted"
  case EventType_DecisionTaskCompleted: return "DecisionTaskCompleted"
  case EventType_DecisionTaskTimedOut: return "DecisionTaskTimedOut"
  case EventType_ActivityTaskScheduled: return "ActivityTaskScheduled"
  case EventType_ActivityTaskStarted: return "ActivityTaskStarted"
  case EventType_ActivityTaskCompleted: return "ActivityTaskCompleted"
  case EventType_ActivityTaskFailed: return "ActivityTaskFailed"
  case EventType_ActivityTaskTimedOut: return "ActivityTaskTimedOut"
  case EventType_ActivityTaskCancelRequested: return "ActivityTaskCancelRequested"
  case EventType_RequestCancelActivityTaskFailed: return "RequestCancelActivityTaskFailed"
  case EventType_ActivityTaskCanceled: return "ActivityTaskCanceled"
  case EventType_TimerStarted: return "TimerStarted"
  case EventType_TimerFired: return "TimerFired"
  case EventType_CompleteWorkflowExecutionFailed: return "CompleteWorkflowExecutionFailed"
  case EventType_CancelTimerFailed: return "CancelTimerFailed"
  case EventType_TimerCanceled: return "TimerCanceled"
  case EventType_MarkerRecorded: return "MarkerRecorded"
  }
  return "<UNSET>"
}

func EventTypeFromString(s string) (EventType, error) {
  switch s {
  case "WorkflowExecutionStarted": return EventType_WorkflowExecutionStarted, nil 
  case "WorkflowExecutionCompleted": return EventType_WorkflowExecutionCompleted, nil 
  case "WorkflowExecutionFailed": return EventType_WorkflowExecutionFailed, nil 
  case "WorkflowExecutionTimedOut": return EventType_WorkflowExecutionTimedOut, nil 
  case "DecisionTaskScheduled": return EventType_DecisionTaskScheduled, nil 
  case "DecisionTaskStarted": return EventType_DecisionTaskStarted, nil 
  case "DecisionTaskCompleted": return EventType_DecisionTaskCompleted, nil 
  case "DecisionTaskTimedOut": return EventType_DecisionTaskTimedOut, nil 
  case "ActivityTaskScheduled": return EventType_ActivityTaskScheduled, nil 
  case "ActivityTaskStarted": return EventType_ActivityTaskStarted, nil 
  case "ActivityTaskCompleted": return EventType_ActivityTaskCompleted, nil 
  case "ActivityTaskFailed": return EventType_ActivityTaskFailed, nil 
  case "ActivityTaskTimedOut": return EventType_ActivityTaskTimedOut, nil 
  case "ActivityTaskCancelRequested": return EventType_ActivityTaskCancelRequested, nil 
  case "RequestCancelActivityTaskFailed": return EventType_RequestCancelActivityTaskFailed, nil 
  case "ActivityTaskCanceled": return EventType_ActivityTaskCanceled, nil 
  case "TimerStarted": return EventType_TimerStarted, nil 
  case "TimerFired": return EventType_TimerFired, nil 
  case "CompleteWorkflowExecutionFailed": return EventType_CompleteWorkflowExecutionFailed, nil 
  case "CancelTimerFailed": return EventType_CancelTimerFailed, nil 
  case "TimerCanceled": return EventType_TimerCanceled, nil 
  case "MarkerRecorded": return EventType_MarkerRecorded, nil 
  }
  return EventType(0), fmt.Errorf("not a valid EventType string")
}


func EventTypePtr(v EventType) *EventType { return &v }

func (p EventType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EventType) UnmarshalText(text []byte) error {
q, err := EventTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EventType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EventType(v)
return nil
}

func (p * EventType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type WorkflowCompleteFailedCause int64
const (
  WorkflowCompleteFailedCause_UNHANDLED_DECISION WorkflowCompleteFailedCause = 0
)

func (p WorkflowCompleteFailedCause) String() string {
  switch p {
  case WorkflowCompleteFailedCause_UNHANDLED_DECISION: return "UNHANDLED_DECISION"
  }
  return "<UNSET>"
}

func WorkflowCompleteFailedCauseFromString(s string) (WorkflowCompleteFailedCause, error) {
  switch s {
  case "UNHANDLED_DECISION": return WorkflowCompleteFailedCause_UNHANDLED_DECISION, nil 
  }
  return WorkflowCompleteFailedCause(0), fmt.Errorf("not a valid WorkflowCompleteFailedCause string")
}


func WorkflowCompleteFailedCausePtr(v WorkflowCompleteFailedCause) *WorkflowCompleteFailedCause { return &v }

func (p WorkflowCompleteFailedCause) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *WorkflowCompleteFailedCause) UnmarshalText(text []byte) error {
q, err := WorkflowCompleteFailedCauseFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *WorkflowCompleteFailedCause) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = WorkflowCompleteFailedCause(v)
return nil
}

func (p * WorkflowCompleteFailedCause) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Message
type BadRequestError struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
}

func NewBadRequestError() *BadRequestError {
  return &BadRequestError{}
}


func (p *BadRequestError) GetMessage() string {
  return p.Message
}
func (p *BadRequestError) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *BadRequestError)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *BadRequestError) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BadRequestError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BadRequestError) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *BadRequestError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BadRequestError(%+v)", *p)
}

func (p *BadRequestError) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type InternalServiceError struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
}

func NewInternalServiceError() *InternalServiceError {
  return &InternalServiceError{}
}


func (p *InternalServiceError) GetMessage() string {
  return p.Message
}
func (p *InternalServiceError) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *InternalServiceError)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *InternalServiceError) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InternalServiceError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InternalServiceError) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *InternalServiceError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InternalServiceError(%+v)", *p)
}

func (p *InternalServiceError) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type DomainAlreadyExistsError struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
}

func NewDomainAlreadyExistsError() *DomainAlreadyExistsError {
  return &DomainAlreadyExistsError{}
}


func (p *DomainAlreadyExistsError) GetMessage() string {
  return p.Message
}
func (p *DomainAlreadyExistsError) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *DomainAlreadyExistsError)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *DomainAlreadyExistsError) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DomainAlreadyExistsError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DomainAlreadyExistsError) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *DomainAlreadyExistsError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DomainAlreadyExistsError(%+v)", *p)
}

func (p *DomainAlreadyExistsError) Error() string {
  return p.String()
}

// Attributes:
//  - Message
//  - StartRequestId
//  - RunId
type WorkflowExecutionAlreadyStartedError struct {
  // unused fields # 1 to 9
  Message *string `thrift:"message,10" db:"message" json:"message,omitempty"`
  // unused fields # 11 to 19
  StartRequestId *string `thrift:"startRequestId,20" db:"startRequestId" json:"startRequestId,omitempty"`
  // unused fields # 21 to 29
  RunId *string `thrift:"runId,30" db:"runId" json:"runId,omitempty"`
}

func NewWorkflowExecutionAlreadyStartedError() *WorkflowExecutionAlreadyStartedError {
  return &WorkflowExecutionAlreadyStartedError{}
}

var WorkflowExecutionAlreadyStartedError_Message_DEFAULT string
func (p *WorkflowExecutionAlreadyStartedError) GetMessage() string {
  if !p.IsSetMessage() {
    return WorkflowExecutionAlreadyStartedError_Message_DEFAULT
  }
return *p.Message
}
var WorkflowExecutionAlreadyStartedError_StartRequestId_DEFAULT string
func (p *WorkflowExecutionAlreadyStartedError) GetStartRequestId() string {
  if !p.IsSetStartRequestId() {
    return WorkflowExecutionAlreadyStartedError_StartRequestId_DEFAULT
  }
return *p.StartRequestId
}
var WorkflowExecutionAlreadyStartedError_RunId_DEFAULT string
func (p *WorkflowExecutionAlreadyStartedError) GetRunId() string {
  if !p.IsSetRunId() {
    return WorkflowExecutionAlreadyStartedError_RunId_DEFAULT
  }
return *p.RunId
}
func (p *WorkflowExecutionAlreadyStartedError) IsSetMessage() bool {
  return p.Message != nil
}

func (p *WorkflowExecutionAlreadyStartedError) IsSetStartRequestId() bool {
  return p.StartRequestId != nil
}

func (p *WorkflowExecutionAlreadyStartedError) IsSetRunId() bool {
  return p.RunId != nil
}

func (p *WorkflowExecutionAlreadyStartedError) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowExecutionAlreadyStartedError)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *WorkflowExecutionAlreadyStartedError)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.StartRequestId = &v
}
  return nil
}

func (p *WorkflowExecutionAlreadyStartedError)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.RunId = &v
}
  return nil
}

func (p *WorkflowExecutionAlreadyStartedError) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WorkflowExecutionAlreadyStartedError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowExecutionAlreadyStartedError) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin("message", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:message: ", p), err) }
    if err := oprot.WriteString(string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:message: ", p), err) }
  }
  return err
}

func (p *WorkflowExecutionAlreadyStartedError) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartRequestId() {
    if err := oprot.WriteFieldBegin("startRequestId", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:startRequestId: ", p), err) }
    if err := oprot.WriteString(string(*p.StartRequestId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startRequestId (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:startRequestId: ", p), err) }
  }
  return err
}

func (p *WorkflowExecutionAlreadyStartedError) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetRunId() {
    if err := oprot.WriteFieldBegin("runId", thrift.STRING, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:runId: ", p), err) }
    if err := oprot.WriteString(string(*p.RunId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.runId (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:runId: ", p), err) }
  }
  return err
}

func (p *WorkflowExecutionAlreadyStartedError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowExecutionAlreadyStartedError(%+v)", *p)
}

func (p *WorkflowExecutionAlreadyStartedError) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type EntityNotExistsError struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
}

func NewEntityNotExistsError() *EntityNotExistsError {
  return &EntityNotExistsError{}
}


func (p *EntityNotExistsError) GetMessage() string {
  return p.Message
}
func (p *EntityNotExistsError) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *EntityNotExistsError)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *EntityNotExistsError) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("EntityNotExistsError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EntityNotExistsError) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *EntityNotExistsError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EntityNotExistsError(%+v)", *p)
}

func (p *EntityNotExistsError) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type ServiceBusyError struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
}

func NewServiceBusyError() *ServiceBusyError {
  return &ServiceBusyError{}
}


func (p *ServiceBusyError) GetMessage() string {
  return p.Message
}
func (p *ServiceBusyError) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *ServiceBusyError)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *ServiceBusyError) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ServiceBusyError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServiceBusyError) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *ServiceBusyError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceBusyError(%+v)", *p)
}

func (p *ServiceBusyError) Error() string {
  return p.String()
}

// Attributes:
//  - Name
type WorkflowType struct {
  // unused fields # 1 to 9
  Name *string `thrift:"name,10" db:"name" json:"name,omitempty"`
}

func NewWorkflowType() *WorkflowType {
  return &WorkflowType{}
}

var WorkflowType_Name_DEFAULT string
func (p *WorkflowType) GetName() string {
  if !p.IsSetName() {
    return WorkflowType_Name_DEFAULT
  }
return *p.Name
}
func (p *WorkflowType) IsSetName() bool {
  return p.Name != nil
}

func (p *WorkflowType) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowType)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *WorkflowType) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WorkflowType"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowType) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:name: ", p), err) }
  }
  return err
}

func (p *WorkflowType) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowType(%+v)", *p)
}

// Attributes:
//  - Name
type ActivityType struct {
  // unused fields # 1 to 9
  Name *string `thrift:"name,10" db:"name" json:"name,omitempty"`
}

func NewActivityType() *ActivityType {
  return &ActivityType{}
}

var ActivityType_Name_DEFAULT string
func (p *ActivityType) GetName() string {
  if !p.IsSetName() {
    return ActivityType_Name_DEFAULT
  }
return *p.Name
}
func (p *ActivityType) IsSetName() bool {
  return p.Name != nil
}

func (p *ActivityType) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ActivityType)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *ActivityType) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ActivityType"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ActivityType) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:name: ", p), err) }
  }
  return err
}

func (p *ActivityType) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ActivityType(%+v)", *p)
}

// Attributes:
//  - Name
type TaskList struct {
  // unused fields # 1 to 9
  Name *string `thrift:"name,10" db:"name" json:"name,omitempty"`
}

func NewTaskList() *TaskList {
  return &TaskList{}
}

var TaskList_Name_DEFAULT string
func (p *TaskList) GetName() string {
  if !p.IsSetName() {
    return TaskList_Name_DEFAULT
  }
return *p.Name
}
func (p *TaskList) IsSetName() bool {
  return p.Name != nil
}

func (p *TaskList) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TaskList)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *TaskList) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TaskList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TaskList) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:name: ", p), err) }
  }
  return err
}

func (p *TaskList) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TaskList(%+v)", *p)
}

// Attributes:
//  - WorkflowId
//  - RunId
type WorkflowExecution struct {
  // unused fields # 1 to 9
  WorkflowId *string `thrift:"workflowId,10" db:"workflowId" json:"workflowId,omitempty"`
  // unused fields # 11 to 19
  RunId *string `thrift:"runId,20" db:"runId" json:"runId,omitempty"`
}

func NewWorkflowExecution() *WorkflowExecution {
  return &WorkflowExecution{}
}

var WorkflowExecution_WorkflowId_DEFAULT string
func (p *WorkflowExecution) GetWorkflowId() string {
  if !p.IsSetWorkflowId() {
    return WorkflowExecution_WorkflowId_DEFAULT
  }
return *p.WorkflowId
}
var WorkflowExecution_RunId_DEFAULT string
func (p *WorkflowExecution) GetRunId() string {
  if !p.IsSetRunId() {
    return WorkflowExecution_RunId_DEFAULT
  }
return *p.RunId
}
func (p *WorkflowExecution) IsSetWorkflowId() bool {
  return p.WorkflowId != nil
}

func (p *WorkflowExecution) IsSetRunId() bool {
  return p.RunId != nil
}

func (p *WorkflowExecution) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowExecution)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.WorkflowId = &v
}
  return nil
}

func (p *WorkflowExecution)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.RunId = &v
}
  return nil
}

func (p *WorkflowExecution) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WorkflowExecution"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowExecution) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetWorkflowId() {
    if err := oprot.WriteFieldBegin("workflowId", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:workflowId: ", p), err) }
    if err := oprot.WriteString(string(*p.WorkflowId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.workflowId (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:workflowId: ", p), err) }
  }
  return err
}

func (p *WorkflowExecution) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetRunId() {
    if err := oprot.WriteFieldBegin("runId", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:runId: ", p), err) }
    if err := oprot.WriteString(string(*p.RunId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.runId (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:runId: ", p), err) }
  }
  return err
}

func (p *WorkflowExecution) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowExecution(%+v)", *p)
}

// Attributes:
//  - ActivityId
//  - ActivityType
//  - TaskList
//  - Input
//  - ScheduleToCloseTimeoutSeconds
//  - ScheduleToStartTimeoutSeconds
//  - StartToCloseTimeoutSeconds
//  - HeartbeatTimeoutSeconds
type ScheduleActivityTaskDecisionAttributes struct {
  // unused fields # 1 to 9
  ActivityId *string `thrift:"activityId,10" db:"activityId" json:"activityId,omitempty"`
  // unused fields # 11 to 19
  ActivityType *ActivityType `thrift:"activityType,20" db:"activityType" json:"activityType,omitempty"`
  // unused fields # 21 to 29
  TaskList *TaskList `thrift:"taskList,30" db:"taskList" json:"taskList,omitempty"`
  // unused fields # 31 to 39
  Input []byte `thrift:"input,40" db:"input" json:"input,omitempty"`
  // unused fields # 41 to 44
  ScheduleToCloseTimeoutSeconds *int32 `thrift:"scheduleToCloseTimeoutSeconds,45" db:"scheduleToCloseTimeoutSeconds" json:"scheduleToCloseTimeoutSeconds,omitempty"`
  // unused fields # 46 to 49
  ScheduleToStartTimeoutSeconds *int32 `thrift:"scheduleToStartTimeoutSeconds,50" db:"scheduleToStartTimeoutSeconds" json:"scheduleToStartTimeoutSeconds,omitempty"`
  // unused fields # 51 to 54
  StartToCloseTimeoutSeconds *int32 `thrift:"startToCloseTimeoutSeconds,55" db:"startToCloseTimeoutSeconds" json:"startToCloseTimeoutSeconds,omitempty"`
  // unused fields # 56 to 59
  HeartbeatTimeoutSeconds *int32 `thrift:"heartbeatTimeoutSeconds,60" db:"heartbeatTimeoutSeconds" json:"heartbeatTimeoutSeconds,omitempty"`
}

func NewScheduleActivityTaskDecisionAttributes() *ScheduleActivityTaskDecisionAttributes {
  return &ScheduleActivityTaskDecisionAttributes{}
}

var ScheduleActivityTaskDecisionAttributes_ActivityId_DEFAULT string
func (p *ScheduleActivityTaskDecisionAttributes) GetActivityId() string {
  if !p.IsSetActivityId() {
    return ScheduleActivityTaskDecisionAttributes_ActivityId_DEFAULT
  }
return *p.ActivityId
}
var ScheduleActivityTaskDecisionAttributes_ActivityType_DEFAULT *ActivityType
func (p *ScheduleActivityTaskDecisionAttributes) GetActivityType() *ActivityType {
  if !p.IsSetActivityType() {
    return ScheduleActivityTaskDecisionAttributes_ActivityType_DEFAULT
  }
return p.ActivityType
}
var ScheduleActivityTaskDecisionAttributes_TaskList_DEFAULT *TaskList
func (p *ScheduleActivityTaskDecisionAttributes) GetTaskList() *TaskList {
  if !p.IsSetTaskList() {
    return ScheduleActivityTaskDecisionAttributes_TaskList_DEFAULT
  }
return p.TaskList
}
var ScheduleActivityTaskDecisionAttributes_Input_DEFAULT []byte

func (p *ScheduleActivityTaskDecisionAttributes) GetInput() []byte {
  return p.Input
}
var ScheduleActivityTaskDecisionAttributes_ScheduleToCloseTimeoutSeconds_DEFAULT int32
func (p *ScheduleActivityTaskDecisionAttributes) GetScheduleToCloseTimeoutSeconds() int32 {
  if !p.IsSetScheduleToCloseTimeoutSeconds() {
    return ScheduleActivityTaskDecisionAttributes_ScheduleToCloseTimeoutSeconds_DEFAULT
  }
return *p.ScheduleToCloseTimeoutSeconds
}
var ScheduleActivityTaskDecisionAttributes_ScheduleToStartTimeoutSeconds_DEFAULT int32
func (p *ScheduleActivityTaskDecisionAttributes) GetScheduleToStartTimeoutSeconds() int32 {
  if !p.IsSetScheduleToStartTimeoutSeconds() {
    return ScheduleActivityTaskDecisionAttributes_ScheduleToStartTimeoutSeconds_DEFAULT
  }
return *p.ScheduleToStartTimeoutSeconds
}
var ScheduleActivityTaskDecisionAttributes_StartToCloseTimeoutSeconds_DEFAULT int32
func (p *ScheduleActivityTaskDecisionAttributes) GetStartToCloseTimeoutSeconds() int32 {
  if !p.IsSetStartToCloseTimeoutSeconds() {
    return ScheduleActivityTaskDecisionAttributes_StartToCloseTimeoutSeconds_DEFAULT
  }
return *p.StartToCloseTimeoutSeconds
}
var ScheduleActivityTaskDecisionAttributes_HeartbeatTimeoutSeconds_DEFAULT int32
func (p *ScheduleActivityTaskDecisionAttributes) GetHeartbeatTimeoutSeconds() int32 {
  if !p.IsSetHeartbeatTimeoutSeconds() {
    return ScheduleActivityTaskDecisionAttributes_HeartbeatTimeoutSeconds_DEFAULT
  }
return *p.HeartbeatTimeoutSeconds
}
func (p *ScheduleActivityTaskDecisionAttributes) IsSetActivityId() bool {
  return p.ActivityId != nil
}

func (p *ScheduleActivityTaskDecisionAttributes) IsSetActivityType() bool {
  return p.ActivityType != nil
}

func (p *ScheduleActivityTaskDecisionAttributes) IsSetTaskList() bool {
  return p.TaskList != nil
}

func (p *ScheduleActivityTaskDecisionAttributes) IsSetInput() bool {
  return p.Input != nil
}

func (p *ScheduleActivityTaskDecisionAttributes) IsSetScheduleToCloseTimeoutSeconds() bool {
  return p.ScheduleToCloseTimeoutSeconds != nil
}

func (p *ScheduleActivityTaskDecisionAttributes) IsSetScheduleToStartTimeoutSeconds() bool {
  return p.ScheduleToStartTimeoutSeconds != nil
}

func (p *ScheduleActivityTaskDecisionAttributes) IsSetStartToCloseTimeoutSeconds() bool {
  return p.StartToCloseTimeoutSeconds != nil
}

func (p *ScheduleActivityTaskDecisionAttributes) IsSetHeartbeatTimeoutSeconds() bool {
  return p.HeartbeatTimeoutSeconds != nil
}

func (p *ScheduleActivityTaskDecisionAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    case 45:
      if err := p.ReadField45(iprot); err != nil {
        return err
      }
    case 50:
      if err := p.ReadField50(iprot); err != nil {
        return err
      }
    case 55:
      if err := p.ReadField55(iprot); err != nil {
        return err
      }
    case 60:
      if err := p.ReadField60(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleActivityTaskDecisionAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ActivityId = &v
}
  return nil
}

func (p *ScheduleActivityTaskDecisionAttributes)  ReadField20(iprot thrift.TProtocol) error {
  p.ActivityType = &ActivityType{}
  if err := p.ActivityType.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ActivityType), err)
  }
  return nil
}

func (p *ScheduleActivityTaskDecisionAttributes)  ReadField30(iprot thrift.TProtocol) error {
  p.TaskList = &TaskList{}
  if err := p.TaskList.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TaskList), err)
  }
  return nil
}

func (p *ScheduleActivityTaskDecisionAttributes)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.Input = v
}
  return nil
}

func (p *ScheduleActivityTaskDecisionAttributes)  ReadField45(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 45: ", err)
} else {
  p.ScheduleToCloseTimeoutSeconds = &v
}
  return nil
}

func (p *ScheduleActivityTaskDecisionAttributes)  ReadField50(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 50: ", err)
} else {
  p.ScheduleToStartTimeoutSeconds = &v
}
  return nil
}

func (p *ScheduleActivityTaskDecisionAttributes)  ReadField55(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 55: ", err)
} else {
  p.StartToCloseTimeoutSeconds = &v
}
  return nil
}

func (p *ScheduleActivityTaskDecisionAttributes)  ReadField60(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 60: ", err)
} else {
  p.HeartbeatTimeoutSeconds = &v
}
  return nil
}

func (p *ScheduleActivityTaskDecisionAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ScheduleActivityTaskDecisionAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField45(oprot); err != nil { return err }
    if err := p.writeField50(oprot); err != nil { return err }
    if err := p.writeField55(oprot); err != nil { return err }
    if err := p.writeField60(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleActivityTaskDecisionAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetActivityId() {
    if err := oprot.WriteFieldBegin("activityId", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:activityId: ", p), err) }
    if err := oprot.WriteString(string(*p.ActivityId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.activityId (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:activityId: ", p), err) }
  }
  return err
}

func (p *ScheduleActivityTaskDecisionAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetActivityType() {
    if err := oprot.WriteFieldBegin("activityType", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:activityType: ", p), err) }
    if err := p.ActivityType.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ActivityType), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:activityType: ", p), err) }
  }
  return err
}

func (p *ScheduleActivityTaskDecisionAttributes) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskList() {
    if err := oprot.WriteFieldBegin("taskList", thrift.STRUCT, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:taskList: ", p), err) }
    if err := p.TaskList.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TaskList), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:taskList: ", p), err) }
  }
  return err
}

func (p *ScheduleActivityTaskDecisionAttributes) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetInput() {
    if err := oprot.WriteFieldBegin("input", thrift.STRING, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:input: ", p), err) }
    if err := oprot.WriteBinary(p.Input); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.input (40) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:input: ", p), err) }
  }
  return err
}

func (p *ScheduleActivityTaskDecisionAttributes) writeField45(oprot thrift.TProtocol) (err error) {
  if p.IsSetScheduleToCloseTimeoutSeconds() {
    if err := oprot.WriteFieldBegin("scheduleToCloseTimeoutSeconds", thrift.I32, 45); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 45:scheduleToCloseTimeoutSeconds: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ScheduleToCloseTimeoutSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.scheduleToCloseTimeoutSeconds (45) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 45:scheduleToCloseTimeoutSeconds: ", p), err) }
  }
  return err
}

func (p *ScheduleActivityTaskDecisionAttributes) writeField50(oprot thrift.TProtocol) (err error) {
  if p.IsSetScheduleToStartTimeoutSeconds() {
    if err := oprot.WriteFieldBegin("scheduleToStartTimeoutSeconds", thrift.I32, 50); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:scheduleToStartTimeoutSeconds: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ScheduleToStartTimeoutSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.scheduleToStartTimeoutSeconds (50) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 50:scheduleToStartTimeoutSeconds: ", p), err) }
  }
  return err
}

func (p *ScheduleActivityTaskDecisionAttributes) writeField55(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartToCloseTimeoutSeconds() {
    if err := oprot.WriteFieldBegin("startToCloseTimeoutSeconds", thrift.I32, 55); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 55:startToCloseTimeoutSeconds: ", p), err) }
    if err := oprot.WriteI32(int32(*p.StartToCloseTimeoutSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startToCloseTimeoutSeconds (55) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 55:startToCloseTimeoutSeconds: ", p), err) }
  }
  return err
}

func (p *ScheduleActivityTaskDecisionAttributes) writeField60(oprot thrift.TProtocol) (err error) {
  if p.IsSetHeartbeatTimeoutSeconds() {
    if err := oprot.WriteFieldBegin("heartbeatTimeoutSeconds", thrift.I32, 60); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:heartbeatTimeoutSeconds: ", p), err) }
    if err := oprot.WriteI32(int32(*p.HeartbeatTimeoutSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.heartbeatTimeoutSeconds (60) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 60:heartbeatTimeoutSeconds: ", p), err) }
  }
  return err
}

func (p *ScheduleActivityTaskDecisionAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleActivityTaskDecisionAttributes(%+v)", *p)
}

// Attributes:
//  - ActivityId
type RequestCancelActivityTaskDecisionAttributes struct {
  // unused fields # 1 to 9
  ActivityId *string `thrift:"activityId,10" db:"activityId" json:"activityId,omitempty"`
}

func NewRequestCancelActivityTaskDecisionAttributes() *RequestCancelActivityTaskDecisionAttributes {
  return &RequestCancelActivityTaskDecisionAttributes{}
}

var RequestCancelActivityTaskDecisionAttributes_ActivityId_DEFAULT string
func (p *RequestCancelActivityTaskDecisionAttributes) GetActivityId() string {
  if !p.IsSetActivityId() {
    return RequestCancelActivityTaskDecisionAttributes_ActivityId_DEFAULT
  }
return *p.ActivityId
}
func (p *RequestCancelActivityTaskDecisionAttributes) IsSetActivityId() bool {
  return p.ActivityId != nil
}

func (p *RequestCancelActivityTaskDecisionAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RequestCancelActivityTaskDecisionAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ActivityId = &v
}
  return nil
}

func (p *RequestCancelActivityTaskDecisionAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RequestCancelActivityTaskDecisionAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RequestCancelActivityTaskDecisionAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetActivityId() {
    if err := oprot.WriteFieldBegin("activityId", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:activityId: ", p), err) }
    if err := oprot.WriteString(string(*p.ActivityId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.activityId (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:activityId: ", p), err) }
  }
  return err
}

func (p *RequestCancelActivityTaskDecisionAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestCancelActivityTaskDecisionAttributes(%+v)", *p)
}

// Attributes:
//  - TimerId
//  - StartToFireTimeoutSeconds
type StartTimerDecisionAttributes struct {
  // unused fields # 1 to 9
  TimerId *string `thrift:"timerId,10" db:"timerId" json:"timerId,omitempty"`
  // unused fields # 11 to 19
  StartToFireTimeoutSeconds *int64 `thrift:"startToFireTimeoutSeconds,20" db:"startToFireTimeoutSeconds" json:"startToFireTimeoutSeconds,omitempty"`
}

func NewStartTimerDecisionAttributes() *StartTimerDecisionAttributes {
  return &StartTimerDecisionAttributes{}
}

var StartTimerDecisionAttributes_TimerId_DEFAULT string
func (p *StartTimerDecisionAttributes) GetTimerId() string {
  if !p.IsSetTimerId() {
    return StartTimerDecisionAttributes_TimerId_DEFAULT
  }
return *p.TimerId
}
var StartTimerDecisionAttributes_StartToFireTimeoutSeconds_DEFAULT int64
func (p *StartTimerDecisionAttributes) GetStartToFireTimeoutSeconds() int64 {
  if !p.IsSetStartToFireTimeoutSeconds() {
    return StartTimerDecisionAttributes_StartToFireTimeoutSeconds_DEFAULT
  }
return *p.StartToFireTimeoutSeconds
}
func (p *StartTimerDecisionAttributes) IsSetTimerId() bool {
  return p.TimerId != nil
}

func (p *StartTimerDecisionAttributes) IsSetStartToFireTimeoutSeconds() bool {
  return p.StartToFireTimeoutSeconds != nil
}

func (p *StartTimerDecisionAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StartTimerDecisionAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TimerId = &v
}
  return nil
}

func (p *StartTimerDecisionAttributes)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.StartToFireTimeoutSeconds = &v
}
  return nil
}

func (p *StartTimerDecisionAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("StartTimerDecisionAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StartTimerDecisionAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimerId() {
    if err := oprot.WriteFieldBegin("timerId", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:timerId: ", p), err) }
    if err := oprot.WriteString(string(*p.TimerId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timerId (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:timerId: ", p), err) }
  }
  return err
}

func (p *StartTimerDecisionAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartToFireTimeoutSeconds() {
    if err := oprot.WriteFieldBegin("startToFireTimeoutSeconds", thrift.I64, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:startToFireTimeoutSeconds: ", p), err) }
    if err := oprot.WriteI64(int64(*p.StartToFireTimeoutSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startToFireTimeoutSeconds (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:startToFireTimeoutSeconds: ", p), err) }
  }
  return err
}

func (p *StartTimerDecisionAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StartTimerDecisionAttributes(%+v)", *p)
}

// Attributes:
//  - Result_
type CompleteWorkflowExecutionDecisionAttributes struct {
  // unused fields # 1 to 9
  Result_ []byte `thrift:"result,10" db:"result" json:"result,omitempty"`
}

func NewCompleteWorkflowExecutionDecisionAttributes() *CompleteWorkflowExecutionDecisionAttributes {
  return &CompleteWorkflowExecutionDecisionAttributes{}
}

var CompleteWorkflowExecutionDecisionAttributes_Result__DEFAULT []byte

func (p *CompleteWorkflowExecutionDecisionAttributes) GetResult_() []byte {
  return p.Result_
}
func (p *CompleteWorkflowExecutionDecisionAttributes) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *CompleteWorkflowExecutionDecisionAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompleteWorkflowExecutionDecisionAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Result_ = v
}
  return nil
}

func (p *CompleteWorkflowExecutionDecisionAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CompleteWorkflowExecutionDecisionAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompleteWorkflowExecutionDecisionAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetResult_() {
    if err := oprot.WriteFieldBegin("result", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:result: ", p), err) }
    if err := oprot.WriteBinary(p.Result_); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.result (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:result: ", p), err) }
  }
  return err
}

func (p *CompleteWorkflowExecutionDecisionAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompleteWorkflowExecutionDecisionAttributes(%+v)", *p)
}

// Attributes:
//  - Reason
//  - Details
type FailWorkflowExecutionDecisionAttributes struct {
  // unused fields # 1 to 9
  Reason *string `thrift:"reason,10" db:"reason" json:"reason,omitempty"`
  // unused fields # 11 to 19
  Details []byte `thrift:"details,20" db:"details" json:"details,omitempty"`
}

func NewFailWorkflowExecutionDecisionAttributes() *FailWorkflowExecutionDecisionAttributes {
  return &FailWorkflowExecutionDecisionAttributes{}
}

var FailWorkflowExecutionDecisionAttributes_Reason_DEFAULT string
func (p *FailWorkflowExecutionDecisionAttributes) GetReason() string {
  if !p.IsSetReason() {
    return FailWorkflowExecutionDecisionAttributes_Reason_DEFAULT
  }
return *p.Reason
}
var FailWorkflowExecutionDecisionAttributes_Details_DEFAULT []byte

func (p *FailWorkflowExecutionDecisionAttributes) GetDetails() []byte {
  return p.Details
}
func (p *FailWorkflowExecutionDecisionAttributes) IsSetReason() bool {
  return p.Reason != nil
}

func (p *FailWorkflowExecutionDecisionAttributes) IsSetDetails() bool {
  return p.Details != nil
}

func (p *FailWorkflowExecutionDecisionAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FailWorkflowExecutionDecisionAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Reason = &v
}
  return nil
}

func (p *FailWorkflowExecutionDecisionAttributes)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Details = v
}
  return nil
}

func (p *FailWorkflowExecutionDecisionAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FailWorkflowExecutionDecisionAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FailWorkflowExecutionDecisionAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetReason() {
    if err := oprot.WriteFieldBegin("reason", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:reason: ", p), err) }
    if err := oprot.WriteString(string(*p.Reason)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reason (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:reason: ", p), err) }
  }
  return err
}

func (p *FailWorkflowExecutionDecisionAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetDetails() {
    if err := oprot.WriteFieldBegin("details", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:details: ", p), err) }
    if err := oprot.WriteBinary(p.Details); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.details (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:details: ", p), err) }
  }
  return err
}

func (p *FailWorkflowExecutionDecisionAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FailWorkflowExecutionDecisionAttributes(%+v)", *p)
}

// Attributes:
//  - TimerId
type CancelTimerDecisionAttributes struct {
  // unused fields # 1 to 9
  TimerId *string `thrift:"timerId,10" db:"timerId" json:"timerId,omitempty"`
}

func NewCancelTimerDecisionAttributes() *CancelTimerDecisionAttributes {
  return &CancelTimerDecisionAttributes{}
}

var CancelTimerDecisionAttributes_TimerId_DEFAULT string
func (p *CancelTimerDecisionAttributes) GetTimerId() string {
  if !p.IsSetTimerId() {
    return CancelTimerDecisionAttributes_TimerId_DEFAULT
  }
return *p.TimerId
}
func (p *CancelTimerDecisionAttributes) IsSetTimerId() bool {
  return p.TimerId != nil
}

func (p *CancelTimerDecisionAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CancelTimerDecisionAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TimerId = &v
}
  return nil
}

func (p *CancelTimerDecisionAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CancelTimerDecisionAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CancelTimerDecisionAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimerId() {
    if err := oprot.WriteFieldBegin("timerId", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:timerId: ", p), err) }
    if err := oprot.WriteString(string(*p.TimerId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timerId (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:timerId: ", p), err) }
  }
  return err
}

func (p *CancelTimerDecisionAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CancelTimerDecisionAttributes(%+v)", *p)
}

// Attributes:
//  - MarkerName
//  - Details
type RecordMarkerDecisionAttributes struct {
  // unused fields # 1 to 9
  MarkerName *string `thrift:"markerName,10" db:"markerName" json:"markerName,omitempty"`
  // unused fields # 11 to 19
  Details []byte `thrift:"details,20" db:"details" json:"details,omitempty"`
}

func NewRecordMarkerDecisionAttributes() *RecordMarkerDecisionAttributes {
  return &RecordMarkerDecisionAttributes{}
}

var RecordMarkerDecisionAttributes_MarkerName_DEFAULT string
func (p *RecordMarkerDecisionAttributes) GetMarkerName() string {
  if !p.IsSetMarkerName() {
    return RecordMarkerDecisionAttributes_MarkerName_DEFAULT
  }
return *p.MarkerName
}
var RecordMarkerDecisionAttributes_Details_DEFAULT []byte

func (p *RecordMarkerDecisionAttributes) GetDetails() []byte {
  return p.Details
}
func (p *RecordMarkerDecisionAttributes) IsSetMarkerName() bool {
  return p.MarkerName != nil
}

func (p *RecordMarkerDecisionAttributes) IsSetDetails() bool {
  return p.Details != nil
}

func (p *RecordMarkerDecisionAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RecordMarkerDecisionAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.MarkerName = &v
}
  return nil
}

func (p *RecordMarkerDecisionAttributes)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Details = v
}
  return nil
}

func (p *RecordMarkerDecisionAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RecordMarkerDecisionAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RecordMarkerDecisionAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetMarkerName() {
    if err := oprot.WriteFieldBegin("markerName", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:markerName: ", p), err) }
    if err := oprot.WriteString(string(*p.MarkerName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.markerName (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:markerName: ", p), err) }
  }
  return err
}

func (p *RecordMarkerDecisionAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetDetails() {
    if err := oprot.WriteFieldBegin("details", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:details: ", p), err) }
    if err := oprot.WriteBinary(p.Details); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.details (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:details: ", p), err) }
  }
  return err
}

func (p *RecordMarkerDecisionAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RecordMarkerDecisionAttributes(%+v)", *p)
}

// Attributes:
//  - DecisionType
//  - ScheduleActivityTaskDecisionAttributes
//  - StartTimerDecisionAttributes
//  - CompleteWorkflowExecutionDecisionAttributes
//  - FailWorkflowExecutionDecisionAttributes
//  - RequestCancelActivityTaskDecisionAttributes
//  - CancelTimerDecisionAttributes
//  - RecordMarkerDecisionAttributes
type Decision struct {
  // unused fields # 1 to 9
  DecisionType *DecisionType `thrift:"decisionType,10" db:"decisionType" json:"decisionType,omitempty"`
  // unused fields # 11 to 19
  ScheduleActivityTaskDecisionAttributes *ScheduleActivityTaskDecisionAttributes `thrift:"scheduleActivityTaskDecisionAttributes,20" db:"scheduleActivityTaskDecisionAttributes" json:"scheduleActivityTaskDecisionAttributes,omitempty"`
  // unused fields # 21 to 24
  StartTimerDecisionAttributes *StartTimerDecisionAttributes `thrift:"startTimerDecisionAttributes,25" db:"startTimerDecisionAttributes" json:"startTimerDecisionAttributes,omitempty"`
  // unused fields # 26 to 29
  CompleteWorkflowExecutionDecisionAttributes *CompleteWorkflowExecutionDecisionAttributes `thrift:"completeWorkflowExecutionDecisionAttributes,30" db:"completeWorkflowExecutionDecisionAttributes" json:"completeWorkflowExecutionDecisionAttributes,omitempty"`
  // unused fields # 31 to 34
  FailWorkflowExecutionDecisionAttributes *FailWorkflowExecutionDecisionAttributes `thrift:"failWorkflowExecutionDecisionAttributes,35" db:"failWorkflowExecutionDecisionAttributes" json:"failWorkflowExecutionDecisionAttributes,omitempty"`
  // unused fields # 36 to 39
  RequestCancelActivityTaskDecisionAttributes *RequestCancelActivityTaskDecisionAttributes `thrift:"requestCancelActivityTaskDecisionAttributes,40" db:"requestCancelActivityTaskDecisionAttributes" json:"requestCancelActivityTaskDecisionAttributes,omitempty"`
  // unused fields # 41 to 49
  CancelTimerDecisionAttributes *CancelTimerDecisionAttributes `thrift:"cancelTimerDecisionAttributes,50" db:"cancelTimerDecisionAttributes" json:"cancelTimerDecisionAttributes,omitempty"`
  // unused fields # 51 to 59
  RecordMarkerDecisionAttributes *RecordMarkerDecisionAttributes `thrift:"recordMarkerDecisionAttributes,60" db:"recordMarkerDecisionAttributes" json:"recordMarkerDecisionAttributes,omitempty"`
}

func NewDecision() *Decision {
  return &Decision{}
}

var Decision_DecisionType_DEFAULT DecisionType
func (p *Decision) GetDecisionType() DecisionType {
  if !p.IsSetDecisionType() {
    return Decision_DecisionType_DEFAULT
  }
return *p.DecisionType
}
var Decision_ScheduleActivityTaskDecisionAttributes_DEFAULT *ScheduleActivityTaskDecisionAttributes
func (p *Decision) GetScheduleActivityTaskDecisionAttributes() *ScheduleActivityTaskDecisionAttributes {
  if !p.IsSetScheduleActivityTaskDecisionAttributes() {
    return Decision_ScheduleActivityTaskDecisionAttributes_DEFAULT
  }
return p.ScheduleActivityTaskDecisionAttributes
}
var Decision_StartTimerDecisionAttributes_DEFAULT *StartTimerDecisionAttributes
func (p *Decision) GetStartTimerDecisionAttributes() *StartTimerDecisionAttributes {
  if !p.IsSetStartTimerDecisionAttributes() {
    return Decision_StartTimerDecisionAttributes_DEFAULT
  }
return p.StartTimerDecisionAttributes
}
var Decision_CompleteWorkflowExecutionDecisionAttributes_DEFAULT *CompleteWorkflowExecutionDecisionAttributes
func (p *Decision) GetCompleteWorkflowExecutionDecisionAttributes() *CompleteWorkflowExecutionDecisionAttributes {
  if !p.IsSetCompleteWorkflowExecutionDecisionAttributes() {
    return Decision_CompleteWorkflowExecutionDecisionAttributes_DEFAULT
  }
return p.CompleteWorkflowExecutionDecisionAttributes
}
var Decision_FailWorkflowExecutionDecisionAttributes_DEFAULT *FailWorkflowExecutionDecisionAttributes
func (p *Decision) GetFailWorkflowExecutionDecisionAttributes() *FailWorkflowExecutionDecisionAttributes {
  if !p.IsSetFailWorkflowExecutionDecisionAttributes() {
    return Decision_FailWorkflowExecutionDecisionAttributes_DEFAULT
  }
return p.FailWorkflowExecutionDecisionAttributes
}
var Decision_RequestCancelActivityTaskDecisionAttributes_DEFAULT *RequestCancelActivityTaskDecisionAttributes
func (p *Decision) GetRequestCancelActivityTaskDecisionAttributes() *RequestCancelActivityTaskDecisionAttributes {
  if !p.IsSetRequestCancelActivityTaskDecisionAttributes() {
    return Decision_RequestCancelActivityTaskDecisionAttributes_DEFAULT
  }
return p.RequestCancelActivityTaskDecisionAttributes
}
var Decision_CancelTimerDecisionAttributes_DEFAULT *CancelTimerDecisionAttributes
func (p *Decision) GetCancelTimerDecisionAttributes() *CancelTimerDecisionAttributes {
  if !p.IsSetCancelTimerDecisionAttributes() {
    return Decision_CancelTimerDecisionAttributes_DEFAULT
  }
return p.CancelTimerDecisionAttributes
}
var Decision_RecordMarkerDecisionAttributes_DEFAULT *RecordMarkerDecisionAttributes
func (p *Decision) GetRecordMarkerDecisionAttributes() *RecordMarkerDecisionAttributes {
  if !p.IsSetRecordMarkerDecisionAttributes() {
    return Decision_RecordMarkerDecisionAttributes_DEFAULT
  }
return p.RecordMarkerDecisionAttributes
}
func (p *Decision) IsSetDecisionType() bool {
  return p.DecisionType != nil
}

func (p *Decision) IsSetScheduleActivityTaskDecisionAttributes() bool {
  return p.ScheduleActivityTaskDecisionAttributes != nil
}

func (p *Decision) IsSetStartTimerDecisionAttributes() bool {
  return p.StartTimerDecisionAttributes != nil
}

func (p *Decision) IsSetCompleteWorkflowExecutionDecisionAttributes() bool {
  return p.CompleteWorkflowExecutionDecisionAttributes != nil
}

func (p *Decision) IsSetFailWorkflowExecutionDecisionAttributes() bool {
  return p.FailWorkflowExecutionDecisionAttributes != nil
}

func (p *Decision) IsSetRequestCancelActivityTaskDecisionAttributes() bool {
  return p.RequestCancelActivityTaskDecisionAttributes != nil
}

func (p *Decision) IsSetCancelTimerDecisionAttributes() bool {
  return p.CancelTimerDecisionAttributes != nil
}

func (p *Decision) IsSetRecordMarkerDecisionAttributes() bool {
  return p.RecordMarkerDecisionAttributes != nil
}

func (p *Decision) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 25:
      if err := p.ReadField25(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 35:
      if err := p.ReadField35(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    case 50:
      if err := p.ReadField50(iprot); err != nil {
        return err
      }
    case 60:
      if err := p.ReadField60(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Decision)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := DecisionType(v)
  p.DecisionType = &temp
}
  return nil
}

func (p *Decision)  ReadField20(iprot thrift.TProtocol) error {
  p.ScheduleActivityTaskDecisionAttributes = &ScheduleActivityTaskDecisionAttributes{}
  if err := p.ScheduleActivityTaskDecisionAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ScheduleActivityTaskDecisionAttributes), err)
  }
  return nil
}

func (p *Decision)  ReadField25(iprot thrift.TProtocol) error {
  p.StartTimerDecisionAttributes = &StartTimerDecisionAttributes{}
  if err := p.StartTimerDecisionAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StartTimerDecisionAttributes), err)
  }
  return nil
}

func (p *Decision)  ReadField30(iprot thrift.TProtocol) error {
  p.CompleteWorkflowExecutionDecisionAttributes = &CompleteWorkflowExecutionDecisionAttributes{}
  if err := p.CompleteWorkflowExecutionDecisionAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CompleteWorkflowExecutionDecisionAttributes), err)
  }
  return nil
}

func (p *Decision)  ReadField35(iprot thrift.TProtocol) error {
  p.FailWorkflowExecutionDecisionAttributes = &FailWorkflowExecutionDecisionAttributes{}
  if err := p.FailWorkflowExecutionDecisionAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FailWorkflowExecutionDecisionAttributes), err)
  }
  return nil
}

func (p *Decision)  ReadField40(iprot thrift.TProtocol) error {
  p.RequestCancelActivityTaskDecisionAttributes = &RequestCancelActivityTaskDecisionAttributes{}
  if err := p.RequestCancelActivityTaskDecisionAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestCancelActivityTaskDecisionAttributes), err)
  }
  return nil
}

func (p *Decision)  ReadField50(iprot thrift.TProtocol) error {
  p.CancelTimerDecisionAttributes = &CancelTimerDecisionAttributes{}
  if err := p.CancelTimerDecisionAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CancelTimerDecisionAttributes), err)
  }
  return nil
}

func (p *Decision)  ReadField60(iprot thrift.TProtocol) error {
  p.RecordMarkerDecisionAttributes = &RecordMarkerDecisionAttributes{}
  if err := p.RecordMarkerDecisionAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RecordMarkerDecisionAttributes), err)
  }
  return nil
}

func (p *Decision) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Decision"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField35(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField50(oprot); err != nil { return err }
    if err := p.writeField60(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Decision) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDecisionType() {
    if err := oprot.WriteFieldBegin("decisionType", thrift.I32, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:decisionType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.DecisionType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.decisionType (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:decisionType: ", p), err) }
  }
  return err
}

func (p *Decision) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetScheduleActivityTaskDecisionAttributes() {
    if err := oprot.WriteFieldBegin("scheduleActivityTaskDecisionAttributes", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:scheduleActivityTaskDecisionAttributes: ", p), err) }
    if err := p.ScheduleActivityTaskDecisionAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ScheduleActivityTaskDecisionAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:scheduleActivityTaskDecisionAttributes: ", p), err) }
  }
  return err
}

func (p *Decision) writeField25(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartTimerDecisionAttributes() {
    if err := oprot.WriteFieldBegin("startTimerDecisionAttributes", thrift.STRUCT, 25); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:startTimerDecisionAttributes: ", p), err) }
    if err := p.StartTimerDecisionAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StartTimerDecisionAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 25:startTimerDecisionAttributes: ", p), err) }
  }
  return err
}

func (p *Decision) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetCompleteWorkflowExecutionDecisionAttributes() {
    if err := oprot.WriteFieldBegin("completeWorkflowExecutionDecisionAttributes", thrift.STRUCT, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:completeWorkflowExecutionDecisionAttributes: ", p), err) }
    if err := p.CompleteWorkflowExecutionDecisionAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CompleteWorkflowExecutionDecisionAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:completeWorkflowExecutionDecisionAttributes: ", p), err) }
  }
  return err
}

func (p *Decision) writeField35(oprot thrift.TProtocol) (err error) {
  if p.IsSetFailWorkflowExecutionDecisionAttributes() {
    if err := oprot.WriteFieldBegin("failWorkflowExecutionDecisionAttributes", thrift.STRUCT, 35); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:failWorkflowExecutionDecisionAttributes: ", p), err) }
    if err := p.FailWorkflowExecutionDecisionAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FailWorkflowExecutionDecisionAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 35:failWorkflowExecutionDecisionAttributes: ", p), err) }
  }
  return err
}

func (p *Decision) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestCancelActivityTaskDecisionAttributes() {
    if err := oprot.WriteFieldBegin("requestCancelActivityTaskDecisionAttributes", thrift.STRUCT, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:requestCancelActivityTaskDecisionAttributes: ", p), err) }
    if err := p.RequestCancelActivityTaskDecisionAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestCancelActivityTaskDecisionAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:requestCancelActivityTaskDecisionAttributes: ", p), err) }
  }
  return err
}

func (p *Decision) writeField50(oprot thrift.TProtocol) (err error) {
  if p.IsSetCancelTimerDecisionAttributes() {
    if err := oprot.WriteFieldBegin("cancelTimerDecisionAttributes", thrift.STRUCT, 50); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:cancelTimerDecisionAttributes: ", p), err) }
    if err := p.CancelTimerDecisionAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CancelTimerDecisionAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 50:cancelTimerDecisionAttributes: ", p), err) }
  }
  return err
}

func (p *Decision) writeField60(oprot thrift.TProtocol) (err error) {
  if p.IsSetRecordMarkerDecisionAttributes() {
    if err := oprot.WriteFieldBegin("recordMarkerDecisionAttributes", thrift.STRUCT, 60); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:recordMarkerDecisionAttributes: ", p), err) }
    if err := p.RecordMarkerDecisionAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RecordMarkerDecisionAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 60:recordMarkerDecisionAttributes: ", p), err) }
  }
  return err
}

func (p *Decision) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Decision(%+v)", *p)
}

// Attributes:
//  - WorkflowType
//  - TaskList
//  - Input
//  - ExecutionStartToCloseTimeoutSeconds
//  - TaskStartToCloseTimeoutSeconds
//  - Identity
type WorkflowExecutionStartedEventAttributes struct {
  // unused fields # 1 to 9
  WorkflowType *WorkflowType `thrift:"workflowType,10" db:"workflowType" json:"workflowType,omitempty"`
  // unused fields # 11 to 19
  TaskList *TaskList `thrift:"taskList,20" db:"taskList" json:"taskList,omitempty"`
  // unused fields # 21 to 29
  Input []byte `thrift:"input,30" db:"input" json:"input,omitempty"`
  // unused fields # 31 to 39
  ExecutionStartToCloseTimeoutSeconds *int32 `thrift:"executionStartToCloseTimeoutSeconds,40" db:"executionStartToCloseTimeoutSeconds" json:"executionStartToCloseTimeoutSeconds,omitempty"`
  // unused fields # 41 to 49
  TaskStartToCloseTimeoutSeconds *int32 `thrift:"taskStartToCloseTimeoutSeconds,50" db:"taskStartToCloseTimeoutSeconds" json:"taskStartToCloseTimeoutSeconds,omitempty"`
  // unused fields # 51 to 59
  Identity *string `thrift:"identity,60" db:"identity" json:"identity,omitempty"`
}

func NewWorkflowExecutionStartedEventAttributes() *WorkflowExecutionStartedEventAttributes {
  return &WorkflowExecutionStartedEventAttributes{}
}

var WorkflowExecutionStartedEventAttributes_WorkflowType_DEFAULT *WorkflowType
func (p *WorkflowExecutionStartedEventAttributes) GetWorkflowType() *WorkflowType {
  if !p.IsSetWorkflowType() {
    return WorkflowExecutionStartedEventAttributes_WorkflowType_DEFAULT
  }
return p.WorkflowType
}
var WorkflowExecutionStartedEventAttributes_TaskList_DEFAULT *TaskList
func (p *WorkflowExecutionStartedEventAttributes) GetTaskList() *TaskList {
  if !p.IsSetTaskList() {
    return WorkflowExecutionStartedEventAttributes_TaskList_DEFAULT
  }
return p.TaskList
}
var WorkflowExecutionStartedEventAttributes_Input_DEFAULT []byte

func (p *WorkflowExecutionStartedEventAttributes) GetInput() []byte {
  return p.Input
}
var WorkflowExecutionStartedEventAttributes_ExecutionStartToCloseTimeoutSeconds_DEFAULT int32
func (p *WorkflowExecutionStartedEventAttributes) GetExecutionStartToCloseTimeoutSeconds() int32 {
  if !p.IsSetExecutionStartToCloseTimeoutSeconds() {
    return WorkflowExecutionStartedEventAttributes_ExecutionStartToCloseTimeoutSeconds_DEFAULT
  }
return *p.ExecutionStartToCloseTimeoutSeconds
}
var WorkflowExecutionStartedEventAttributes_TaskStartToCloseTimeoutSeconds_DEFAULT int32
func (p *WorkflowExecutionStartedEventAttributes) GetTaskStartToCloseTimeoutSeconds() int32 {
  if !p.IsSetTaskStartToCloseTimeoutSeconds() {
    return WorkflowExecutionStartedEventAttributes_TaskStartToCloseTimeoutSeconds_DEFAULT
  }
return *p.TaskStartToCloseTimeoutSeconds
}
var WorkflowExecutionStartedEventAttributes_Identity_DEFAULT string
func (p *WorkflowExecutionStartedEventAttributes) GetIdentity() string {
  if !p.IsSetIdentity() {
    return WorkflowExecutionStartedEventAttributes_Identity_DEFAULT
  }
return *p.Identity
}
func (p *WorkflowExecutionStartedEventAttributes) IsSetWorkflowType() bool {
  return p.WorkflowType != nil
}

func (p *WorkflowExecutionStartedEventAttributes) IsSetTaskList() bool {
  return p.TaskList != nil
}

func (p *WorkflowExecutionStartedEventAttributes) IsSetInput() bool {
  return p.Input != nil
}

func (p *WorkflowExecutionStartedEventAttributes) IsSetExecutionStartToCloseTimeoutSeconds() bool {
  return p.ExecutionStartToCloseTimeoutSeconds != nil
}

func (p *WorkflowExecutionStartedEventAttributes) IsSetTaskStartToCloseTimeoutSeconds() bool {
  return p.TaskStartToCloseTimeoutSeconds != nil
}

func (p *WorkflowExecutionStartedEventAttributes) IsSetIdentity() bool {
  return p.Identity != nil
}

func (p *WorkflowExecutionStartedEventAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    case 50:
      if err := p.ReadField50(iprot); err != nil {
        return err
      }
    case 60:
      if err := p.ReadField60(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowExecutionStartedEventAttributes)  ReadField10(iprot thrift.TProtocol) error {
  p.WorkflowType = &WorkflowType{}
  if err := p.WorkflowType.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WorkflowType), err)
  }
  return nil
}

func (p *WorkflowExecutionStartedEventAttributes)  ReadField20(iprot thrift.TProtocol) error {
  p.TaskList = &TaskList{}
  if err := p.TaskList.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TaskList), err)
  }
  return nil
}

func (p *WorkflowExecutionStartedEventAttributes)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.Input = v
}
  return nil
}

func (p *WorkflowExecutionStartedEventAttributes)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.ExecutionStartToCloseTimeoutSeconds = &v
}
  return nil
}

func (p *WorkflowExecutionStartedEventAttributes)  ReadField50(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 50: ", err)
} else {
  p.TaskStartToCloseTimeoutSeconds = &v
}
  return nil
}

func (p *WorkflowExecutionStartedEventAttributes)  ReadField60(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 60: ", err)
} else {
  p.Identity = &v
}
  return nil
}

func (p *WorkflowExecutionStartedEventAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WorkflowExecutionStartedEventAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField50(oprot); err != nil { return err }
    if err := p.writeField60(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowExecutionStartedEventAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetWorkflowType() {
    if err := oprot.WriteFieldBegin("workflowType", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:workflowType: ", p), err) }
    if err := p.WorkflowType.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WorkflowType), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:workflowType: ", p), err) }
  }
  return err
}

func (p *WorkflowExecutionStartedEventAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskList() {
    if err := oprot.WriteFieldBegin("taskList", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:taskList: ", p), err) }
    if err := p.TaskList.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TaskList), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:taskList: ", p), err) }
  }
  return err
}

func (p *WorkflowExecutionStartedEventAttributes) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetInput() {
    if err := oprot.WriteFieldBegin("input", thrift.STRING, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:input: ", p), err) }
    if err := oprot.WriteBinary(p.Input); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.input (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:input: ", p), err) }
  }
  return err
}

func (p *WorkflowExecutionStartedEventAttributes) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetExecutionStartToCloseTimeoutSeconds() {
    if err := oprot.WriteFieldBegin("executionStartToCloseTimeoutSeconds", thrift.I32, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:executionStartToCloseTimeoutSeconds: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ExecutionStartToCloseTimeoutSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.executionStartToCloseTimeoutSeconds (40) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:executionStartToCloseTimeoutSeconds: ", p), err) }
  }
  return err
}

func (p *WorkflowExecutionStartedEventAttributes) writeField50(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskStartToCloseTimeoutSeconds() {
    if err := oprot.WriteFieldBegin("taskStartToCloseTimeoutSeconds", thrift.I32, 50); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:taskStartToCloseTimeoutSeconds: ", p), err) }
    if err := oprot.WriteI32(int32(*p.TaskStartToCloseTimeoutSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.taskStartToCloseTimeoutSeconds (50) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 50:taskStartToCloseTimeoutSeconds: ", p), err) }
  }
  return err
}

func (p *WorkflowExecutionStartedEventAttributes) writeField60(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentity() {
    if err := oprot.WriteFieldBegin("identity", thrift.STRING, 60); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:identity: ", p), err) }
    if err := oprot.WriteString(string(*p.Identity)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.identity (60) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 60:identity: ", p), err) }
  }
  return err
}

func (p *WorkflowExecutionStartedEventAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowExecutionStartedEventAttributes(%+v)", *p)
}

// Attributes:
//  - Result_
//  - DecisionTaskCompletedEventId
type WorkflowExecutionCompletedEventAttributes struct {
  // unused fields # 1 to 9
  Result_ []byte `thrift:"result,10" db:"result" json:"result,omitempty"`
  // unused fields # 11 to 19
  DecisionTaskCompletedEventId *int64 `thrift:"decisionTaskCompletedEventId,20" db:"decisionTaskCompletedEventId" json:"decisionTaskCompletedEventId,omitempty"`
}

func NewWorkflowExecutionCompletedEventAttributes() *WorkflowExecutionCompletedEventAttributes {
  return &WorkflowExecutionCompletedEventAttributes{}
}

var WorkflowExecutionCompletedEventAttributes_Result__DEFAULT []byte

func (p *WorkflowExecutionCompletedEventAttributes) GetResult_() []byte {
  return p.Result_
}
var WorkflowExecutionCompletedEventAttributes_DecisionTaskCompletedEventId_DEFAULT int64
func (p *WorkflowExecutionCompletedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
  if !p.IsSetDecisionTaskCompletedEventId() {
    return WorkflowExecutionCompletedEventAttributes_DecisionTaskCompletedEventId_DEFAULT
  }
return *p.DecisionTaskCompletedEventId
}
func (p *WorkflowExecutionCompletedEventAttributes) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *WorkflowExecutionCompletedEventAttributes) IsSetDecisionTaskCompletedEventId() bool {
  return p.DecisionTaskCompletedEventId != nil
}

func (p *WorkflowExecutionCompletedEventAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowExecutionCompletedEventAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Result_ = v
}
  return nil
}

func (p *WorkflowExecutionCompletedEventAttributes)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.DecisionTaskCompletedEventId = &v
}
  return nil
}

func (p *WorkflowExecutionCompletedEventAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WorkflowExecutionCompletedEventAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowExecutionCompletedEventAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetResult_() {
    if err := oprot.WriteFieldBegin("result", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:result: ", p), err) }
    if err := oprot.WriteBinary(p.Result_); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.result (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:result: ", p), err) }
  }
  return err
}

func (p *WorkflowExecutionCompletedEventAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetDecisionTaskCompletedEventId() {
    if err := oprot.WriteFieldBegin("decisionTaskCompletedEventId", thrift.I64, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:decisionTaskCompletedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.DecisionTaskCompletedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.decisionTaskCompletedEventId (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:decisionTaskCompletedEventId: ", p), err) }
  }
  return err
}

func (p *WorkflowExecutionCompletedEventAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowExecutionCompletedEventAttributes(%+v)", *p)
}

// Attributes:
//  - Reason
//  - Details
//  - DecisionTaskCompletedEventId
type WorkflowExecutionFailedEventAttributes struct {
  // unused fields # 1 to 9
  Reason *string `thrift:"reason,10" db:"reason" json:"reason,omitempty"`
  // unused fields # 11 to 19
  Details []byte `thrift:"details,20" db:"details" json:"details,omitempty"`
  // unused fields # 21 to 29
  DecisionTaskCompletedEventId *int64 `thrift:"decisionTaskCompletedEventId,30" db:"decisionTaskCompletedEventId" json:"decisionTaskCompletedEventId,omitempty"`
}

func NewWorkflowExecutionFailedEventAttributes() *WorkflowExecutionFailedEventAttributes {
  return &WorkflowExecutionFailedEventAttributes{}
}

var WorkflowExecutionFailedEventAttributes_Reason_DEFAULT string
func (p *WorkflowExecutionFailedEventAttributes) GetReason() string {
  if !p.IsSetReason() {
    return WorkflowExecutionFailedEventAttributes_Reason_DEFAULT
  }
return *p.Reason
}
var WorkflowExecutionFailedEventAttributes_Details_DEFAULT []byte

func (p *WorkflowExecutionFailedEventAttributes) GetDetails() []byte {
  return p.Details
}
var WorkflowExecutionFailedEventAttributes_DecisionTaskCompletedEventId_DEFAULT int64
func (p *WorkflowExecutionFailedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
  if !p.IsSetDecisionTaskCompletedEventId() {
    return WorkflowExecutionFailedEventAttributes_DecisionTaskCompletedEventId_DEFAULT
  }
return *p.DecisionTaskCompletedEventId
}
func (p *WorkflowExecutionFailedEventAttributes) IsSetReason() bool {
  return p.Reason != nil
}

func (p *WorkflowExecutionFailedEventAttributes) IsSetDetails() bool {
  return p.Details != nil
}

func (p *WorkflowExecutionFailedEventAttributes) IsSetDecisionTaskCompletedEventId() bool {
  return p.DecisionTaskCompletedEventId != nil
}

func (p *WorkflowExecutionFailedEventAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowExecutionFailedEventAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Reason = &v
}
  return nil
}

func (p *WorkflowExecutionFailedEventAttributes)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Details = v
}
  return nil
}

func (p *WorkflowExecutionFailedEventAttributes)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.DecisionTaskCompletedEventId = &v
}
  return nil
}

func (p *WorkflowExecutionFailedEventAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WorkflowExecutionFailedEventAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowExecutionFailedEventAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetReason() {
    if err := oprot.WriteFieldBegin("reason", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:reason: ", p), err) }
    if err := oprot.WriteString(string(*p.Reason)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reason (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:reason: ", p), err) }
  }
  return err
}

func (p *WorkflowExecutionFailedEventAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetDetails() {
    if err := oprot.WriteFieldBegin("details", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:details: ", p), err) }
    if err := oprot.WriteBinary(p.Details); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.details (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:details: ", p), err) }
  }
  return err
}

func (p *WorkflowExecutionFailedEventAttributes) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetDecisionTaskCompletedEventId() {
    if err := oprot.WriteFieldBegin("decisionTaskCompletedEventId", thrift.I64, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:decisionTaskCompletedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.DecisionTaskCompletedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.decisionTaskCompletedEventId (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:decisionTaskCompletedEventId: ", p), err) }
  }
  return err
}

func (p *WorkflowExecutionFailedEventAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowExecutionFailedEventAttributes(%+v)", *p)
}

// Attributes:
//  - TimeoutType
type WorkflowExecutionTimedOutEventAttributes struct {
  // unused fields # 1 to 9
  TimeoutType *TimeoutType `thrift:"timeoutType,10" db:"timeoutType" json:"timeoutType,omitempty"`
}

func NewWorkflowExecutionTimedOutEventAttributes() *WorkflowExecutionTimedOutEventAttributes {
  return &WorkflowExecutionTimedOutEventAttributes{}
}

var WorkflowExecutionTimedOutEventAttributes_TimeoutType_DEFAULT TimeoutType
func (p *WorkflowExecutionTimedOutEventAttributes) GetTimeoutType() TimeoutType {
  if !p.IsSetTimeoutType() {
    return WorkflowExecutionTimedOutEventAttributes_TimeoutType_DEFAULT
  }
return *p.TimeoutType
}
func (p *WorkflowExecutionTimedOutEventAttributes) IsSetTimeoutType() bool {
  return p.TimeoutType != nil
}

func (p *WorkflowExecutionTimedOutEventAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WorkflowExecutionTimedOutEventAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := TimeoutType(v)
  p.TimeoutType = &temp
}
  return nil
}

func (p *WorkflowExecutionTimedOutEventAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WorkflowExecutionTimedOutEventAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowExecutionTimedOutEventAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeoutType() {
    if err := oprot.WriteFieldBegin("timeoutType", thrift.I32, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:timeoutType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.TimeoutType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeoutType (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:timeoutType: ", p), err) }
  }
  return err
}

func (p *WorkflowExecutionTimedOutEventAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowExecutionTimedOutEventAttributes(%+v)", *p)
}

// Attributes:
//  - Cause
//  - DecisionTaskCompletedEventId
type CompleteWorkflowExecutionFailedEventAttributes struct {
  // unused fields # 1 to 9
  Cause *WorkflowCompleteFailedCause `thrift:"cause,10" db:"cause" json:"cause,omitempty"`
  // unused fields # 11 to 19
  DecisionTaskCompletedEventId *int64 `thrift:"decisionTaskCompletedEventId,20" db:"decisionTaskCompletedEventId" json:"decisionTaskCompletedEventId,omitempty"`
}

func NewCompleteWorkflowExecutionFailedEventAttributes() *CompleteWorkflowExecutionFailedEventAttributes {
  return &CompleteWorkflowExecutionFailedEventAttributes{}
}

var CompleteWorkflowExecutionFailedEventAttributes_Cause_DEFAULT WorkflowCompleteFailedCause
func (p *CompleteWorkflowExecutionFailedEventAttributes) GetCause() WorkflowCompleteFailedCause {
  if !p.IsSetCause() {
    return CompleteWorkflowExecutionFailedEventAttributes_Cause_DEFAULT
  }
return *p.Cause
}
var CompleteWorkflowExecutionFailedEventAttributes_DecisionTaskCompletedEventId_DEFAULT int64
func (p *CompleteWorkflowExecutionFailedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
  if !p.IsSetDecisionTaskCompletedEventId() {
    return CompleteWorkflowExecutionFailedEventAttributes_DecisionTaskCompletedEventId_DEFAULT
  }
return *p.DecisionTaskCompletedEventId
}
func (p *CompleteWorkflowExecutionFailedEventAttributes) IsSetCause() bool {
  return p.Cause != nil
}

func (p *CompleteWorkflowExecutionFailedEventAttributes) IsSetDecisionTaskCompletedEventId() bool {
  return p.DecisionTaskCompletedEventId != nil
}

func (p *CompleteWorkflowExecutionFailedEventAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompleteWorkflowExecutionFailedEventAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := WorkflowCompleteFailedCause(v)
  p.Cause = &temp
}
  return nil
}

func (p *CompleteWorkflowExecutionFailedEventAttributes)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.DecisionTaskCompletedEventId = &v
}
  return nil
}

func (p *CompleteWorkflowExecutionFailedEventAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CompleteWorkflowExecutionFailedEventAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompleteWorkflowExecutionFailedEventAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetCause() {
    if err := oprot.WriteFieldBegin("cause", thrift.I32, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:cause: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Cause)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cause (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:cause: ", p), err) }
  }
  return err
}

func (p *CompleteWorkflowExecutionFailedEventAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetDecisionTaskCompletedEventId() {
    if err := oprot.WriteFieldBegin("decisionTaskCompletedEventId", thrift.I64, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:decisionTaskCompletedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.DecisionTaskCompletedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.decisionTaskCompletedEventId (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:decisionTaskCompletedEventId: ", p), err) }
  }
  return err
}

func (p *CompleteWorkflowExecutionFailedEventAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompleteWorkflowExecutionFailedEventAttributes(%+v)", *p)
}

// Attributes:
//  - TaskList
//  - StartToCloseTimeoutSeconds
type DecisionTaskScheduledEventAttributes struct {
  // unused fields # 1 to 9
  TaskList *TaskList `thrift:"taskList,10" db:"taskList" json:"taskList,omitempty"`
  // unused fields # 11 to 19
  StartToCloseTimeoutSeconds *int32 `thrift:"startToCloseTimeoutSeconds,20" db:"startToCloseTimeoutSeconds" json:"startToCloseTimeoutSeconds,omitempty"`
}

func NewDecisionTaskScheduledEventAttributes() *DecisionTaskScheduledEventAttributes {
  return &DecisionTaskScheduledEventAttributes{}
}

var DecisionTaskScheduledEventAttributes_TaskList_DEFAULT *TaskList
func (p *DecisionTaskScheduledEventAttributes) GetTaskList() *TaskList {
  if !p.IsSetTaskList() {
    return DecisionTaskScheduledEventAttributes_TaskList_DEFAULT
  }
return p.TaskList
}
var DecisionTaskScheduledEventAttributes_StartToCloseTimeoutSeconds_DEFAULT int32
func (p *DecisionTaskScheduledEventAttributes) GetStartToCloseTimeoutSeconds() int32 {
  if !p.IsSetStartToCloseTimeoutSeconds() {
    return DecisionTaskScheduledEventAttributes_StartToCloseTimeoutSeconds_DEFAULT
  }
return *p.StartToCloseTimeoutSeconds
}
func (p *DecisionTaskScheduledEventAttributes) IsSetTaskList() bool {
  return p.TaskList != nil
}

func (p *DecisionTaskScheduledEventAttributes) IsSetStartToCloseTimeoutSeconds() bool {
  return p.StartToCloseTimeoutSeconds != nil
}

func (p *DecisionTaskScheduledEventAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DecisionTaskScheduledEventAttributes)  ReadField10(iprot thrift.TProtocol) error {
  p.TaskList = &TaskList{}
  if err := p.TaskList.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TaskList), err)
  }
  return nil
}

func (p *DecisionTaskScheduledEventAttributes)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.StartToCloseTimeoutSeconds = &v
}
  return nil
}

func (p *DecisionTaskScheduledEventAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DecisionTaskScheduledEventAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DecisionTaskScheduledEventAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskList() {
    if err := oprot.WriteFieldBegin("taskList", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:taskList: ", p), err) }
    if err := p.TaskList.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TaskList), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:taskList: ", p), err) }
  }
  return err
}

func (p *DecisionTaskScheduledEventAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartToCloseTimeoutSeconds() {
    if err := oprot.WriteFieldBegin("startToCloseTimeoutSeconds", thrift.I32, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:startToCloseTimeoutSeconds: ", p), err) }
    if err := oprot.WriteI32(int32(*p.StartToCloseTimeoutSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startToCloseTimeoutSeconds (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:startToCloseTimeoutSeconds: ", p), err) }
  }
  return err
}

func (p *DecisionTaskScheduledEventAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DecisionTaskScheduledEventAttributes(%+v)", *p)
}

// Attributes:
//  - ScheduledEventId
//  - Identity
//  - RequestId
type DecisionTaskStartedEventAttributes struct {
  // unused fields # 1 to 9
  ScheduledEventId *int64 `thrift:"scheduledEventId,10" db:"scheduledEventId" json:"scheduledEventId,omitempty"`
  // unused fields # 11 to 19
  Identity *string `thrift:"identity,20" db:"identity" json:"identity,omitempty"`
  // unused fields # 21 to 29
  RequestId *string `thrift:"requestId,30" db:"requestId" json:"requestId,omitempty"`
}

func NewDecisionTaskStartedEventAttributes() *DecisionTaskStartedEventAttributes {
  return &DecisionTaskStartedEventAttributes{}
}

var DecisionTaskStartedEventAttributes_ScheduledEventId_DEFAULT int64
func (p *DecisionTaskStartedEventAttributes) GetScheduledEventId() int64 {
  if !p.IsSetScheduledEventId() {
    return DecisionTaskStartedEventAttributes_ScheduledEventId_DEFAULT
  }
return *p.ScheduledEventId
}
var DecisionTaskStartedEventAttributes_Identity_DEFAULT string
func (p *DecisionTaskStartedEventAttributes) GetIdentity() string {
  if !p.IsSetIdentity() {
    return DecisionTaskStartedEventAttributes_Identity_DEFAULT
  }
return *p.Identity
}
var DecisionTaskStartedEventAttributes_RequestId_DEFAULT string
func (p *DecisionTaskStartedEventAttributes) GetRequestId() string {
  if !p.IsSetRequestId() {
    return DecisionTaskStartedEventAttributes_RequestId_DEFAULT
  }
return *p.RequestId
}
func (p *DecisionTaskStartedEventAttributes) IsSetScheduledEventId() bool {
  return p.ScheduledEventId != nil
}

func (p *DecisionTaskStartedEventAttributes) IsSetIdentity() bool {
  return p.Identity != nil
}

func (p *DecisionTaskStartedEventAttributes) IsSetRequestId() bool {
  return p.RequestId != nil
}

func (p *DecisionTaskStartedEventAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DecisionTaskStartedEventAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ScheduledEventId = &v
}
  return nil
}

func (p *DecisionTaskStartedEventAttributes)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Identity = &v
}
  return nil
}

func (p *DecisionTaskStartedEventAttributes)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.RequestId = &v
}
  return nil
}

func (p *DecisionTaskStartedEventAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DecisionTaskStartedEventAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DecisionTaskStartedEventAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetScheduledEventId() {
    if err := oprot.WriteFieldBegin("scheduledEventId", thrift.I64, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:scheduledEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ScheduledEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.scheduledEventId (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:scheduledEventId: ", p), err) }
  }
  return err
}

func (p *DecisionTaskStartedEventAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentity() {
    if err := oprot.WriteFieldBegin("identity", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:identity: ", p), err) }
    if err := oprot.WriteString(string(*p.Identity)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.identity (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:identity: ", p), err) }
  }
  return err
}

func (p *DecisionTaskStartedEventAttributes) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestId() {
    if err := oprot.WriteFieldBegin("requestId", thrift.STRING, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:requestId: ", p), err) }
    if err := oprot.WriteString(string(*p.RequestId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.requestId (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:requestId: ", p), err) }
  }
  return err
}

func (p *DecisionTaskStartedEventAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DecisionTaskStartedEventAttributes(%+v)", *p)
}

// Attributes:
//  - ExecutionContext
//  - ScheduledEventId
//  - StartedEventId
//  - Identity
type DecisionTaskCompletedEventAttributes struct {
  // unused fields # 1 to 9
  ExecutionContext []byte `thrift:"executionContext,10" db:"executionContext" json:"executionContext,omitempty"`
  // unused fields # 11 to 19
  ScheduledEventId *int64 `thrift:"scheduledEventId,20" db:"scheduledEventId" json:"scheduledEventId,omitempty"`
  // unused fields # 21 to 29
  StartedEventId *int64 `thrift:"startedEventId,30" db:"startedEventId" json:"startedEventId,omitempty"`
  // unused fields # 31 to 39
  Identity *string `thrift:"identity,40" db:"identity" json:"identity,omitempty"`
}

func NewDecisionTaskCompletedEventAttributes() *DecisionTaskCompletedEventAttributes {
  return &DecisionTaskCompletedEventAttributes{}
}

var DecisionTaskCompletedEventAttributes_ExecutionContext_DEFAULT []byte

func (p *DecisionTaskCompletedEventAttributes) GetExecutionContext() []byte {
  return p.ExecutionContext
}
var DecisionTaskCompletedEventAttributes_ScheduledEventId_DEFAULT int64
func (p *DecisionTaskCompletedEventAttributes) GetScheduledEventId() int64 {
  if !p.IsSetScheduledEventId() {
    return DecisionTaskCompletedEventAttributes_ScheduledEventId_DEFAULT
  }
return *p.ScheduledEventId
}
var DecisionTaskCompletedEventAttributes_StartedEventId_DEFAULT int64
func (p *DecisionTaskCompletedEventAttributes) GetStartedEventId() int64 {
  if !p.IsSetStartedEventId() {
    return DecisionTaskCompletedEventAttributes_StartedEventId_DEFAULT
  }
return *p.StartedEventId
}
var DecisionTaskCompletedEventAttributes_Identity_DEFAULT string
func (p *DecisionTaskCompletedEventAttributes) GetIdentity() string {
  if !p.IsSetIdentity() {
    return DecisionTaskCompletedEventAttributes_Identity_DEFAULT
  }
return *p.Identity
}
func (p *DecisionTaskCompletedEventAttributes) IsSetExecutionContext() bool {
  return p.ExecutionContext != nil
}

func (p *DecisionTaskCompletedEventAttributes) IsSetScheduledEventId() bool {
  return p.ScheduledEventId != nil
}

func (p *DecisionTaskCompletedEventAttributes) IsSetStartedEventId() bool {
  return p.StartedEventId != nil
}

func (p *DecisionTaskCompletedEventAttributes) IsSetIdentity() bool {
  return p.Identity != nil
}

func (p *DecisionTaskCompletedEventAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DecisionTaskCompletedEventAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ExecutionContext = v
}
  return nil
}

func (p *DecisionTaskCompletedEventAttributes)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.ScheduledEventId = &v
}
  return nil
}

func (p *DecisionTaskCompletedEventAttributes)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.StartedEventId = &v
}
  return nil
}

func (p *DecisionTaskCompletedEventAttributes)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.Identity = &v
}
  return nil
}

func (p *DecisionTaskCompletedEventAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DecisionTaskCompletedEventAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DecisionTaskCompletedEventAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetExecutionContext() {
    if err := oprot.WriteFieldBegin("executionContext", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:executionContext: ", p), err) }
    if err := oprot.WriteBinary(p.ExecutionContext); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.executionContext (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:executionContext: ", p), err) }
  }
  return err
}

func (p *DecisionTaskCompletedEventAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetScheduledEventId() {
    if err := oprot.WriteFieldBegin("scheduledEventId", thrift.I64, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:scheduledEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ScheduledEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.scheduledEventId (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:scheduledEventId: ", p), err) }
  }
  return err
}

func (p *DecisionTaskCompletedEventAttributes) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartedEventId() {
    if err := oprot.WriteFieldBegin("startedEventId", thrift.I64, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:startedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.StartedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startedEventId (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:startedEventId: ", p), err) }
  }
  return err
}

func (p *DecisionTaskCompletedEventAttributes) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentity() {
    if err := oprot.WriteFieldBegin("identity", thrift.STRING, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:identity: ", p), err) }
    if err := oprot.WriteString(string(*p.Identity)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.identity (40) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:identity: ", p), err) }
  }
  return err
}

func (p *DecisionTaskCompletedEventAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DecisionTaskCompletedEventAttributes(%+v)", *p)
}

// Attributes:
//  - ScheduledEventId
//  - StartedEventId
//  - TimeoutType
type DecisionTaskTimedOutEventAttributes struct {
  // unused fields # 1 to 9
  ScheduledEventId *int64 `thrift:"scheduledEventId,10" db:"scheduledEventId" json:"scheduledEventId,omitempty"`
  // unused fields # 11 to 19
  StartedEventId *int64 `thrift:"startedEventId,20" db:"startedEventId" json:"startedEventId,omitempty"`
  // unused fields # 21 to 29
  TimeoutType *TimeoutType `thrift:"timeoutType,30" db:"timeoutType" json:"timeoutType,omitempty"`
}

func NewDecisionTaskTimedOutEventAttributes() *DecisionTaskTimedOutEventAttributes {
  return &DecisionTaskTimedOutEventAttributes{}
}

var DecisionTaskTimedOutEventAttributes_ScheduledEventId_DEFAULT int64
func (p *DecisionTaskTimedOutEventAttributes) GetScheduledEventId() int64 {
  if !p.IsSetScheduledEventId() {
    return DecisionTaskTimedOutEventAttributes_ScheduledEventId_DEFAULT
  }
return *p.ScheduledEventId
}
var DecisionTaskTimedOutEventAttributes_StartedEventId_DEFAULT int64
func (p *DecisionTaskTimedOutEventAttributes) GetStartedEventId() int64 {
  if !p.IsSetStartedEventId() {
    return DecisionTaskTimedOutEventAttributes_StartedEventId_DEFAULT
  }
return *p.StartedEventId
}
var DecisionTaskTimedOutEventAttributes_TimeoutType_DEFAULT TimeoutType
func (p *DecisionTaskTimedOutEventAttributes) GetTimeoutType() TimeoutType {
  if !p.IsSetTimeoutType() {
    return DecisionTaskTimedOutEventAttributes_TimeoutType_DEFAULT
  }
return *p.TimeoutType
}
func (p *DecisionTaskTimedOutEventAttributes) IsSetScheduledEventId() bool {
  return p.ScheduledEventId != nil
}

func (p *DecisionTaskTimedOutEventAttributes) IsSetStartedEventId() bool {
  return p.StartedEventId != nil
}

func (p *DecisionTaskTimedOutEventAttributes) IsSetTimeoutType() bool {
  return p.TimeoutType != nil
}

func (p *DecisionTaskTimedOutEventAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DecisionTaskTimedOutEventAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ScheduledEventId = &v
}
  return nil
}

func (p *DecisionTaskTimedOutEventAttributes)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.StartedEventId = &v
}
  return nil
}

func (p *DecisionTaskTimedOutEventAttributes)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  temp := TimeoutType(v)
  p.TimeoutType = &temp
}
  return nil
}

func (p *DecisionTaskTimedOutEventAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DecisionTaskTimedOutEventAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DecisionTaskTimedOutEventAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetScheduledEventId() {
    if err := oprot.WriteFieldBegin("scheduledEventId", thrift.I64, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:scheduledEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ScheduledEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.scheduledEventId (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:scheduledEventId: ", p), err) }
  }
  return err
}

func (p *DecisionTaskTimedOutEventAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartedEventId() {
    if err := oprot.WriteFieldBegin("startedEventId", thrift.I64, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:startedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.StartedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startedEventId (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:startedEventId: ", p), err) }
  }
  return err
}

func (p *DecisionTaskTimedOutEventAttributes) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeoutType() {
    if err := oprot.WriteFieldBegin("timeoutType", thrift.I32, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:timeoutType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.TimeoutType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeoutType (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:timeoutType: ", p), err) }
  }
  return err
}

func (p *DecisionTaskTimedOutEventAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DecisionTaskTimedOutEventAttributes(%+v)", *p)
}

// Attributes:
//  - ActivityId
//  - ActivityType
//  - TaskList
//  - Input
//  - ScheduleToCloseTimeoutSeconds
//  - ScheduleToStartTimeoutSeconds
//  - StartToCloseTimeoutSeconds
//  - HeartbeatTimeoutSeconds
//  - DecisionTaskCompletedEventId
type ActivityTaskScheduledEventAttributes struct {
  // unused fields # 1 to 9
  ActivityId *string `thrift:"activityId,10" db:"activityId" json:"activityId,omitempty"`
  // unused fields # 11 to 19
  ActivityType *ActivityType `thrift:"activityType,20" db:"activityType" json:"activityType,omitempty"`
  // unused fields # 21 to 29
  TaskList *TaskList `thrift:"taskList,30" db:"taskList" json:"taskList,omitempty"`
  // unused fields # 31 to 39
  Input []byte `thrift:"input,40" db:"input" json:"input,omitempty"`
  // unused fields # 41 to 44
  ScheduleToCloseTimeoutSeconds *int32 `thrift:"scheduleToCloseTimeoutSeconds,45" db:"scheduleToCloseTimeoutSeconds" json:"scheduleToCloseTimeoutSeconds,omitempty"`
  // unused fields # 46 to 49
  ScheduleToStartTimeoutSeconds *int32 `thrift:"scheduleToStartTimeoutSeconds,50" db:"scheduleToStartTimeoutSeconds" json:"scheduleToStartTimeoutSeconds,omitempty"`
  // unused fields # 51 to 54
  StartToCloseTimeoutSeconds *int32 `thrift:"startToCloseTimeoutSeconds,55" db:"startToCloseTimeoutSeconds" json:"startToCloseTimeoutSeconds,omitempty"`
  // unused fields # 56 to 59
  HeartbeatTimeoutSeconds *int32 `thrift:"heartbeatTimeoutSeconds,60" db:"heartbeatTimeoutSeconds" json:"heartbeatTimeoutSeconds,omitempty"`
  // unused fields # 61 to 89
  DecisionTaskCompletedEventId *int64 `thrift:"decisionTaskCompletedEventId,90" db:"decisionTaskCompletedEventId" json:"decisionTaskCompletedEventId,omitempty"`
}

func NewActivityTaskScheduledEventAttributes() *ActivityTaskScheduledEventAttributes {
  return &ActivityTaskScheduledEventAttributes{}
}

var ActivityTaskScheduledEventAttributes_ActivityId_DEFAULT string
func (p *ActivityTaskScheduledEventAttributes) GetActivityId() string {
  if !p.IsSetActivityId() {
    return ActivityTaskScheduledEventAttributes_ActivityId_DEFAULT
  }
return *p.ActivityId
}
var ActivityTaskScheduledEventAttributes_ActivityType_DEFAULT *ActivityType
func (p *ActivityTaskScheduledEventAttributes) GetActivityType() *ActivityType {
  if !p.IsSetActivityType() {
    return ActivityTaskScheduledEventAttributes_ActivityType_DEFAULT
  }
return p.ActivityType
}
var ActivityTaskScheduledEventAttributes_TaskList_DEFAULT *TaskList
func (p *ActivityTaskScheduledEventAttributes) GetTaskList() *TaskList {
  if !p.IsSetTaskList() {
    return ActivityTaskScheduledEventAttributes_TaskList_DEFAULT
  }
return p.TaskList
}
var ActivityTaskScheduledEventAttributes_Input_DEFAULT []byte

func (p *ActivityTaskScheduledEventAttributes) GetInput() []byte {
  return p.Input
}
var ActivityTaskScheduledEventAttributes_ScheduleToCloseTimeoutSeconds_DEFAULT int32
func (p *ActivityTaskScheduledEventAttributes) GetScheduleToCloseTimeoutSeconds() int32 {
  if !p.IsSetScheduleToCloseTimeoutSeconds() {
    return ActivityTaskScheduledEventAttributes_ScheduleToCloseTimeoutSeconds_DEFAULT
  }
return *p.ScheduleToCloseTimeoutSeconds
}
var ActivityTaskScheduledEventAttributes_ScheduleToStartTimeoutSeconds_DEFAULT int32
func (p *ActivityTaskScheduledEventAttributes) GetScheduleToStartTimeoutSeconds() int32 {
  if !p.IsSetScheduleToStartTimeoutSeconds() {
    return ActivityTaskScheduledEventAttributes_ScheduleToStartTimeoutSeconds_DEFAULT
  }
return *p.ScheduleToStartTimeoutSeconds
}
var ActivityTaskScheduledEventAttributes_StartToCloseTimeoutSeconds_DEFAULT int32
func (p *ActivityTaskScheduledEventAttributes) GetStartToCloseTimeoutSeconds() int32 {
  if !p.IsSetStartToCloseTimeoutSeconds() {
    return ActivityTaskScheduledEventAttributes_StartToCloseTimeoutSeconds_DEFAULT
  }
return *p.StartToCloseTimeoutSeconds
}
var ActivityTaskScheduledEventAttributes_HeartbeatTimeoutSeconds_DEFAULT int32
func (p *ActivityTaskScheduledEventAttributes) GetHeartbeatTimeoutSeconds() int32 {
  if !p.IsSetHeartbeatTimeoutSeconds() {
    return ActivityTaskScheduledEventAttributes_HeartbeatTimeoutSeconds_DEFAULT
  }
return *p.HeartbeatTimeoutSeconds
}
var ActivityTaskScheduledEventAttributes_DecisionTaskCompletedEventId_DEFAULT int64
func (p *ActivityTaskScheduledEventAttributes) GetDecisionTaskCompletedEventId() int64 {
  if !p.IsSetDecisionTaskCompletedEventId() {
    return ActivityTaskScheduledEventAttributes_DecisionTaskCompletedEventId_DEFAULT
  }
return *p.DecisionTaskCompletedEventId
}
func (p *ActivityTaskScheduledEventAttributes) IsSetActivityId() bool {
  return p.ActivityId != nil
}

func (p *ActivityTaskScheduledEventAttributes) IsSetActivityType() bool {
  return p.ActivityType != nil
}

func (p *ActivityTaskScheduledEventAttributes) IsSetTaskList() bool {
  return p.TaskList != nil
}

func (p *ActivityTaskScheduledEventAttributes) IsSetInput() bool {
  return p.Input != nil
}

func (p *ActivityTaskScheduledEventAttributes) IsSetScheduleToCloseTimeoutSeconds() bool {
  return p.ScheduleToCloseTimeoutSeconds != nil
}

func (p *ActivityTaskScheduledEventAttributes) IsSetScheduleToStartTimeoutSeconds() bool {
  return p.ScheduleToStartTimeoutSeconds != nil
}

func (p *ActivityTaskScheduledEventAttributes) IsSetStartToCloseTimeoutSeconds() bool {
  return p.StartToCloseTimeoutSeconds != nil
}

func (p *ActivityTaskScheduledEventAttributes) IsSetHeartbeatTimeoutSeconds() bool {
  return p.HeartbeatTimeoutSeconds != nil
}

func (p *ActivityTaskScheduledEventAttributes) IsSetDecisionTaskCompletedEventId() bool {
  return p.DecisionTaskCompletedEventId != nil
}

func (p *ActivityTaskScheduledEventAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    case 45:
      if err := p.ReadField45(iprot); err != nil {
        return err
      }
    case 50:
      if err := p.ReadField50(iprot); err != nil {
        return err
      }
    case 55:
      if err := p.ReadField55(iprot); err != nil {
        return err
      }
    case 60:
      if err := p.ReadField60(iprot); err != nil {
        return err
      }
    case 90:
      if err := p.ReadField90(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ActivityTaskScheduledEventAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ActivityId = &v
}
  return nil
}

func (p *ActivityTaskScheduledEventAttributes)  ReadField20(iprot thrift.TProtocol) error {
  p.ActivityType = &ActivityType{}
  if err := p.ActivityType.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ActivityType), err)
  }
  return nil
}

func (p *ActivityTaskScheduledEventAttributes)  ReadField30(iprot thrift.TProtocol) error {
  p.TaskList = &TaskList{}
  if err := p.TaskList.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TaskList), err)
  }
  return nil
}

func (p *ActivityTaskScheduledEventAttributes)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.Input = v
}
  return nil
}

func (p *ActivityTaskScheduledEventAttributes)  ReadField45(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 45: ", err)
} else {
  p.ScheduleToCloseTimeoutSeconds = &v
}
  return nil
}

func (p *ActivityTaskScheduledEventAttributes)  ReadField50(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 50: ", err)
} else {
  p.ScheduleToStartTimeoutSeconds = &v
}
  return nil
}

func (p *ActivityTaskScheduledEventAttributes)  ReadField55(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 55: ", err)
} else {
  p.StartToCloseTimeoutSeconds = &v
}
  return nil
}

func (p *ActivityTaskScheduledEventAttributes)  ReadField60(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 60: ", err)
} else {
  p.HeartbeatTimeoutSeconds = &v
}
  return nil
}

func (p *ActivityTaskScheduledEventAttributes)  ReadField90(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 90: ", err)
} else {
  p.DecisionTaskCompletedEventId = &v
}
  return nil
}

func (p *ActivityTaskScheduledEventAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ActivityTaskScheduledEventAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField45(oprot); err != nil { return err }
    if err := p.writeField50(oprot); err != nil { return err }
    if err := p.writeField55(oprot); err != nil { return err }
    if err := p.writeField60(oprot); err != nil { return err }
    if err := p.writeField90(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ActivityTaskScheduledEventAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetActivityId() {
    if err := oprot.WriteFieldBegin("activityId", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:activityId: ", p), err) }
    if err := oprot.WriteString(string(*p.ActivityId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.activityId (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:activityId: ", p), err) }
  }
  return err
}

func (p *ActivityTaskScheduledEventAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetActivityType() {
    if err := oprot.WriteFieldBegin("activityType", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:activityType: ", p), err) }
    if err := p.ActivityType.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ActivityType), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:activityType: ", p), err) }
  }
  return err
}

func (p *ActivityTaskScheduledEventAttributes) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskList() {
    if err := oprot.WriteFieldBegin("taskList", thrift.STRUCT, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:taskList: ", p), err) }
    if err := p.TaskList.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TaskList), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:taskList: ", p), err) }
  }
  return err
}

func (p *ActivityTaskScheduledEventAttributes) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetInput() {
    if err := oprot.WriteFieldBegin("input", thrift.STRING, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:input: ", p), err) }
    if err := oprot.WriteBinary(p.Input); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.input (40) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:input: ", p), err) }
  }
  return err
}

func (p *ActivityTaskScheduledEventAttributes) writeField45(oprot thrift.TProtocol) (err error) {
  if p.IsSetScheduleToCloseTimeoutSeconds() {
    if err := oprot.WriteFieldBegin("scheduleToCloseTimeoutSeconds", thrift.I32, 45); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 45:scheduleToCloseTimeoutSeconds: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ScheduleToCloseTimeoutSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.scheduleToCloseTimeoutSeconds (45) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 45:scheduleToCloseTimeoutSeconds: ", p), err) }
  }
  return err
}

func (p *ActivityTaskScheduledEventAttributes) writeField50(oprot thrift.TProtocol) (err error) {
  if p.IsSetScheduleToStartTimeoutSeconds() {
    if err := oprot.WriteFieldBegin("scheduleToStartTimeoutSeconds", thrift.I32, 50); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:scheduleToStartTimeoutSeconds: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ScheduleToStartTimeoutSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.scheduleToStartTimeoutSeconds (50) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 50:scheduleToStartTimeoutSeconds: ", p), err) }
  }
  return err
}

func (p *ActivityTaskScheduledEventAttributes) writeField55(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartToCloseTimeoutSeconds() {
    if err := oprot.WriteFieldBegin("startToCloseTimeoutSeconds", thrift.I32, 55); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 55:startToCloseTimeoutSeconds: ", p), err) }
    if err := oprot.WriteI32(int32(*p.StartToCloseTimeoutSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startToCloseTimeoutSeconds (55) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 55:startToCloseTimeoutSeconds: ", p), err) }
  }
  return err
}

func (p *ActivityTaskScheduledEventAttributes) writeField60(oprot thrift.TProtocol) (err error) {
  if p.IsSetHeartbeatTimeoutSeconds() {
    if err := oprot.WriteFieldBegin("heartbeatTimeoutSeconds", thrift.I32, 60); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:heartbeatTimeoutSeconds: ", p), err) }
    if err := oprot.WriteI32(int32(*p.HeartbeatTimeoutSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.heartbeatTimeoutSeconds (60) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 60:heartbeatTimeoutSeconds: ", p), err) }
  }
  return err
}

func (p *ActivityTaskScheduledEventAttributes) writeField90(oprot thrift.TProtocol) (err error) {
  if p.IsSetDecisionTaskCompletedEventId() {
    if err := oprot.WriteFieldBegin("decisionTaskCompletedEventId", thrift.I64, 90); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 90:decisionTaskCompletedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.DecisionTaskCompletedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.decisionTaskCompletedEventId (90) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 90:decisionTaskCompletedEventId: ", p), err) }
  }
  return err
}

func (p *ActivityTaskScheduledEventAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ActivityTaskScheduledEventAttributes(%+v)", *p)
}

// Attributes:
//  - ScheduledEventId
//  - Identity
//  - RequestId
type ActivityTaskStartedEventAttributes struct {
  // unused fields # 1 to 9
  ScheduledEventId *int64 `thrift:"scheduledEventId,10" db:"scheduledEventId" json:"scheduledEventId,omitempty"`
  // unused fields # 11 to 19
  Identity *string `thrift:"identity,20" db:"identity" json:"identity,omitempty"`
  // unused fields # 21 to 29
  RequestId *string `thrift:"requestId,30" db:"requestId" json:"requestId,omitempty"`
}

func NewActivityTaskStartedEventAttributes() *ActivityTaskStartedEventAttributes {
  return &ActivityTaskStartedEventAttributes{}
}

var ActivityTaskStartedEventAttributes_ScheduledEventId_DEFAULT int64
func (p *ActivityTaskStartedEventAttributes) GetScheduledEventId() int64 {
  if !p.IsSetScheduledEventId() {
    return ActivityTaskStartedEventAttributes_ScheduledEventId_DEFAULT
  }
return *p.ScheduledEventId
}
var ActivityTaskStartedEventAttributes_Identity_DEFAULT string
func (p *ActivityTaskStartedEventAttributes) GetIdentity() string {
  if !p.IsSetIdentity() {
    return ActivityTaskStartedEventAttributes_Identity_DEFAULT
  }
return *p.Identity
}
var ActivityTaskStartedEventAttributes_RequestId_DEFAULT string
func (p *ActivityTaskStartedEventAttributes) GetRequestId() string {
  if !p.IsSetRequestId() {
    return ActivityTaskStartedEventAttributes_RequestId_DEFAULT
  }
return *p.RequestId
}
func (p *ActivityTaskStartedEventAttributes) IsSetScheduledEventId() bool {
  return p.ScheduledEventId != nil
}

func (p *ActivityTaskStartedEventAttributes) IsSetIdentity() bool {
  return p.Identity != nil
}

func (p *ActivityTaskStartedEventAttributes) IsSetRequestId() bool {
  return p.RequestId != nil
}

func (p *ActivityTaskStartedEventAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ActivityTaskStartedEventAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ScheduledEventId = &v
}
  return nil
}

func (p *ActivityTaskStartedEventAttributes)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Identity = &v
}
  return nil
}

func (p *ActivityTaskStartedEventAttributes)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.RequestId = &v
}
  return nil
}

func (p *ActivityTaskStartedEventAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ActivityTaskStartedEventAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ActivityTaskStartedEventAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetScheduledEventId() {
    if err := oprot.WriteFieldBegin("scheduledEventId", thrift.I64, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:scheduledEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ScheduledEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.scheduledEventId (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:scheduledEventId: ", p), err) }
  }
  return err
}

func (p *ActivityTaskStartedEventAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentity() {
    if err := oprot.WriteFieldBegin("identity", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:identity: ", p), err) }
    if err := oprot.WriteString(string(*p.Identity)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.identity (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:identity: ", p), err) }
  }
  return err
}

func (p *ActivityTaskStartedEventAttributes) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestId() {
    if err := oprot.WriteFieldBegin("requestId", thrift.STRING, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:requestId: ", p), err) }
    if err := oprot.WriteString(string(*p.RequestId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.requestId (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:requestId: ", p), err) }
  }
  return err
}

func (p *ActivityTaskStartedEventAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ActivityTaskStartedEventAttributes(%+v)", *p)
}

// Attributes:
//  - Result_
//  - ScheduledEventId
//  - StartedEventId
//  - Identity
type ActivityTaskCompletedEventAttributes struct {
  // unused fields # 1 to 9
  Result_ []byte `thrift:"result,10" db:"result" json:"result,omitempty"`
  // unused fields # 11 to 19
  ScheduledEventId *int64 `thrift:"scheduledEventId,20" db:"scheduledEventId" json:"scheduledEventId,omitempty"`
  // unused fields # 21 to 29
  StartedEventId *int64 `thrift:"startedEventId,30" db:"startedEventId" json:"startedEventId,omitempty"`
  // unused fields # 31 to 39
  Identity *string `thrift:"identity,40" db:"identity" json:"identity,omitempty"`
}

func NewActivityTaskCompletedEventAttributes() *ActivityTaskCompletedEventAttributes {
  return &ActivityTaskCompletedEventAttributes{}
}

var ActivityTaskCompletedEventAttributes_Result__DEFAULT []byte

func (p *ActivityTaskCompletedEventAttributes) GetResult_() []byte {
  return p.Result_
}
var ActivityTaskCompletedEventAttributes_ScheduledEventId_DEFAULT int64
func (p *ActivityTaskCompletedEventAttributes) GetScheduledEventId() int64 {
  if !p.IsSetScheduledEventId() {
    return ActivityTaskCompletedEventAttributes_ScheduledEventId_DEFAULT
  }
return *p.ScheduledEventId
}
var ActivityTaskCompletedEventAttributes_StartedEventId_DEFAULT int64
func (p *ActivityTaskCompletedEventAttributes) GetStartedEventId() int64 {
  if !p.IsSetStartedEventId() {
    return ActivityTaskCompletedEventAttributes_StartedEventId_DEFAULT
  }
return *p.StartedEventId
}
var ActivityTaskCompletedEventAttributes_Identity_DEFAULT string
func (p *ActivityTaskCompletedEventAttributes) GetIdentity() string {
  if !p.IsSetIdentity() {
    return ActivityTaskCompletedEventAttributes_Identity_DEFAULT
  }
return *p.Identity
}
func (p *ActivityTaskCompletedEventAttributes) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *ActivityTaskCompletedEventAttributes) IsSetScheduledEventId() bool {
  return p.ScheduledEventId != nil
}

func (p *ActivityTaskCompletedEventAttributes) IsSetStartedEventId() bool {
  return p.StartedEventId != nil
}

func (p *ActivityTaskCompletedEventAttributes) IsSetIdentity() bool {
  return p.Identity != nil
}

func (p *ActivityTaskCompletedEventAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ActivityTaskCompletedEventAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Result_ = v
}
  return nil
}

func (p *ActivityTaskCompletedEventAttributes)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.ScheduledEventId = &v
}
  return nil
}

func (p *ActivityTaskCompletedEventAttributes)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.StartedEventId = &v
}
  return nil
}

func (p *ActivityTaskCompletedEventAttributes)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.Identity = &v
}
  return nil
}

func (p *ActivityTaskCompletedEventAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ActivityTaskCompletedEventAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ActivityTaskCompletedEventAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetResult_() {
    if err := oprot.WriteFieldBegin("result", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:result: ", p), err) }
    if err := oprot.WriteBinary(p.Result_); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.result (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:result: ", p), err) }
  }
  return err
}

func (p *ActivityTaskCompletedEventAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetScheduledEventId() {
    if err := oprot.WriteFieldBegin("scheduledEventId", thrift.I64, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:scheduledEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ScheduledEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.scheduledEventId (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:scheduledEventId: ", p), err) }
  }
  return err
}

func (p *ActivityTaskCompletedEventAttributes) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartedEventId() {
    if err := oprot.WriteFieldBegin("startedEventId", thrift.I64, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:startedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.StartedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startedEventId (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:startedEventId: ", p), err) }
  }
  return err
}

func (p *ActivityTaskCompletedEventAttributes) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentity() {
    if err := oprot.WriteFieldBegin("identity", thrift.STRING, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:identity: ", p), err) }
    if err := oprot.WriteString(string(*p.Identity)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.identity (40) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:identity: ", p), err) }
  }
  return err
}

func (p *ActivityTaskCompletedEventAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ActivityTaskCompletedEventAttributes(%+v)", *p)
}

// Attributes:
//  - Reason
//  - Details
//  - ScheduledEventId
//  - StartedEventId
//  - Identity
type ActivityTaskFailedEventAttributes struct {
  // unused fields # 1 to 9
  Reason *string `thrift:"reason,10" db:"reason" json:"reason,omitempty"`
  // unused fields # 11 to 19
  Details []byte `thrift:"details,20" db:"details" json:"details,omitempty"`
  // unused fields # 21 to 29
  ScheduledEventId *int64 `thrift:"scheduledEventId,30" db:"scheduledEventId" json:"scheduledEventId,omitempty"`
  // unused fields # 31 to 39
  StartedEventId *int64 `thrift:"startedEventId,40" db:"startedEventId" json:"startedEventId,omitempty"`
  // unused fields # 41 to 49
  Identity *string `thrift:"identity,50" db:"identity" json:"identity,omitempty"`
}

func NewActivityTaskFailedEventAttributes() *ActivityTaskFailedEventAttributes {
  return &ActivityTaskFailedEventAttributes{}
}

var ActivityTaskFailedEventAttributes_Reason_DEFAULT string
func (p *ActivityTaskFailedEventAttributes) GetReason() string {
  if !p.IsSetReason() {
    return ActivityTaskFailedEventAttributes_Reason_DEFAULT
  }
return *p.Reason
}
var ActivityTaskFailedEventAttributes_Details_DEFAULT []byte

func (p *ActivityTaskFailedEventAttributes) GetDetails() []byte {
  return p.Details
}
var ActivityTaskFailedEventAttributes_ScheduledEventId_DEFAULT int64
func (p *ActivityTaskFailedEventAttributes) GetScheduledEventId() int64 {
  if !p.IsSetScheduledEventId() {
    return ActivityTaskFailedEventAttributes_ScheduledEventId_DEFAULT
  }
return *p.ScheduledEventId
}
var ActivityTaskFailedEventAttributes_StartedEventId_DEFAULT int64
func (p *ActivityTaskFailedEventAttributes) GetStartedEventId() int64 {
  if !p.IsSetStartedEventId() {
    return ActivityTaskFailedEventAttributes_StartedEventId_DEFAULT
  }
return *p.StartedEventId
}
var ActivityTaskFailedEventAttributes_Identity_DEFAULT string
func (p *ActivityTaskFailedEventAttributes) GetIdentity() string {
  if !p.IsSetIdentity() {
    return ActivityTaskFailedEventAttributes_Identity_DEFAULT
  }
return *p.Identity
}
func (p *ActivityTaskFailedEventAttributes) IsSetReason() bool {
  return p.Reason != nil
}

func (p *ActivityTaskFailedEventAttributes) IsSetDetails() bool {
  return p.Details != nil
}

func (p *ActivityTaskFailedEventAttributes) IsSetScheduledEventId() bool {
  return p.ScheduledEventId != nil
}

func (p *ActivityTaskFailedEventAttributes) IsSetStartedEventId() bool {
  return p.StartedEventId != nil
}

func (p *ActivityTaskFailedEventAttributes) IsSetIdentity() bool {
  return p.Identity != nil
}

func (p *ActivityTaskFailedEventAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    case 50:
      if err := p.ReadField50(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ActivityTaskFailedEventAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Reason = &v
}
  return nil
}

func (p *ActivityTaskFailedEventAttributes)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Details = v
}
  return nil
}

func (p *ActivityTaskFailedEventAttributes)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.ScheduledEventId = &v
}
  return nil
}

func (p *ActivityTaskFailedEventAttributes)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.StartedEventId = &v
}
  return nil
}

func (p *ActivityTaskFailedEventAttributes)  ReadField50(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 50: ", err)
} else {
  p.Identity = &v
}
  return nil
}

func (p *ActivityTaskFailedEventAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ActivityTaskFailedEventAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField50(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ActivityTaskFailedEventAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetReason() {
    if err := oprot.WriteFieldBegin("reason", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:reason: ", p), err) }
    if err := oprot.WriteString(string(*p.Reason)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reason (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:reason: ", p), err) }
  }
  return err
}

func (p *ActivityTaskFailedEventAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetDetails() {
    if err := oprot.WriteFieldBegin("details", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:details: ", p), err) }
    if err := oprot.WriteBinary(p.Details); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.details (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:details: ", p), err) }
  }
  return err
}

func (p *ActivityTaskFailedEventAttributes) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetScheduledEventId() {
    if err := oprot.WriteFieldBegin("scheduledEventId", thrift.I64, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:scheduledEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ScheduledEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.scheduledEventId (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:scheduledEventId: ", p), err) }
  }
  return err
}

func (p *ActivityTaskFailedEventAttributes) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartedEventId() {
    if err := oprot.WriteFieldBegin("startedEventId", thrift.I64, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:startedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.StartedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startedEventId (40) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:startedEventId: ", p), err) }
  }
  return err
}

func (p *ActivityTaskFailedEventAttributes) writeField50(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentity() {
    if err := oprot.WriteFieldBegin("identity", thrift.STRING, 50); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:identity: ", p), err) }
    if err := oprot.WriteString(string(*p.Identity)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.identity (50) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 50:identity: ", p), err) }
  }
  return err
}

func (p *ActivityTaskFailedEventAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ActivityTaskFailedEventAttributes(%+v)", *p)
}

// Attributes:
//  - Details
//  - ScheduledEventId
//  - StartedEventId
//  - TimeoutType
type ActivityTaskTimedOutEventAttributes struct {
  // unused fields # 1 to 4
  Details []byte `thrift:"details,5" db:"details" json:"details,omitempty"`
  // unused fields # 6 to 9
  ScheduledEventId *int64 `thrift:"scheduledEventId,10" db:"scheduledEventId" json:"scheduledEventId,omitempty"`
  // unused fields # 11 to 19
  StartedEventId *int64 `thrift:"startedEventId,20" db:"startedEventId" json:"startedEventId,omitempty"`
  // unused fields # 21 to 29
  TimeoutType *TimeoutType `thrift:"timeoutType,30" db:"timeoutType" json:"timeoutType,omitempty"`
}

func NewActivityTaskTimedOutEventAttributes() *ActivityTaskTimedOutEventAttributes {
  return &ActivityTaskTimedOutEventAttributes{}
}

var ActivityTaskTimedOutEventAttributes_Details_DEFAULT []byte

func (p *ActivityTaskTimedOutEventAttributes) GetDetails() []byte {
  return p.Details
}
var ActivityTaskTimedOutEventAttributes_ScheduledEventId_DEFAULT int64
func (p *ActivityTaskTimedOutEventAttributes) GetScheduledEventId() int64 {
  if !p.IsSetScheduledEventId() {
    return ActivityTaskTimedOutEventAttributes_ScheduledEventId_DEFAULT
  }
return *p.ScheduledEventId
}
var ActivityTaskTimedOutEventAttributes_StartedEventId_DEFAULT int64
func (p *ActivityTaskTimedOutEventAttributes) GetStartedEventId() int64 {
  if !p.IsSetStartedEventId() {
    return ActivityTaskTimedOutEventAttributes_StartedEventId_DEFAULT
  }
return *p.StartedEventId
}
var ActivityTaskTimedOutEventAttributes_TimeoutType_DEFAULT TimeoutType
func (p *ActivityTaskTimedOutEventAttributes) GetTimeoutType() TimeoutType {
  if !p.IsSetTimeoutType() {
    return ActivityTaskTimedOutEventAttributes_TimeoutType_DEFAULT
  }
return *p.TimeoutType
}
func (p *ActivityTaskTimedOutEventAttributes) IsSetDetails() bool {
  return p.Details != nil
}

func (p *ActivityTaskTimedOutEventAttributes) IsSetScheduledEventId() bool {
  return p.ScheduledEventId != nil
}

func (p *ActivityTaskTimedOutEventAttributes) IsSetStartedEventId() bool {
  return p.StartedEventId != nil
}

func (p *ActivityTaskTimedOutEventAttributes) IsSetTimeoutType() bool {
  return p.TimeoutType != nil
}

func (p *ActivityTaskTimedOutEventAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ActivityTaskTimedOutEventAttributes)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Details = v
}
  return nil
}

func (p *ActivityTaskTimedOutEventAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ScheduledEventId = &v
}
  return nil
}

func (p *ActivityTaskTimedOutEventAttributes)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.StartedEventId = &v
}
  return nil
}

func (p *ActivityTaskTimedOutEventAttributes)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  temp := TimeoutType(v)
  p.TimeoutType = &temp
}
  return nil
}

func (p *ActivityTaskTimedOutEventAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ActivityTaskTimedOutEventAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ActivityTaskTimedOutEventAttributes) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetDetails() {
    if err := oprot.WriteFieldBegin("details", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:details: ", p), err) }
    if err := oprot.WriteBinary(p.Details); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.details (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:details: ", p), err) }
  }
  return err
}

func (p *ActivityTaskTimedOutEventAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetScheduledEventId() {
    if err := oprot.WriteFieldBegin("scheduledEventId", thrift.I64, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:scheduledEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ScheduledEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.scheduledEventId (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:scheduledEventId: ", p), err) }
  }
  return err
}

func (p *ActivityTaskTimedOutEventAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartedEventId() {
    if err := oprot.WriteFieldBegin("startedEventId", thrift.I64, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:startedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.StartedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startedEventId (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:startedEventId: ", p), err) }
  }
  return err
}

func (p *ActivityTaskTimedOutEventAttributes) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeoutType() {
    if err := oprot.WriteFieldBegin("timeoutType", thrift.I32, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:timeoutType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.TimeoutType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeoutType (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:timeoutType: ", p), err) }
  }
  return err
}

func (p *ActivityTaskTimedOutEventAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ActivityTaskTimedOutEventAttributes(%+v)", *p)
}

// Attributes:
//  - ActivityId
//  - DecisionTaskCompletedEventId
type ActivityTaskCancelRequestedEventAttributes struct {
  // unused fields # 1 to 9
  ActivityId *string `thrift:"activityId,10" db:"activityId" json:"activityId,omitempty"`
  // unused fields # 11 to 19
  DecisionTaskCompletedEventId *int64 `thrift:"decisionTaskCompletedEventId,20" db:"decisionTaskCompletedEventId" json:"decisionTaskCompletedEventId,omitempty"`
}

func NewActivityTaskCancelRequestedEventAttributes() *ActivityTaskCancelRequestedEventAttributes {
  return &ActivityTaskCancelRequestedEventAttributes{}
}

var ActivityTaskCancelRequestedEventAttributes_ActivityId_DEFAULT string
func (p *ActivityTaskCancelRequestedEventAttributes) GetActivityId() string {
  if !p.IsSetActivityId() {
    return ActivityTaskCancelRequestedEventAttributes_ActivityId_DEFAULT
  }
return *p.ActivityId
}
var ActivityTaskCancelRequestedEventAttributes_DecisionTaskCompletedEventId_DEFAULT int64
func (p *ActivityTaskCancelRequestedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
  if !p.IsSetDecisionTaskCompletedEventId() {
    return ActivityTaskCancelRequestedEventAttributes_DecisionTaskCompletedEventId_DEFAULT
  }
return *p.DecisionTaskCompletedEventId
}
func (p *ActivityTaskCancelRequestedEventAttributes) IsSetActivityId() bool {
  return p.ActivityId != nil
}

func (p *ActivityTaskCancelRequestedEventAttributes) IsSetDecisionTaskCompletedEventId() bool {
  return p.DecisionTaskCompletedEventId != nil
}

func (p *ActivityTaskCancelRequestedEventAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ActivityTaskCancelRequestedEventAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ActivityId = &v
}
  return nil
}

func (p *ActivityTaskCancelRequestedEventAttributes)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.DecisionTaskCompletedEventId = &v
}
  return nil
}

func (p *ActivityTaskCancelRequestedEventAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ActivityTaskCancelRequestedEventAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ActivityTaskCancelRequestedEventAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetActivityId() {
    if err := oprot.WriteFieldBegin("activityId", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:activityId: ", p), err) }
    if err := oprot.WriteString(string(*p.ActivityId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.activityId (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:activityId: ", p), err) }
  }
  return err
}

func (p *ActivityTaskCancelRequestedEventAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetDecisionTaskCompletedEventId() {
    if err := oprot.WriteFieldBegin("decisionTaskCompletedEventId", thrift.I64, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:decisionTaskCompletedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.DecisionTaskCompletedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.decisionTaskCompletedEventId (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:decisionTaskCompletedEventId: ", p), err) }
  }
  return err
}

func (p *ActivityTaskCancelRequestedEventAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ActivityTaskCancelRequestedEventAttributes(%+v)", *p)
}

// Attributes:
//  - ActivityId
//  - Cause
//  - DecisionTaskCompletedEventId
type RequestCancelActivityTaskFailedEventAttributes struct {
  // unused fields # 1 to 9
  ActivityId *string `thrift:"activityId,10" db:"activityId" json:"activityId,omitempty"`
  // unused fields # 11 to 19
  Cause *string `thrift:"cause,20" db:"cause" json:"cause,omitempty"`
  // unused fields # 21 to 29
  DecisionTaskCompletedEventId *int64 `thrift:"decisionTaskCompletedEventId,30" db:"decisionTaskCompletedEventId" json:"decisionTaskCompletedEventId,omitempty"`
}

func NewRequestCancelActivityTaskFailedEventAttributes() *RequestCancelActivityTaskFailedEventAttributes {
  return &RequestCancelActivityTaskFailedEventAttributes{}
}

var RequestCancelActivityTaskFailedEventAttributes_ActivityId_DEFAULT string
func (p *RequestCancelActivityTaskFailedEventAttributes) GetActivityId() string {
  if !p.IsSetActivityId() {
    return RequestCancelActivityTaskFailedEventAttributes_ActivityId_DEFAULT
  }
return *p.ActivityId
}
var RequestCancelActivityTaskFailedEventAttributes_Cause_DEFAULT string
func (p *RequestCancelActivityTaskFailedEventAttributes) GetCause() string {
  if !p.IsSetCause() {
    return RequestCancelActivityTaskFailedEventAttributes_Cause_DEFAULT
  }
return *p.Cause
}
var RequestCancelActivityTaskFailedEventAttributes_DecisionTaskCompletedEventId_DEFAULT int64
func (p *RequestCancelActivityTaskFailedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
  if !p.IsSetDecisionTaskCompletedEventId() {
    return RequestCancelActivityTaskFailedEventAttributes_DecisionTaskCompletedEventId_DEFAULT
  }
return *p.DecisionTaskCompletedEventId
}
func (p *RequestCancelActivityTaskFailedEventAttributes) IsSetActivityId() bool {
  return p.ActivityId != nil
}

func (p *RequestCancelActivityTaskFailedEventAttributes) IsSetCause() bool {
  return p.Cause != nil
}

func (p *RequestCancelActivityTaskFailedEventAttributes) IsSetDecisionTaskCompletedEventId() bool {
  return p.DecisionTaskCompletedEventId != nil
}

func (p *RequestCancelActivityTaskFailedEventAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RequestCancelActivityTaskFailedEventAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ActivityId = &v
}
  return nil
}

func (p *RequestCancelActivityTaskFailedEventAttributes)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Cause = &v
}
  return nil
}

func (p *RequestCancelActivityTaskFailedEventAttributes)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.DecisionTaskCompletedEventId = &v
}
  return nil
}

func (p *RequestCancelActivityTaskFailedEventAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RequestCancelActivityTaskFailedEventAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RequestCancelActivityTaskFailedEventAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetActivityId() {
    if err := oprot.WriteFieldBegin("activityId", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:activityId: ", p), err) }
    if err := oprot.WriteString(string(*p.ActivityId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.activityId (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:activityId: ", p), err) }
  }
  return err
}

func (p *RequestCancelActivityTaskFailedEventAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetCause() {
    if err := oprot.WriteFieldBegin("cause", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:cause: ", p), err) }
    if err := oprot.WriteString(string(*p.Cause)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cause (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:cause: ", p), err) }
  }
  return err
}

func (p *RequestCancelActivityTaskFailedEventAttributes) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetDecisionTaskCompletedEventId() {
    if err := oprot.WriteFieldBegin("decisionTaskCompletedEventId", thrift.I64, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:decisionTaskCompletedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.DecisionTaskCompletedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.decisionTaskCompletedEventId (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:decisionTaskCompletedEventId: ", p), err) }
  }
  return err
}

func (p *RequestCancelActivityTaskFailedEventAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestCancelActivityTaskFailedEventAttributes(%+v)", *p)
}

// Attributes:
//  - Details
//  - LatestCancelRequestedEventId
//  - ScheduledEventId
//  - StartedEventId
//  - Identity
type ActivityTaskCanceledEventAttributes struct {
  // unused fields # 1 to 9
  Details []byte `thrift:"details,10" db:"details" json:"details,omitempty"`
  // unused fields # 11 to 19
  LatestCancelRequestedEventId *int64 `thrift:"latestCancelRequestedEventId,20" db:"latestCancelRequestedEventId" json:"latestCancelRequestedEventId,omitempty"`
  // unused fields # 21 to 29
  ScheduledEventId *int64 `thrift:"scheduledEventId,30" db:"scheduledEventId" json:"scheduledEventId,omitempty"`
  // unused fields # 31 to 39
  StartedEventId *int64 `thrift:"startedEventId,40" db:"startedEventId" json:"startedEventId,omitempty"`
  // unused fields # 41 to 49
  Identity *string `thrift:"identity,50" db:"identity" json:"identity,omitempty"`
}

func NewActivityTaskCanceledEventAttributes() *ActivityTaskCanceledEventAttributes {
  return &ActivityTaskCanceledEventAttributes{}
}

var ActivityTaskCanceledEventAttributes_Details_DEFAULT []byte

func (p *ActivityTaskCanceledEventAttributes) GetDetails() []byte {
  return p.Details
}
var ActivityTaskCanceledEventAttributes_LatestCancelRequestedEventId_DEFAULT int64
func (p *ActivityTaskCanceledEventAttributes) GetLatestCancelRequestedEventId() int64 {
  if !p.IsSetLatestCancelRequestedEventId() {
    return ActivityTaskCanceledEventAttributes_LatestCancelRequestedEventId_DEFAULT
  }
return *p.LatestCancelRequestedEventId
}
var ActivityTaskCanceledEventAttributes_ScheduledEventId_DEFAULT int64
func (p *ActivityTaskCanceledEventAttributes) GetScheduledEventId() int64 {
  if !p.IsSetScheduledEventId() {
    return ActivityTaskCanceledEventAttributes_ScheduledEventId_DEFAULT
  }
return *p.ScheduledEventId
}
var ActivityTaskCanceledEventAttributes_StartedEventId_DEFAULT int64
func (p *ActivityTaskCanceledEventAttributes) GetStartedEventId() int64 {
  if !p.IsSetStartedEventId() {
    return ActivityTaskCanceledEventAttributes_StartedEventId_DEFAULT
  }
return *p.StartedEventId
}
var ActivityTaskCanceledEventAttributes_Identity_DEFAULT string
func (p *ActivityTaskCanceledEventAttributes) GetIdentity() string {
  if !p.IsSetIdentity() {
    return ActivityTaskCanceledEventAttributes_Identity_DEFAULT
  }
return *p.Identity
}
func (p *ActivityTaskCanceledEventAttributes) IsSetDetails() bool {
  return p.Details != nil
}

func (p *ActivityTaskCanceledEventAttributes) IsSetLatestCancelRequestedEventId() bool {
  return p.LatestCancelRequestedEventId != nil
}

func (p *ActivityTaskCanceledEventAttributes) IsSetScheduledEventId() bool {
  return p.ScheduledEventId != nil
}

func (p *ActivityTaskCanceledEventAttributes) IsSetStartedEventId() bool {
  return p.StartedEventId != nil
}

func (p *ActivityTaskCanceledEventAttributes) IsSetIdentity() bool {
  return p.Identity != nil
}

func (p *ActivityTaskCanceledEventAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    case 50:
      if err := p.ReadField50(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ActivityTaskCanceledEventAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Details = v
}
  return nil
}

func (p *ActivityTaskCanceledEventAttributes)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.LatestCancelRequestedEventId = &v
}
  return nil
}

func (p *ActivityTaskCanceledEventAttributes)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.ScheduledEventId = &v
}
  return nil
}

func (p *ActivityTaskCanceledEventAttributes)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.StartedEventId = &v
}
  return nil
}

func (p *ActivityTaskCanceledEventAttributes)  ReadField50(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 50: ", err)
} else {
  p.Identity = &v
}
  return nil
}

func (p *ActivityTaskCanceledEventAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ActivityTaskCanceledEventAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField50(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ActivityTaskCanceledEventAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDetails() {
    if err := oprot.WriteFieldBegin("details", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:details: ", p), err) }
    if err := oprot.WriteBinary(p.Details); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.details (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:details: ", p), err) }
  }
  return err
}

func (p *ActivityTaskCanceledEventAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetLatestCancelRequestedEventId() {
    if err := oprot.WriteFieldBegin("latestCancelRequestedEventId", thrift.I64, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:latestCancelRequestedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.LatestCancelRequestedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.latestCancelRequestedEventId (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:latestCancelRequestedEventId: ", p), err) }
  }
  return err
}

func (p *ActivityTaskCanceledEventAttributes) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetScheduledEventId() {
    if err := oprot.WriteFieldBegin("scheduledEventId", thrift.I64, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:scheduledEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ScheduledEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.scheduledEventId (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:scheduledEventId: ", p), err) }
  }
  return err
}

func (p *ActivityTaskCanceledEventAttributes) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartedEventId() {
    if err := oprot.WriteFieldBegin("startedEventId", thrift.I64, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:startedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.StartedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startedEventId (40) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:startedEventId: ", p), err) }
  }
  return err
}

func (p *ActivityTaskCanceledEventAttributes) writeField50(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentity() {
    if err := oprot.WriteFieldBegin("identity", thrift.STRING, 50); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:identity: ", p), err) }
    if err := oprot.WriteString(string(*p.Identity)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.identity (50) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 50:identity: ", p), err) }
  }
  return err
}

func (p *ActivityTaskCanceledEventAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ActivityTaskCanceledEventAttributes(%+v)", *p)
}

// Attributes:
//  - TimerId
//  - StartToFireTimeoutSeconds
//  - DecisionTaskCompletedEventId
type TimerStartedEventAttributes struct {
  // unused fields # 1 to 9
  TimerId *string `thrift:"timerId,10" db:"timerId" json:"timerId,omitempty"`
  // unused fields # 11 to 19
  StartToFireTimeoutSeconds *int64 `thrift:"startToFireTimeoutSeconds,20" db:"startToFireTimeoutSeconds" json:"startToFireTimeoutSeconds,omitempty"`
  // unused fields # 21 to 29
  DecisionTaskCompletedEventId *int64 `thrift:"decisionTaskCompletedEventId,30" db:"decisionTaskCompletedEventId" json:"decisionTaskCompletedEventId,omitempty"`
}

func NewTimerStartedEventAttributes() *TimerStartedEventAttributes {
  return &TimerStartedEventAttributes{}
}

var TimerStartedEventAttributes_TimerId_DEFAULT string
func (p *TimerStartedEventAttributes) GetTimerId() string {
  if !p.IsSetTimerId() {
    return TimerStartedEventAttributes_TimerId_DEFAULT
  }
return *p.TimerId
}
var TimerStartedEventAttributes_StartToFireTimeoutSeconds_DEFAULT int64
func (p *TimerStartedEventAttributes) GetStartToFireTimeoutSeconds() int64 {
  if !p.IsSetStartToFireTimeoutSeconds() {
    return TimerStartedEventAttributes_StartToFireTimeoutSeconds_DEFAULT
  }
return *p.StartToFireTimeoutSeconds
}
var TimerStartedEventAttributes_DecisionTaskCompletedEventId_DEFAULT int64
func (p *TimerStartedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
  if !p.IsSetDecisionTaskCompletedEventId() {
    return TimerStartedEventAttributes_DecisionTaskCompletedEventId_DEFAULT
  }
return *p.DecisionTaskCompletedEventId
}
func (p *TimerStartedEventAttributes) IsSetTimerId() bool {
  return p.TimerId != nil
}

func (p *TimerStartedEventAttributes) IsSetStartToFireTimeoutSeconds() bool {
  return p.StartToFireTimeoutSeconds != nil
}

func (p *TimerStartedEventAttributes) IsSetDecisionTaskCompletedEventId() bool {
  return p.DecisionTaskCompletedEventId != nil
}

func (p *TimerStartedEventAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimerStartedEventAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TimerId = &v
}
  return nil
}

func (p *TimerStartedEventAttributes)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.StartToFireTimeoutSeconds = &v
}
  return nil
}

func (p *TimerStartedEventAttributes)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.DecisionTaskCompletedEventId = &v
}
  return nil
}

func (p *TimerStartedEventAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TimerStartedEventAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimerStartedEventAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimerId() {
    if err := oprot.WriteFieldBegin("timerId", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:timerId: ", p), err) }
    if err := oprot.WriteString(string(*p.TimerId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timerId (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:timerId: ", p), err) }
  }
  return err
}

func (p *TimerStartedEventAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartToFireTimeoutSeconds() {
    if err := oprot.WriteFieldBegin("startToFireTimeoutSeconds", thrift.I64, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:startToFireTimeoutSeconds: ", p), err) }
    if err := oprot.WriteI64(int64(*p.StartToFireTimeoutSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startToFireTimeoutSeconds (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:startToFireTimeoutSeconds: ", p), err) }
  }
  return err
}

func (p *TimerStartedEventAttributes) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetDecisionTaskCompletedEventId() {
    if err := oprot.WriteFieldBegin("decisionTaskCompletedEventId", thrift.I64, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:decisionTaskCompletedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.DecisionTaskCompletedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.decisionTaskCompletedEventId (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:decisionTaskCompletedEventId: ", p), err) }
  }
  return err
}

func (p *TimerStartedEventAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimerStartedEventAttributes(%+v)", *p)
}

// Attributes:
//  - TimerId
//  - StartedEventId
type TimerFiredEventAttributes struct {
  // unused fields # 1 to 9
  TimerId *string `thrift:"timerId,10" db:"timerId" json:"timerId,omitempty"`
  // unused fields # 11 to 19
  StartedEventId *int64 `thrift:"startedEventId,20" db:"startedEventId" json:"startedEventId,omitempty"`
}

func NewTimerFiredEventAttributes() *TimerFiredEventAttributes {
  return &TimerFiredEventAttributes{}
}

var TimerFiredEventAttributes_TimerId_DEFAULT string
func (p *TimerFiredEventAttributes) GetTimerId() string {
  if !p.IsSetTimerId() {
    return TimerFiredEventAttributes_TimerId_DEFAULT
  }
return *p.TimerId
}
var TimerFiredEventAttributes_StartedEventId_DEFAULT int64
func (p *TimerFiredEventAttributes) GetStartedEventId() int64 {
  if !p.IsSetStartedEventId() {
    return TimerFiredEventAttributes_StartedEventId_DEFAULT
  }
return *p.StartedEventId
}
func (p *TimerFiredEventAttributes) IsSetTimerId() bool {
  return p.TimerId != nil
}

func (p *TimerFiredEventAttributes) IsSetStartedEventId() bool {
  return p.StartedEventId != nil
}

func (p *TimerFiredEventAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimerFiredEventAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TimerId = &v
}
  return nil
}

func (p *TimerFiredEventAttributes)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.StartedEventId = &v
}
  return nil
}

func (p *TimerFiredEventAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TimerFiredEventAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimerFiredEventAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimerId() {
    if err := oprot.WriteFieldBegin("timerId", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:timerId: ", p), err) }
    if err := oprot.WriteString(string(*p.TimerId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timerId (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:timerId: ", p), err) }
  }
  return err
}

func (p *TimerFiredEventAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartedEventId() {
    if err := oprot.WriteFieldBegin("startedEventId", thrift.I64, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:startedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.StartedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startedEventId (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:startedEventId: ", p), err) }
  }
  return err
}

func (p *TimerFiredEventAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimerFiredEventAttributes(%+v)", *p)
}

// Attributes:
//  - TimerId
//  - StartedEventId
//  - DecisionTaskCompletedEventId
//  - Identity
type TimerCanceledEventAttributes struct {
  // unused fields # 1 to 9
  TimerId *string `thrift:"timerId,10" db:"timerId" json:"timerId,omitempty"`
  // unused fields # 11 to 19
  StartedEventId *int64 `thrift:"startedEventId,20" db:"startedEventId" json:"startedEventId,omitempty"`
  // unused fields # 21 to 29
  DecisionTaskCompletedEventId *int64 `thrift:"decisionTaskCompletedEventId,30" db:"decisionTaskCompletedEventId" json:"decisionTaskCompletedEventId,omitempty"`
  // unused fields # 31 to 39
  Identity *string `thrift:"identity,40" db:"identity" json:"identity,omitempty"`
}

func NewTimerCanceledEventAttributes() *TimerCanceledEventAttributes {
  return &TimerCanceledEventAttributes{}
}

var TimerCanceledEventAttributes_TimerId_DEFAULT string
func (p *TimerCanceledEventAttributes) GetTimerId() string {
  if !p.IsSetTimerId() {
    return TimerCanceledEventAttributes_TimerId_DEFAULT
  }
return *p.TimerId
}
var TimerCanceledEventAttributes_StartedEventId_DEFAULT int64
func (p *TimerCanceledEventAttributes) GetStartedEventId() int64 {
  if !p.IsSetStartedEventId() {
    return TimerCanceledEventAttributes_StartedEventId_DEFAULT
  }
return *p.StartedEventId
}
var TimerCanceledEventAttributes_DecisionTaskCompletedEventId_DEFAULT int64
func (p *TimerCanceledEventAttributes) GetDecisionTaskCompletedEventId() int64 {
  if !p.IsSetDecisionTaskCompletedEventId() {
    return TimerCanceledEventAttributes_DecisionTaskCompletedEventId_DEFAULT
  }
return *p.DecisionTaskCompletedEventId
}
var TimerCanceledEventAttributes_Identity_DEFAULT string
func (p *TimerCanceledEventAttributes) GetIdentity() string {
  if !p.IsSetIdentity() {
    return TimerCanceledEventAttributes_Identity_DEFAULT
  }
return *p.Identity
}
func (p *TimerCanceledEventAttributes) IsSetTimerId() bool {
  return p.TimerId != nil
}

func (p *TimerCanceledEventAttributes) IsSetStartedEventId() bool {
  return p.StartedEventId != nil
}

func (p *TimerCanceledEventAttributes) IsSetDecisionTaskCompletedEventId() bool {
  return p.DecisionTaskCompletedEventId != nil
}

func (p *TimerCanceledEventAttributes) IsSetIdentity() bool {
  return p.Identity != nil
}

func (p *TimerCanceledEventAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimerCanceledEventAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TimerId = &v
}
  return nil
}

func (p *TimerCanceledEventAttributes)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.StartedEventId = &v
}
  return nil
}

func (p *TimerCanceledEventAttributes)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.DecisionTaskCompletedEventId = &v
}
  return nil
}

func (p *TimerCanceledEventAttributes)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.Identity = &v
}
  return nil
}

func (p *TimerCanceledEventAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TimerCanceledEventAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimerCanceledEventAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimerId() {
    if err := oprot.WriteFieldBegin("timerId", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:timerId: ", p), err) }
    if err := oprot.WriteString(string(*p.TimerId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timerId (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:timerId: ", p), err) }
  }
  return err
}

func (p *TimerCanceledEventAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartedEventId() {
    if err := oprot.WriteFieldBegin("startedEventId", thrift.I64, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:startedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.StartedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startedEventId (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:startedEventId: ", p), err) }
  }
  return err
}

func (p *TimerCanceledEventAttributes) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetDecisionTaskCompletedEventId() {
    if err := oprot.WriteFieldBegin("decisionTaskCompletedEventId", thrift.I64, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:decisionTaskCompletedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.DecisionTaskCompletedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.decisionTaskCompletedEventId (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:decisionTaskCompletedEventId: ", p), err) }
  }
  return err
}

func (p *TimerCanceledEventAttributes) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentity() {
    if err := oprot.WriteFieldBegin("identity", thrift.STRING, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:identity: ", p), err) }
    if err := oprot.WriteString(string(*p.Identity)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.identity (40) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:identity: ", p), err) }
  }
  return err
}

func (p *TimerCanceledEventAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimerCanceledEventAttributes(%+v)", *p)
}

// Attributes:
//  - TimerId
//  - Cause
//  - DecisionTaskCompletedEventId
//  - Identity
type CancelTimerFailedEventAttributes struct {
  // unused fields # 1 to 9
  TimerId *string `thrift:"timerId,10" db:"timerId" json:"timerId,omitempty"`
  // unused fields # 11 to 19
  Cause *string `thrift:"cause,20" db:"cause" json:"cause,omitempty"`
  // unused fields # 21 to 29
  DecisionTaskCompletedEventId *int64 `thrift:"decisionTaskCompletedEventId,30" db:"decisionTaskCompletedEventId" json:"decisionTaskCompletedEventId,omitempty"`
  // unused fields # 31 to 39
  Identity *string `thrift:"identity,40" db:"identity" json:"identity,omitempty"`
}

func NewCancelTimerFailedEventAttributes() *CancelTimerFailedEventAttributes {
  return &CancelTimerFailedEventAttributes{}
}

var CancelTimerFailedEventAttributes_TimerId_DEFAULT string
func (p *CancelTimerFailedEventAttributes) GetTimerId() string {
  if !p.IsSetTimerId() {
    return CancelTimerFailedEventAttributes_TimerId_DEFAULT
  }
return *p.TimerId
}
var CancelTimerFailedEventAttributes_Cause_DEFAULT string
func (p *CancelTimerFailedEventAttributes) GetCause() string {
  if !p.IsSetCause() {
    return CancelTimerFailedEventAttributes_Cause_DEFAULT
  }
return *p.Cause
}
var CancelTimerFailedEventAttributes_DecisionTaskCompletedEventId_DEFAULT int64
func (p *CancelTimerFailedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
  if !p.IsSetDecisionTaskCompletedEventId() {
    return CancelTimerFailedEventAttributes_DecisionTaskCompletedEventId_DEFAULT
  }
return *p.DecisionTaskCompletedEventId
}
var CancelTimerFailedEventAttributes_Identity_DEFAULT string
func (p *CancelTimerFailedEventAttributes) GetIdentity() string {
  if !p.IsSetIdentity() {
    return CancelTimerFailedEventAttributes_Identity_DEFAULT
  }
return *p.Identity
}
func (p *CancelTimerFailedEventAttributes) IsSetTimerId() bool {
  return p.TimerId != nil
}

func (p *CancelTimerFailedEventAttributes) IsSetCause() bool {
  return p.Cause != nil
}

func (p *CancelTimerFailedEventAttributes) IsSetDecisionTaskCompletedEventId() bool {
  return p.DecisionTaskCompletedEventId != nil
}

func (p *CancelTimerFailedEventAttributes) IsSetIdentity() bool {
  return p.Identity != nil
}

func (p *CancelTimerFailedEventAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CancelTimerFailedEventAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TimerId = &v
}
  return nil
}

func (p *CancelTimerFailedEventAttributes)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Cause = &v
}
  return nil
}

func (p *CancelTimerFailedEventAttributes)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.DecisionTaskCompletedEventId = &v
}
  return nil
}

func (p *CancelTimerFailedEventAttributes)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.Identity = &v
}
  return nil
}

func (p *CancelTimerFailedEventAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CancelTimerFailedEventAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CancelTimerFailedEventAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimerId() {
    if err := oprot.WriteFieldBegin("timerId", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:timerId: ", p), err) }
    if err := oprot.WriteString(string(*p.TimerId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timerId (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:timerId: ", p), err) }
  }
  return err
}

func (p *CancelTimerFailedEventAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetCause() {
    if err := oprot.WriteFieldBegin("cause", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:cause: ", p), err) }
    if err := oprot.WriteString(string(*p.Cause)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cause (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:cause: ", p), err) }
  }
  return err
}

func (p *CancelTimerFailedEventAttributes) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetDecisionTaskCompletedEventId() {
    if err := oprot.WriteFieldBegin("decisionTaskCompletedEventId", thrift.I64, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:decisionTaskCompletedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.DecisionTaskCompletedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.decisionTaskCompletedEventId (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:decisionTaskCompletedEventId: ", p), err) }
  }
  return err
}

func (p *CancelTimerFailedEventAttributes) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentity() {
    if err := oprot.WriteFieldBegin("identity", thrift.STRING, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:identity: ", p), err) }
    if err := oprot.WriteString(string(*p.Identity)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.identity (40) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:identity: ", p), err) }
  }
  return err
}

func (p *CancelTimerFailedEventAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CancelTimerFailedEventAttributes(%+v)", *p)
}

// Attributes:
//  - MarkerName
//  - Details
//  - DecisionTaskCompletedEventId
type MarkerRecordedEventAttributes struct {
  // unused fields # 1 to 9
  MarkerName *string `thrift:"markerName,10" db:"markerName" json:"markerName,omitempty"`
  // unused fields # 11 to 19
  Details []byte `thrift:"details,20" db:"details" json:"details,omitempty"`
  // unused fields # 21 to 29
  DecisionTaskCompletedEventId *int64 `thrift:"decisionTaskCompletedEventId,30" db:"decisionTaskCompletedEventId" json:"decisionTaskCompletedEventId,omitempty"`
}

func NewMarkerRecordedEventAttributes() *MarkerRecordedEventAttributes {
  return &MarkerRecordedEventAttributes{}
}

var MarkerRecordedEventAttributes_MarkerName_DEFAULT string
func (p *MarkerRecordedEventAttributes) GetMarkerName() string {
  if !p.IsSetMarkerName() {
    return MarkerRecordedEventAttributes_MarkerName_DEFAULT
  }
return *p.MarkerName
}
var MarkerRecordedEventAttributes_Details_DEFAULT []byte

func (p *MarkerRecordedEventAttributes) GetDetails() []byte {
  return p.Details
}
var MarkerRecordedEventAttributes_DecisionTaskCompletedEventId_DEFAULT int64
func (p *MarkerRecordedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
  if !p.IsSetDecisionTaskCompletedEventId() {
    return MarkerRecordedEventAttributes_DecisionTaskCompletedEventId_DEFAULT
  }
return *p.DecisionTaskCompletedEventId
}
func (p *MarkerRecordedEventAttributes) IsSetMarkerName() bool {
  return p.MarkerName != nil
}

func (p *MarkerRecordedEventAttributes) IsSetDetails() bool {
  return p.Details != nil
}

func (p *MarkerRecordedEventAttributes) IsSetDecisionTaskCompletedEventId() bool {
  return p.DecisionTaskCompletedEventId != nil
}

func (p *MarkerRecordedEventAttributes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MarkerRecordedEventAttributes)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.MarkerName = &v
}
  return nil
}

func (p *MarkerRecordedEventAttributes)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Details = v
}
  return nil
}

func (p *MarkerRecordedEventAttributes)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.DecisionTaskCompletedEventId = &v
}
  return nil
}

func (p *MarkerRecordedEventAttributes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MarkerRecordedEventAttributes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MarkerRecordedEventAttributes) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetMarkerName() {
    if err := oprot.WriteFieldBegin("markerName", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:markerName: ", p), err) }
    if err := oprot.WriteString(string(*p.MarkerName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.markerName (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:markerName: ", p), err) }
  }
  return err
}

func (p *MarkerRecordedEventAttributes) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetDetails() {
    if err := oprot.WriteFieldBegin("details", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:details: ", p), err) }
    if err := oprot.WriteBinary(p.Details); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.details (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:details: ", p), err) }
  }
  return err
}

func (p *MarkerRecordedEventAttributes) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetDecisionTaskCompletedEventId() {
    if err := oprot.WriteFieldBegin("decisionTaskCompletedEventId", thrift.I64, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:decisionTaskCompletedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.DecisionTaskCompletedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.decisionTaskCompletedEventId (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:decisionTaskCompletedEventId: ", p), err) }
  }
  return err
}

func (p *MarkerRecordedEventAttributes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MarkerRecordedEventAttributes(%+v)", *p)
}

// Attributes:
//  - EventId
//  - Timestamp
//  - EventType
//  - WorkflowExecutionStartedEventAttributes
//  - WorkflowExecutionCompletedEventAttributes
//  - WorkflowExecutionFailedEventAttributes
//  - WorkflowExecutionTimedOutEventAttributes
//  - DecisionTaskScheduledEventAttributes
//  - DecisionTaskStartedEventAttributes
//  - DecisionTaskTimedOutEventAttributes
//  - DecisionTaskCompletedEventAttributes
//  - ActivityTaskScheduledEventAttributes
//  - ActivityTaskStartedEventAttributes
//  - ActivityTaskCompletedEventAttributes
//  - ActivityTaskFailedEventAttributes
//  - ActivityTaskTimedOutEventAttributes
//  - TimerStartedEventAttributes
//  - TimerFiredEventAttributes
//  - CompleteWorkflowExecutionFailedEventAttributes
//  - ActivityTaskCancelRequestedEventAttributes
//  - RequestCancelActivityTaskFailedEventAttributes
//  - ActivityTaskCanceledEventAttributes
//  - TimerCanceledEventAttributes
//  - CancelTimerFailedEventAttributes
//  - MarkerRecordedEventAttributes
type HistoryEvent struct {
  // unused fields # 1 to 9
  EventId *int64 `thrift:"eventId,10" db:"eventId" json:"eventId,omitempty"`
  // unused fields # 11 to 19
  Timestamp *int64 `thrift:"timestamp,20" db:"timestamp" json:"timestamp,omitempty"`
  // unused fields # 21 to 29
  EventType *EventType `thrift:"eventType,30" db:"eventType" json:"eventType,omitempty"`
  // unused fields # 31 to 34
  WorkflowExecutionStartedEventAttributes *WorkflowExecutionStartedEventAttributes `thrift:"workflowExecutionStartedEventAttributes,35" db:"workflowExecutionStartedEventAttributes" json:"workflowExecutionStartedEventAttributes,omitempty"`
  // unused fields # 36 to 39
  WorkflowExecutionCompletedEventAttributes *WorkflowExecutionCompletedEventAttributes `thrift:"workflowExecutionCompletedEventAttributes,40" db:"workflowExecutionCompletedEventAttributes" json:"workflowExecutionCompletedEventAttributes,omitempty"`
  // unused fields # 41 to 44
  WorkflowExecutionFailedEventAttributes *WorkflowExecutionFailedEventAttributes `thrift:"workflowExecutionFailedEventAttributes,45" db:"workflowExecutionFailedEventAttributes" json:"workflowExecutionFailedEventAttributes,omitempty"`
  // unused fields # 46 to 49
  WorkflowExecutionTimedOutEventAttributes *WorkflowExecutionTimedOutEventAttributes `thrift:"workflowExecutionTimedOutEventAttributes,50" db:"workflowExecutionTimedOutEventAttributes" json:"workflowExecutionTimedOutEventAttributes,omitempty"`
  // unused fields # 51 to 54
  DecisionTaskScheduledEventAttributes *DecisionTaskScheduledEventAttributes `thrift:"decisionTaskScheduledEventAttributes,55" db:"decisionTaskScheduledEventAttributes" json:"decisionTaskScheduledEventAttributes,omitempty"`
  // unused fields # 56 to 59
  DecisionTaskStartedEventAttributes *DecisionTaskStartedEventAttributes `thrift:"decisionTaskStartedEventAttributes,60" db:"decisionTaskStartedEventAttributes" json:"decisionTaskStartedEventAttributes,omitempty"`
  // unused fields # 61 to 62
  DecisionTaskTimedOutEventAttributes *DecisionTaskTimedOutEventAttributes `thrift:"decisionTaskTimedOutEventAttributes,63" db:"decisionTaskTimedOutEventAttributes" json:"decisionTaskTimedOutEventAttributes,omitempty"`
  // unused field # 64
  DecisionTaskCompletedEventAttributes *DecisionTaskCompletedEventAttributes `thrift:"decisionTaskCompletedEventAttributes,65" db:"decisionTaskCompletedEventAttributes" json:"decisionTaskCompletedEventAttributes,omitempty"`
  // unused fields # 66 to 69
  ActivityTaskScheduledEventAttributes *ActivityTaskScheduledEventAttributes `thrift:"activityTaskScheduledEventAttributes,70" db:"activityTaskScheduledEventAttributes" json:"activityTaskScheduledEventAttributes,omitempty"`
  // unused fields # 71 to 74
  ActivityTaskStartedEventAttributes *ActivityTaskStartedEventAttributes `thrift:"activityTaskStartedEventAttributes,75" db:"activityTaskStartedEventAttributes" json:"activityTaskStartedEventAttributes,omitempty"`
  // unused fields # 76 to 79
  ActivityTaskCompletedEventAttributes *ActivityTaskCompletedEventAttributes `thrift:"activityTaskCompletedEventAttributes,80" db:"activityTaskCompletedEventAttributes" json:"activityTaskCompletedEventAttributes,omitempty"`
  // unused fields # 81 to 84
  ActivityTaskFailedEventAttributes *ActivityTaskFailedEventAttributes `thrift:"activityTaskFailedEventAttributes,85" db:"activityTaskFailedEventAttributes" json:"activityTaskFailedEventAttributes,omitempty"`
  // unused fields # 86 to 89
  ActivityTaskTimedOutEventAttributes *ActivityTaskTimedOutEventAttributes `thrift:"activityTaskTimedOutEventAttributes,90" db:"activityTaskTimedOutEventAttributes" json:"activityTaskTimedOutEventAttributes,omitempty"`
  // unused fields # 91 to 94
  TimerStartedEventAttributes *TimerStartedEventAttributes `thrift:"timerStartedEventAttributes,95" db:"timerStartedEventAttributes" json:"timerStartedEventAttributes,omitempty"`
  // unused fields # 96 to 99
  TimerFiredEventAttributes *TimerFiredEventAttributes `thrift:"timerFiredEventAttributes,100" db:"timerFiredEventAttributes" json:"timerFiredEventAttributes,omitempty"`
  // unused fields # 101 to 104
  CompleteWorkflowExecutionFailedEventAttributes *CompleteWorkflowExecutionFailedEventAttributes `thrift:"completeWorkflowExecutionFailedEventAttributes,105" db:"completeWorkflowExecutionFailedEventAttributes" json:"completeWorkflowExecutionFailedEventAttributes,omitempty"`
  // unused fields # 106 to 109
  ActivityTaskCancelRequestedEventAttributes *ActivityTaskCancelRequestedEventAttributes `thrift:"activityTaskCancelRequestedEventAttributes,110" db:"activityTaskCancelRequestedEventAttributes" json:"activityTaskCancelRequestedEventAttributes,omitempty"`
  // unused fields # 111 to 119
  RequestCancelActivityTaskFailedEventAttributes *RequestCancelActivityTaskFailedEventAttributes `thrift:"requestCancelActivityTaskFailedEventAttributes,120" db:"requestCancelActivityTaskFailedEventAttributes" json:"requestCancelActivityTaskFailedEventAttributes,omitempty"`
  // unused fields # 121 to 129
  ActivityTaskCanceledEventAttributes *ActivityTaskCanceledEventAttributes `thrift:"activityTaskCanceledEventAttributes,130" db:"activityTaskCanceledEventAttributes" json:"activityTaskCanceledEventAttributes,omitempty"`
  // unused fields # 131 to 139
  TimerCanceledEventAttributes *TimerCanceledEventAttributes `thrift:"timerCanceledEventAttributes,140" db:"timerCanceledEventAttributes" json:"timerCanceledEventAttributes,omitempty"`
  // unused fields # 141 to 149
  CancelTimerFailedEventAttributes *CancelTimerFailedEventAttributes `thrift:"cancelTimerFailedEventAttributes,150" db:"cancelTimerFailedEventAttributes" json:"cancelTimerFailedEventAttributes,omitempty"`
  // unused fields # 151 to 159
  MarkerRecordedEventAttributes *MarkerRecordedEventAttributes `thrift:"markerRecordedEventAttributes,160" db:"markerRecordedEventAttributes" json:"markerRecordedEventAttributes,omitempty"`
}

func NewHistoryEvent() *HistoryEvent {
  return &HistoryEvent{}
}

var HistoryEvent_EventId_DEFAULT int64
func (p *HistoryEvent) GetEventId() int64 {
  if !p.IsSetEventId() {
    return HistoryEvent_EventId_DEFAULT
  }
return *p.EventId
}
var HistoryEvent_Timestamp_DEFAULT int64
func (p *HistoryEvent) GetTimestamp() int64 {
  if !p.IsSetTimestamp() {
    return HistoryEvent_Timestamp_DEFAULT
  }
return *p.Timestamp
}
var HistoryEvent_EventType_DEFAULT EventType
func (p *HistoryEvent) GetEventType() EventType {
  if !p.IsSetEventType() {
    return HistoryEvent_EventType_DEFAULT
  }
return *p.EventType
}
var HistoryEvent_WorkflowExecutionStartedEventAttributes_DEFAULT *WorkflowExecutionStartedEventAttributes
func (p *HistoryEvent) GetWorkflowExecutionStartedEventAttributes() *WorkflowExecutionStartedEventAttributes {
  if !p.IsSetWorkflowExecutionStartedEventAttributes() {
    return HistoryEvent_WorkflowExecutionStartedEventAttributes_DEFAULT
  }
return p.WorkflowExecutionStartedEventAttributes
}
var HistoryEvent_WorkflowExecutionCompletedEventAttributes_DEFAULT *WorkflowExecutionCompletedEventAttributes
func (p *HistoryEvent) GetWorkflowExecutionCompletedEventAttributes() *WorkflowExecutionCompletedEventAttributes {
  if !p.IsSetWorkflowExecutionCompletedEventAttributes() {
    return HistoryEvent_WorkflowExecutionCompletedEventAttributes_DEFAULT
  }
return p.WorkflowExecutionCompletedEventAttributes
}
var HistoryEvent_WorkflowExecutionFailedEventAttributes_DEFAULT *WorkflowExecutionFailedEventAttributes
func (p *HistoryEvent) GetWorkflowExecutionFailedEventAttributes() *WorkflowExecutionFailedEventAttributes {
  if !p.IsSetWorkflowExecutionFailedEventAttributes() {
    return HistoryEvent_WorkflowExecutionFailedEventAttributes_DEFAULT
  }
return p.WorkflowExecutionFailedEventAttributes
}
var HistoryEvent_WorkflowExecutionTimedOutEventAttributes_DEFAULT *WorkflowExecutionTimedOutEventAttributes
func (p *HistoryEvent) GetWorkflowExecutionTimedOutEventAttributes() *WorkflowExecutionTimedOutEventAttributes {
  if !p.IsSetWorkflowExecutionTimedOutEventAttributes() {
    return HistoryEvent_WorkflowExecutionTimedOutEventAttributes_DEFAULT
  }
return p.WorkflowExecutionTimedOutEventAttributes
}
var HistoryEvent_DecisionTaskScheduledEventAttributes_DEFAULT *DecisionTaskScheduledEventAttributes
func (p *HistoryEvent) GetDecisionTaskScheduledEventAttributes() *DecisionTaskScheduledEventAttributes {
  if !p.IsSetDecisionTaskScheduledEventAttributes() {
    return HistoryEvent_DecisionTaskScheduledEventAttributes_DEFAULT
  }
return p.DecisionTaskScheduledEventAttributes
}
var HistoryEvent_DecisionTaskStartedEventAttributes_DEFAULT *DecisionTaskStartedEventAttributes
func (p *HistoryEvent) GetDecisionTaskStartedEventAttributes() *DecisionTaskStartedEventAttributes {
  if !p.IsSetDecisionTaskStartedEventAttributes() {
    return HistoryEvent_DecisionTaskStartedEventAttributes_DEFAULT
  }
return p.DecisionTaskStartedEventAttributes
}
var HistoryEvent_DecisionTaskTimedOutEventAttributes_DEFAULT *DecisionTaskTimedOutEventAttributes
func (p *HistoryEvent) GetDecisionTaskTimedOutEventAttributes() *DecisionTaskTimedOutEventAttributes {
  if !p.IsSetDecisionTaskTimedOutEventAttributes() {
    return HistoryEvent_DecisionTaskTimedOutEventAttributes_DEFAULT
  }
return p.DecisionTaskTimedOutEventAttributes
}
var HistoryEvent_DecisionTaskCompletedEventAttributes_DEFAULT *DecisionTaskCompletedEventAttributes
func (p *HistoryEvent) GetDecisionTaskCompletedEventAttributes() *DecisionTaskCompletedEventAttributes {
  if !p.IsSetDecisionTaskCompletedEventAttributes() {
    return HistoryEvent_DecisionTaskCompletedEventAttributes_DEFAULT
  }
return p.DecisionTaskCompletedEventAttributes
}
var HistoryEvent_ActivityTaskScheduledEventAttributes_DEFAULT *ActivityTaskScheduledEventAttributes
func (p *HistoryEvent) GetActivityTaskScheduledEventAttributes() *ActivityTaskScheduledEventAttributes {
  if !p.IsSetActivityTaskScheduledEventAttributes() {
    return HistoryEvent_ActivityTaskScheduledEventAttributes_DEFAULT
  }
return p.ActivityTaskScheduledEventAttributes
}
var HistoryEvent_ActivityTaskStartedEventAttributes_DEFAULT *ActivityTaskStartedEventAttributes
func (p *HistoryEvent) GetActivityTaskStartedEventAttributes() *ActivityTaskStartedEventAttributes {
  if !p.IsSetActivityTaskStartedEventAttributes() {
    return HistoryEvent_ActivityTaskStartedEventAttributes_DEFAULT
  }
return p.ActivityTaskStartedEventAttributes
}
var HistoryEvent_ActivityTaskCompletedEventAttributes_DEFAULT *ActivityTaskCompletedEventAttributes
func (p *HistoryEvent) GetActivityTaskCompletedEventAttributes() *ActivityTaskCompletedEventAttributes {
  if !p.IsSetActivityTaskCompletedEventAttributes() {
    return HistoryEvent_ActivityTaskCompletedEventAttributes_DEFAULT
  }
return p.ActivityTaskCompletedEventAttributes
}
var HistoryEvent_ActivityTaskFailedEventAttributes_DEFAULT *ActivityTaskFailedEventAttributes
func (p *HistoryEvent) GetActivityTaskFailedEventAttributes() *ActivityTaskFailedEventAttributes {
  if !p.IsSetActivityTaskFailedEventAttributes() {
    return HistoryEvent_ActivityTaskFailedEventAttributes_DEFAULT
  }
return p.ActivityTaskFailedEventAttributes
}
var HistoryEvent_ActivityTaskTimedOutEventAttributes_DEFAULT *ActivityTaskTimedOutEventAttributes
func (p *HistoryEvent) GetActivityTaskTimedOutEventAttributes() *ActivityTaskTimedOutEventAttributes {
  if !p.IsSetActivityTaskTimedOutEventAttributes() {
    return HistoryEvent_ActivityTaskTimedOutEventAttributes_DEFAULT
  }
return p.ActivityTaskTimedOutEventAttributes
}
var HistoryEvent_TimerStartedEventAttributes_DEFAULT *TimerStartedEventAttributes
func (p *HistoryEvent) GetTimerStartedEventAttributes() *TimerStartedEventAttributes {
  if !p.IsSetTimerStartedEventAttributes() {
    return HistoryEvent_TimerStartedEventAttributes_DEFAULT
  }
return p.TimerStartedEventAttributes
}
var HistoryEvent_TimerFiredEventAttributes_DEFAULT *TimerFiredEventAttributes
func (p *HistoryEvent) GetTimerFiredEventAttributes() *TimerFiredEventAttributes {
  if !p.IsSetTimerFiredEventAttributes() {
    return HistoryEvent_TimerFiredEventAttributes_DEFAULT
  }
return p.TimerFiredEventAttributes
}
var HistoryEvent_CompleteWorkflowExecutionFailedEventAttributes_DEFAULT *CompleteWorkflowExecutionFailedEventAttributes
func (p *HistoryEvent) GetCompleteWorkflowExecutionFailedEventAttributes() *CompleteWorkflowExecutionFailedEventAttributes {
  if !p.IsSetCompleteWorkflowExecutionFailedEventAttributes() {
    return HistoryEvent_CompleteWorkflowExecutionFailedEventAttributes_DEFAULT
  }
return p.CompleteWorkflowExecutionFailedEventAttributes
}
var HistoryEvent_ActivityTaskCancelRequestedEventAttributes_DEFAULT *ActivityTaskCancelRequestedEventAttributes
func (p *HistoryEvent) GetActivityTaskCancelRequestedEventAttributes() *ActivityTaskCancelRequestedEventAttributes {
  if !p.IsSetActivityTaskCancelRequestedEventAttributes() {
    return HistoryEvent_ActivityTaskCancelRequestedEventAttributes_DEFAULT
  }
return p.ActivityTaskCancelRequestedEventAttributes
}
var HistoryEvent_RequestCancelActivityTaskFailedEventAttributes_DEFAULT *RequestCancelActivityTaskFailedEventAttributes
func (p *HistoryEvent) GetRequestCancelActivityTaskFailedEventAttributes() *RequestCancelActivityTaskFailedEventAttributes {
  if !p.IsSetRequestCancelActivityTaskFailedEventAttributes() {
    return HistoryEvent_RequestCancelActivityTaskFailedEventAttributes_DEFAULT
  }
return p.RequestCancelActivityTaskFailedEventAttributes
}
var HistoryEvent_ActivityTaskCanceledEventAttributes_DEFAULT *ActivityTaskCanceledEventAttributes
func (p *HistoryEvent) GetActivityTaskCanceledEventAttributes() *ActivityTaskCanceledEventAttributes {
  if !p.IsSetActivityTaskCanceledEventAttributes() {
    return HistoryEvent_ActivityTaskCanceledEventAttributes_DEFAULT
  }
return p.ActivityTaskCanceledEventAttributes
}
var HistoryEvent_TimerCanceledEventAttributes_DEFAULT *TimerCanceledEventAttributes
func (p *HistoryEvent) GetTimerCanceledEventAttributes() *TimerCanceledEventAttributes {
  if !p.IsSetTimerCanceledEventAttributes() {
    return HistoryEvent_TimerCanceledEventAttributes_DEFAULT
  }
return p.TimerCanceledEventAttributes
}
var HistoryEvent_CancelTimerFailedEventAttributes_DEFAULT *CancelTimerFailedEventAttributes
func (p *HistoryEvent) GetCancelTimerFailedEventAttributes() *CancelTimerFailedEventAttributes {
  if !p.IsSetCancelTimerFailedEventAttributes() {
    return HistoryEvent_CancelTimerFailedEventAttributes_DEFAULT
  }
return p.CancelTimerFailedEventAttributes
}
var HistoryEvent_MarkerRecordedEventAttributes_DEFAULT *MarkerRecordedEventAttributes
func (p *HistoryEvent) GetMarkerRecordedEventAttributes() *MarkerRecordedEventAttributes {
  if !p.IsSetMarkerRecordedEventAttributes() {
    return HistoryEvent_MarkerRecordedEventAttributes_DEFAULT
  }
return p.MarkerRecordedEventAttributes
}
func (p *HistoryEvent) IsSetEventId() bool {
  return p.EventId != nil
}

func (p *HistoryEvent) IsSetTimestamp() bool {
  return p.Timestamp != nil
}

func (p *HistoryEvent) IsSetEventType() bool {
  return p.EventType != nil
}

func (p *HistoryEvent) IsSetWorkflowExecutionStartedEventAttributes() bool {
  return p.WorkflowExecutionStartedEventAttributes != nil
}

func (p *HistoryEvent) IsSetWorkflowExecutionCompletedEventAttributes() bool {
  return p.WorkflowExecutionCompletedEventAttributes != nil
}

func (p *HistoryEvent) IsSetWorkflowExecutionFailedEventAttributes() bool {
  return p.WorkflowExecutionFailedEventAttributes != nil
}

func (p *HistoryEvent) IsSetWorkflowExecutionTimedOutEventAttributes() bool {
  return p.WorkflowExecutionTimedOutEventAttributes != nil
}

func (p *HistoryEvent) IsSetDecisionTaskScheduledEventAttributes() bool {
  return p.DecisionTaskScheduledEventAttributes != nil
}

func (p *HistoryEvent) IsSetDecisionTaskStartedEventAttributes() bool {
  return p.DecisionTaskStartedEventAttributes != nil
}

func (p *HistoryEvent) IsSetDecisionTaskTimedOutEventAttributes() bool {
  return p.DecisionTaskTimedOutEventAttributes != nil
}

func (p *HistoryEvent) IsSetDecisionTaskCompletedEventAttributes() bool {
  return p.DecisionTaskCompletedEventAttributes != nil
}

func (p *HistoryEvent) IsSetActivityTaskScheduledEventAttributes() bool {
  return p.ActivityTaskScheduledEventAttributes != nil
}

func (p *HistoryEvent) IsSetActivityTaskStartedEventAttributes() bool {
  return p.ActivityTaskStartedEventAttributes != nil
}

func (p *HistoryEvent) IsSetActivityTaskCompletedEventAttributes() bool {
  return p.ActivityTaskCompletedEventAttributes != nil
}

func (p *HistoryEvent) IsSetActivityTaskFailedEventAttributes() bool {
  return p.ActivityTaskFailedEventAttributes != nil
}

func (p *HistoryEvent) IsSetActivityTaskTimedOutEventAttributes() bool {
  return p.ActivityTaskTimedOutEventAttributes != nil
}

func (p *HistoryEvent) IsSetTimerStartedEventAttributes() bool {
  return p.TimerStartedEventAttributes != nil
}

func (p *HistoryEvent) IsSetTimerFiredEventAttributes() bool {
  return p.TimerFiredEventAttributes != nil
}

func (p *HistoryEvent) IsSetCompleteWorkflowExecutionFailedEventAttributes() bool {
  return p.CompleteWorkflowExecutionFailedEventAttributes != nil
}

func (p *HistoryEvent) IsSetActivityTaskCancelRequestedEventAttributes() bool {
  return p.ActivityTaskCancelRequestedEventAttributes != nil
}

func (p *HistoryEvent) IsSetRequestCancelActivityTaskFailedEventAttributes() bool {
  return p.RequestCancelActivityTaskFailedEventAttributes != nil
}

func (p *HistoryEvent) IsSetActivityTaskCanceledEventAttributes() bool {
  return p.ActivityTaskCanceledEventAttributes != nil
}

func (p *HistoryEvent) IsSetTimerCanceledEventAttributes() bool {
  return p.TimerCanceledEventAttributes != nil
}

func (p *HistoryEvent) IsSetCancelTimerFailedEventAttributes() bool {
  return p.CancelTimerFailedEventAttributes != nil
}

func (p *HistoryEvent) IsSetMarkerRecordedEventAttributes() bool {
  return p.MarkerRecordedEventAttributes != nil
}

func (p *HistoryEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 35:
      if err := p.ReadField35(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    case 45:
      if err := p.ReadField45(iprot); err != nil {
        return err
      }
    case 50:
      if err := p.ReadField50(iprot); err != nil {
        return err
      }
    case 55:
      if err := p.ReadField55(iprot); err != nil {
        return err
      }
    case 60:
      if err := p.ReadField60(iprot); err != nil {
        return err
      }
    case 63:
      if err := p.ReadField63(iprot); err != nil {
        return err
      }
    case 65:
      if err := p.ReadField65(iprot); err != nil {
        return err
      }
    case 70:
      if err := p.ReadField70(iprot); err != nil {
        return err
      }
    case 75:
      if err := p.ReadField75(iprot); err != nil {
        return err
      }
    case 80:
      if err := p.ReadField80(iprot); err != nil {
        return err
      }
    case 85:
      if err := p.ReadField85(iprot); err != nil {
        return err
      }
    case 90:
      if err := p.ReadField90(iprot); err != nil {
        return err
      }
    case 95:
      if err := p.ReadField95(iprot); err != nil {
        return err
      }
    case 100:
      if err := p.ReadField100(iprot); err != nil {
        return err
      }
    case 105:
      if err := p.ReadField105(iprot); err != nil {
        return err
      }
    case 110:
      if err := p.ReadField110(iprot); err != nil {
        return err
      }
    case 120:
      if err := p.ReadField120(iprot); err != nil {
        return err
      }
    case 130:
      if err := p.ReadField130(iprot); err != nil {
        return err
      }
    case 140:
      if err := p.ReadField140(iprot); err != nil {
        return err
      }
    case 150:
      if err := p.ReadField150(iprot); err != nil {
        return err
      }
    case 160:
      if err := p.ReadField160(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HistoryEvent)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.EventId = &v
}
  return nil
}

func (p *HistoryEvent)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Timestamp = &v
}
  return nil
}

func (p *HistoryEvent)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  temp := EventType(v)
  p.EventType = &temp
}
  return nil
}

func (p *HistoryEvent)  ReadField35(iprot thrift.TProtocol) error {
  p.WorkflowExecutionStartedEventAttributes = &WorkflowExecutionStartedEventAttributes{}
  if err := p.WorkflowExecutionStartedEventAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WorkflowExecutionStartedEventAttributes), err)
  }
  return nil
}

func (p *HistoryEvent)  ReadField40(iprot thrift.TProtocol) error {
  p.WorkflowExecutionCompletedEventAttributes = &WorkflowExecutionCompletedEventAttributes{}
  if err := p.WorkflowExecutionCompletedEventAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WorkflowExecutionCompletedEventAttributes), err)
  }
  return nil
}

func (p *HistoryEvent)  ReadField45(iprot thrift.TProtocol) error {
  p.WorkflowExecutionFailedEventAttributes = &WorkflowExecutionFailedEventAttributes{}
  if err := p.WorkflowExecutionFailedEventAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WorkflowExecutionFailedEventAttributes), err)
  }
  return nil
}

func (p *HistoryEvent)  ReadField50(iprot thrift.TProtocol) error {
  p.WorkflowExecutionTimedOutEventAttributes = &WorkflowExecutionTimedOutEventAttributes{}
  if err := p.WorkflowExecutionTimedOutEventAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WorkflowExecutionTimedOutEventAttributes), err)
  }
  return nil
}

func (p *HistoryEvent)  ReadField55(iprot thrift.TProtocol) error {
  p.DecisionTaskScheduledEventAttributes = &DecisionTaskScheduledEventAttributes{}
  if err := p.DecisionTaskScheduledEventAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DecisionTaskScheduledEventAttributes), err)
  }
  return nil
}

func (p *HistoryEvent)  ReadField60(iprot thrift.TProtocol) error {
  p.DecisionTaskStartedEventAttributes = &DecisionTaskStartedEventAttributes{}
  if err := p.DecisionTaskStartedEventAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DecisionTaskStartedEventAttributes), err)
  }
  return nil
}

func (p *HistoryEvent)  ReadField63(iprot thrift.TProtocol) error {
  p.DecisionTaskTimedOutEventAttributes = &DecisionTaskTimedOutEventAttributes{}
  if err := p.DecisionTaskTimedOutEventAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DecisionTaskTimedOutEventAttributes), err)
  }
  return nil
}

func (p *HistoryEvent)  ReadField65(iprot thrift.TProtocol) error {
  p.DecisionTaskCompletedEventAttributes = &DecisionTaskCompletedEventAttributes{}
  if err := p.DecisionTaskCompletedEventAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DecisionTaskCompletedEventAttributes), err)
  }
  return nil
}

func (p *HistoryEvent)  ReadField70(iprot thrift.TProtocol) error {
  p.ActivityTaskScheduledEventAttributes = &ActivityTaskScheduledEventAttributes{}
  if err := p.ActivityTaskScheduledEventAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ActivityTaskScheduledEventAttributes), err)
  }
  return nil
}

func (p *HistoryEvent)  ReadField75(iprot thrift.TProtocol) error {
  p.ActivityTaskStartedEventAttributes = &ActivityTaskStartedEventAttributes{}
  if err := p.ActivityTaskStartedEventAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ActivityTaskStartedEventAttributes), err)
  }
  return nil
}

func (p *HistoryEvent)  ReadField80(iprot thrift.TProtocol) error {
  p.ActivityTaskCompletedEventAttributes = &ActivityTaskCompletedEventAttributes{}
  if err := p.ActivityTaskCompletedEventAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ActivityTaskCompletedEventAttributes), err)
  }
  return nil
}

func (p *HistoryEvent)  ReadField85(iprot thrift.TProtocol) error {
  p.ActivityTaskFailedEventAttributes = &ActivityTaskFailedEventAttributes{}
  if err := p.ActivityTaskFailedEventAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ActivityTaskFailedEventAttributes), err)
  }
  return nil
}

func (p *HistoryEvent)  ReadField90(iprot thrift.TProtocol) error {
  p.ActivityTaskTimedOutEventAttributes = &ActivityTaskTimedOutEventAttributes{}
  if err := p.ActivityTaskTimedOutEventAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ActivityTaskTimedOutEventAttributes), err)
  }
  return nil
}

func (p *HistoryEvent)  ReadField95(iprot thrift.TProtocol) error {
  p.TimerStartedEventAttributes = &TimerStartedEventAttributes{}
  if err := p.TimerStartedEventAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TimerStartedEventAttributes), err)
  }
  return nil
}

func (p *HistoryEvent)  ReadField100(iprot thrift.TProtocol) error {
  p.TimerFiredEventAttributes = &TimerFiredEventAttributes{}
  if err := p.TimerFiredEventAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TimerFiredEventAttributes), err)
  }
  return nil
}

func (p *HistoryEvent)  ReadField105(iprot thrift.TProtocol) error {
  p.CompleteWorkflowExecutionFailedEventAttributes = &CompleteWorkflowExecutionFailedEventAttributes{}
  if err := p.CompleteWorkflowExecutionFailedEventAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CompleteWorkflowExecutionFailedEventAttributes), err)
  }
  return nil
}

func (p *HistoryEvent)  ReadField110(iprot thrift.TProtocol) error {
  p.ActivityTaskCancelRequestedEventAttributes = &ActivityTaskCancelRequestedEventAttributes{}
  if err := p.ActivityTaskCancelRequestedEventAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ActivityTaskCancelRequestedEventAttributes), err)
  }
  return nil
}

func (p *HistoryEvent)  ReadField120(iprot thrift.TProtocol) error {
  p.RequestCancelActivityTaskFailedEventAttributes = &RequestCancelActivityTaskFailedEventAttributes{}
  if err := p.RequestCancelActivityTaskFailedEventAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestCancelActivityTaskFailedEventAttributes), err)
  }
  return nil
}

func (p *HistoryEvent)  ReadField130(iprot thrift.TProtocol) error {
  p.ActivityTaskCanceledEventAttributes = &ActivityTaskCanceledEventAttributes{}
  if err := p.ActivityTaskCanceledEventAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ActivityTaskCanceledEventAttributes), err)
  }
  return nil
}

func (p *HistoryEvent)  ReadField140(iprot thrift.TProtocol) error {
  p.TimerCanceledEventAttributes = &TimerCanceledEventAttributes{}
  if err := p.TimerCanceledEventAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TimerCanceledEventAttributes), err)
  }
  return nil
}

func (p *HistoryEvent)  ReadField150(iprot thrift.TProtocol) error {
  p.CancelTimerFailedEventAttributes = &CancelTimerFailedEventAttributes{}
  if err := p.CancelTimerFailedEventAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CancelTimerFailedEventAttributes), err)
  }
  return nil
}

func (p *HistoryEvent)  ReadField160(iprot thrift.TProtocol) error {
  p.MarkerRecordedEventAttributes = &MarkerRecordedEventAttributes{}
  if err := p.MarkerRecordedEventAttributes.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MarkerRecordedEventAttributes), err)
  }
  return nil
}

func (p *HistoryEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HistoryEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField35(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField45(oprot); err != nil { return err }
    if err := p.writeField50(oprot); err != nil { return err }
    if err := p.writeField55(oprot); err != nil { return err }
    if err := p.writeField60(oprot); err != nil { return err }
    if err := p.writeField63(oprot); err != nil { return err }
    if err := p.writeField65(oprot); err != nil { return err }
    if err := p.writeField70(oprot); err != nil { return err }
    if err := p.writeField75(oprot); err != nil { return err }
    if err := p.writeField80(oprot); err != nil { return err }
    if err := p.writeField85(oprot); err != nil { return err }
    if err := p.writeField90(oprot); err != nil { return err }
    if err := p.writeField95(oprot); err != nil { return err }
    if err := p.writeField100(oprot); err != nil { return err }
    if err := p.writeField105(oprot); err != nil { return err }
    if err := p.writeField110(oprot); err != nil { return err }
    if err := p.writeField120(oprot); err != nil { return err }
    if err := p.writeField130(oprot); err != nil { return err }
    if err := p.writeField140(oprot); err != nil { return err }
    if err := p.writeField150(oprot); err != nil { return err }
    if err := p.writeField160(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HistoryEvent) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetEventId() {
    if err := oprot.WriteFieldBegin("eventId", thrift.I64, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:eventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.EventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.eventId (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:eventId: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimestamp() {
    if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:timestamp: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:timestamp: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetEventType() {
    if err := oprot.WriteFieldBegin("eventType", thrift.I32, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:eventType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.EventType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.eventType (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:eventType: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) writeField35(oprot thrift.TProtocol) (err error) {
  if p.IsSetWorkflowExecutionStartedEventAttributes() {
    if err := oprot.WriteFieldBegin("workflowExecutionStartedEventAttributes", thrift.STRUCT, 35); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:workflowExecutionStartedEventAttributes: ", p), err) }
    if err := p.WorkflowExecutionStartedEventAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WorkflowExecutionStartedEventAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 35:workflowExecutionStartedEventAttributes: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetWorkflowExecutionCompletedEventAttributes() {
    if err := oprot.WriteFieldBegin("workflowExecutionCompletedEventAttributes", thrift.STRUCT, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:workflowExecutionCompletedEventAttributes: ", p), err) }
    if err := p.WorkflowExecutionCompletedEventAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WorkflowExecutionCompletedEventAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:workflowExecutionCompletedEventAttributes: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) writeField45(oprot thrift.TProtocol) (err error) {
  if p.IsSetWorkflowExecutionFailedEventAttributes() {
    if err := oprot.WriteFieldBegin("workflowExecutionFailedEventAttributes", thrift.STRUCT, 45); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 45:workflowExecutionFailedEventAttributes: ", p), err) }
    if err := p.WorkflowExecutionFailedEventAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WorkflowExecutionFailedEventAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 45:workflowExecutionFailedEventAttributes: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) writeField50(oprot thrift.TProtocol) (err error) {
  if p.IsSetWorkflowExecutionTimedOutEventAttributes() {
    if err := oprot.WriteFieldBegin("workflowExecutionTimedOutEventAttributes", thrift.STRUCT, 50); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:workflowExecutionTimedOutEventAttributes: ", p), err) }
    if err := p.WorkflowExecutionTimedOutEventAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WorkflowExecutionTimedOutEventAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 50:workflowExecutionTimedOutEventAttributes: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) writeField55(oprot thrift.TProtocol) (err error) {
  if p.IsSetDecisionTaskScheduledEventAttributes() {
    if err := oprot.WriteFieldBegin("decisionTaskScheduledEventAttributes", thrift.STRUCT, 55); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 55:decisionTaskScheduledEventAttributes: ", p), err) }
    if err := p.DecisionTaskScheduledEventAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DecisionTaskScheduledEventAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 55:decisionTaskScheduledEventAttributes: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) writeField60(oprot thrift.TProtocol) (err error) {
  if p.IsSetDecisionTaskStartedEventAttributes() {
    if err := oprot.WriteFieldBegin("decisionTaskStartedEventAttributes", thrift.STRUCT, 60); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:decisionTaskStartedEventAttributes: ", p), err) }
    if err := p.DecisionTaskStartedEventAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DecisionTaskStartedEventAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 60:decisionTaskStartedEventAttributes: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) writeField63(oprot thrift.TProtocol) (err error) {
  if p.IsSetDecisionTaskTimedOutEventAttributes() {
    if err := oprot.WriteFieldBegin("decisionTaskTimedOutEventAttributes", thrift.STRUCT, 63); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 63:decisionTaskTimedOutEventAttributes: ", p), err) }
    if err := p.DecisionTaskTimedOutEventAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DecisionTaskTimedOutEventAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 63:decisionTaskTimedOutEventAttributes: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) writeField65(oprot thrift.TProtocol) (err error) {
  if p.IsSetDecisionTaskCompletedEventAttributes() {
    if err := oprot.WriteFieldBegin("decisionTaskCompletedEventAttributes", thrift.STRUCT, 65); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 65:decisionTaskCompletedEventAttributes: ", p), err) }
    if err := p.DecisionTaskCompletedEventAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DecisionTaskCompletedEventAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 65:decisionTaskCompletedEventAttributes: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) writeField70(oprot thrift.TProtocol) (err error) {
  if p.IsSetActivityTaskScheduledEventAttributes() {
    if err := oprot.WriteFieldBegin("activityTaskScheduledEventAttributes", thrift.STRUCT, 70); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 70:activityTaskScheduledEventAttributes: ", p), err) }
    if err := p.ActivityTaskScheduledEventAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ActivityTaskScheduledEventAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 70:activityTaskScheduledEventAttributes: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) writeField75(oprot thrift.TProtocol) (err error) {
  if p.IsSetActivityTaskStartedEventAttributes() {
    if err := oprot.WriteFieldBegin("activityTaskStartedEventAttributes", thrift.STRUCT, 75); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 75:activityTaskStartedEventAttributes: ", p), err) }
    if err := p.ActivityTaskStartedEventAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ActivityTaskStartedEventAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 75:activityTaskStartedEventAttributes: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) writeField80(oprot thrift.TProtocol) (err error) {
  if p.IsSetActivityTaskCompletedEventAttributes() {
    if err := oprot.WriteFieldBegin("activityTaskCompletedEventAttributes", thrift.STRUCT, 80); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 80:activityTaskCompletedEventAttributes: ", p), err) }
    if err := p.ActivityTaskCompletedEventAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ActivityTaskCompletedEventAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 80:activityTaskCompletedEventAttributes: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) writeField85(oprot thrift.TProtocol) (err error) {
  if p.IsSetActivityTaskFailedEventAttributes() {
    if err := oprot.WriteFieldBegin("activityTaskFailedEventAttributes", thrift.STRUCT, 85); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 85:activityTaskFailedEventAttributes: ", p), err) }
    if err := p.ActivityTaskFailedEventAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ActivityTaskFailedEventAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 85:activityTaskFailedEventAttributes: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) writeField90(oprot thrift.TProtocol) (err error) {
  if p.IsSetActivityTaskTimedOutEventAttributes() {
    if err := oprot.WriteFieldBegin("activityTaskTimedOutEventAttributes", thrift.STRUCT, 90); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 90:activityTaskTimedOutEventAttributes: ", p), err) }
    if err := p.ActivityTaskTimedOutEventAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ActivityTaskTimedOutEventAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 90:activityTaskTimedOutEventAttributes: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) writeField95(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimerStartedEventAttributes() {
    if err := oprot.WriteFieldBegin("timerStartedEventAttributes", thrift.STRUCT, 95); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 95:timerStartedEventAttributes: ", p), err) }
    if err := p.TimerStartedEventAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TimerStartedEventAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 95:timerStartedEventAttributes: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) writeField100(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimerFiredEventAttributes() {
    if err := oprot.WriteFieldBegin("timerFiredEventAttributes", thrift.STRUCT, 100); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 100:timerFiredEventAttributes: ", p), err) }
    if err := p.TimerFiredEventAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TimerFiredEventAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 100:timerFiredEventAttributes: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) writeField105(oprot thrift.TProtocol) (err error) {
  if p.IsSetCompleteWorkflowExecutionFailedEventAttributes() {
    if err := oprot.WriteFieldBegin("completeWorkflowExecutionFailedEventAttributes", thrift.STRUCT, 105); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 105:completeWorkflowExecutionFailedEventAttributes: ", p), err) }
    if err := p.CompleteWorkflowExecutionFailedEventAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CompleteWorkflowExecutionFailedEventAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 105:completeWorkflowExecutionFailedEventAttributes: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) writeField110(oprot thrift.TProtocol) (err error) {
  if p.IsSetActivityTaskCancelRequestedEventAttributes() {
    if err := oprot.WriteFieldBegin("activityTaskCancelRequestedEventAttributes", thrift.STRUCT, 110); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 110:activityTaskCancelRequestedEventAttributes: ", p), err) }
    if err := p.ActivityTaskCancelRequestedEventAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ActivityTaskCancelRequestedEventAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 110:activityTaskCancelRequestedEventAttributes: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) writeField120(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestCancelActivityTaskFailedEventAttributes() {
    if err := oprot.WriteFieldBegin("requestCancelActivityTaskFailedEventAttributes", thrift.STRUCT, 120); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 120:requestCancelActivityTaskFailedEventAttributes: ", p), err) }
    if err := p.RequestCancelActivityTaskFailedEventAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestCancelActivityTaskFailedEventAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 120:requestCancelActivityTaskFailedEventAttributes: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) writeField130(oprot thrift.TProtocol) (err error) {
  if p.IsSetActivityTaskCanceledEventAttributes() {
    if err := oprot.WriteFieldBegin("activityTaskCanceledEventAttributes", thrift.STRUCT, 130); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 130:activityTaskCanceledEventAttributes: ", p), err) }
    if err := p.ActivityTaskCanceledEventAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ActivityTaskCanceledEventAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 130:activityTaskCanceledEventAttributes: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) writeField140(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimerCanceledEventAttributes() {
    if err := oprot.WriteFieldBegin("timerCanceledEventAttributes", thrift.STRUCT, 140); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 140:timerCanceledEventAttributes: ", p), err) }
    if err := p.TimerCanceledEventAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TimerCanceledEventAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 140:timerCanceledEventAttributes: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) writeField150(oprot thrift.TProtocol) (err error) {
  if p.IsSetCancelTimerFailedEventAttributes() {
    if err := oprot.WriteFieldBegin("cancelTimerFailedEventAttributes", thrift.STRUCT, 150); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 150:cancelTimerFailedEventAttributes: ", p), err) }
    if err := p.CancelTimerFailedEventAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CancelTimerFailedEventAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 150:cancelTimerFailedEventAttributes: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) writeField160(oprot thrift.TProtocol) (err error) {
  if p.IsSetMarkerRecordedEventAttributes() {
    if err := oprot.WriteFieldBegin("markerRecordedEventAttributes", thrift.STRUCT, 160); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 160:markerRecordedEventAttributes: ", p), err) }
    if err := p.MarkerRecordedEventAttributes.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MarkerRecordedEventAttributes), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 160:markerRecordedEventAttributes: ", p), err) }
  }
  return err
}

func (p *HistoryEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HistoryEvent(%+v)", *p)
}

// Attributes:
//  - Events
type History struct {
  // unused fields # 1 to 9
  Events []*HistoryEvent `thrift:"events,10" db:"events" json:"events,omitempty"`
}

func NewHistory() *History {
  return &History{}
}

var History_Events_DEFAULT []*HistoryEvent

func (p *History) GetEvents() []*HistoryEvent {
  return p.Events
}
func (p *History) IsSetEvents() bool {
  return p.Events != nil
}

func (p *History) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *History)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HistoryEvent, 0, size)
  p.Events =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &HistoryEvent{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Events = append(p.Events, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *History) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("History"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *History) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetEvents() {
    if err := oprot.WriteFieldBegin("events", thrift.LIST, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:events: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Events)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Events {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:events: ", p), err) }
  }
  return err
}

func (p *History) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("History(%+v)", *p)
}

// Attributes:
//  - Name
//  - Status
//  - Description
//  - OwnerEmail
type DomainInfo struct {
  // unused fields # 1 to 9
  Name *string `thrift:"name,10" db:"name" json:"name,omitempty"`
  // unused fields # 11 to 19
  Status *DomainStatus `thrift:"status,20" db:"status" json:"status,omitempty"`
  // unused fields # 21 to 29
  Description *string `thrift:"description,30" db:"description" json:"description,omitempty"`
  // unused fields # 31 to 39
  OwnerEmail *string `thrift:"ownerEmail,40" db:"ownerEmail" json:"ownerEmail,omitempty"`
}

func NewDomainInfo() *DomainInfo {
  return &DomainInfo{}
}

var DomainInfo_Name_DEFAULT string
func (p *DomainInfo) GetName() string {
  if !p.IsSetName() {
    return DomainInfo_Name_DEFAULT
  }
return *p.Name
}
var DomainInfo_Status_DEFAULT DomainStatus
func (p *DomainInfo) GetStatus() DomainStatus {
  if !p.IsSetStatus() {
    return DomainInfo_Status_DEFAULT
  }
return *p.Status
}
var DomainInfo_Description_DEFAULT string
func (p *DomainInfo) GetDescription() string {
  if !p.IsSetDescription() {
    return DomainInfo_Description_DEFAULT
  }
return *p.Description
}
var DomainInfo_OwnerEmail_DEFAULT string
func (p *DomainInfo) GetOwnerEmail() string {
  if !p.IsSetOwnerEmail() {
    return DomainInfo_OwnerEmail_DEFAULT
  }
return *p.OwnerEmail
}
func (p *DomainInfo) IsSetName() bool {
  return p.Name != nil
}

func (p *DomainInfo) IsSetStatus() bool {
  return p.Status != nil
}

func (p *DomainInfo) IsSetDescription() bool {
  return p.Description != nil
}

func (p *DomainInfo) IsSetOwnerEmail() bool {
  return p.OwnerEmail != nil
}

func (p *DomainInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DomainInfo)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *DomainInfo)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  temp := DomainStatus(v)
  p.Status = &temp
}
  return nil
}

func (p *DomainInfo)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.Description = &v
}
  return nil
}

func (p *DomainInfo)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.OwnerEmail = &v
}
  return nil
}

func (p *DomainInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DomainInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DomainInfo) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:name: ", p), err) }
  }
  return err
}

func (p *DomainInfo) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.I32, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:status: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:status: ", p), err) }
  }
  return err
}

func (p *DomainInfo) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetDescription() {
    if err := oprot.WriteFieldBegin("description", thrift.STRING, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:description: ", p), err) }
    if err := oprot.WriteString(string(*p.Description)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.description (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:description: ", p), err) }
  }
  return err
}

func (p *DomainInfo) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetOwnerEmail() {
    if err := oprot.WriteFieldBegin("ownerEmail", thrift.STRING, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:ownerEmail: ", p), err) }
    if err := oprot.WriteString(string(*p.OwnerEmail)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ownerEmail (40) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:ownerEmail: ", p), err) }
  }
  return err
}

func (p *DomainInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DomainInfo(%+v)", *p)
}

// Attributes:
//  - WorkflowExecutionRetentionPeriodInDays
//  - EmitMetric
type DomainConfiguration struct {
  // unused fields # 1 to 9
  WorkflowExecutionRetentionPeriodInDays *int32 `thrift:"workflowExecutionRetentionPeriodInDays,10" db:"workflowExecutionRetentionPeriodInDays" json:"workflowExecutionRetentionPeriodInDays,omitempty"`
  // unused fields # 11 to 19
  EmitMetric *bool `thrift:"emitMetric,20" db:"emitMetric" json:"emitMetric,omitempty"`
}

func NewDomainConfiguration() *DomainConfiguration {
  return &DomainConfiguration{}
}

var DomainConfiguration_WorkflowExecutionRetentionPeriodInDays_DEFAULT int32
func (p *DomainConfiguration) GetWorkflowExecutionRetentionPeriodInDays() int32 {
  if !p.IsSetWorkflowExecutionRetentionPeriodInDays() {
    return DomainConfiguration_WorkflowExecutionRetentionPeriodInDays_DEFAULT
  }
return *p.WorkflowExecutionRetentionPeriodInDays
}
var DomainConfiguration_EmitMetric_DEFAULT bool
func (p *DomainConfiguration) GetEmitMetric() bool {
  if !p.IsSetEmitMetric() {
    return DomainConfiguration_EmitMetric_DEFAULT
  }
return *p.EmitMetric
}
func (p *DomainConfiguration) IsSetWorkflowExecutionRetentionPeriodInDays() bool {
  return p.WorkflowExecutionRetentionPeriodInDays != nil
}

func (p *DomainConfiguration) IsSetEmitMetric() bool {
  return p.EmitMetric != nil
}

func (p *DomainConfiguration) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DomainConfiguration)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.WorkflowExecutionRetentionPeriodInDays = &v
}
  return nil
}

func (p *DomainConfiguration)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.EmitMetric = &v
}
  return nil
}

func (p *DomainConfiguration) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DomainConfiguration"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DomainConfiguration) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetWorkflowExecutionRetentionPeriodInDays() {
    if err := oprot.WriteFieldBegin("workflowExecutionRetentionPeriodInDays", thrift.I32, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:workflowExecutionRetentionPeriodInDays: ", p), err) }
    if err := oprot.WriteI32(int32(*p.WorkflowExecutionRetentionPeriodInDays)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.workflowExecutionRetentionPeriodInDays (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:workflowExecutionRetentionPeriodInDays: ", p), err) }
  }
  return err
}

func (p *DomainConfiguration) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmitMetric() {
    if err := oprot.WriteFieldBegin("emitMetric", thrift.BOOL, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:emitMetric: ", p), err) }
    if err := oprot.WriteBool(bool(*p.EmitMetric)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.emitMetric (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:emitMetric: ", p), err) }
  }
  return err
}

func (p *DomainConfiguration) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DomainConfiguration(%+v)", *p)
}

// Attributes:
//  - Description
//  - OwnerEmail
type UpdateDomainInfo struct {
  // unused fields # 1 to 9
  Description *string `thrift:"description,10" db:"description" json:"description,omitempty"`
  // unused fields # 11 to 19
  OwnerEmail *string `thrift:"ownerEmail,20" db:"ownerEmail" json:"ownerEmail,omitempty"`
}

func NewUpdateDomainInfo() *UpdateDomainInfo {
  return &UpdateDomainInfo{}
}

var UpdateDomainInfo_Description_DEFAULT string
func (p *UpdateDomainInfo) GetDescription() string {
  if !p.IsSetDescription() {
    return UpdateDomainInfo_Description_DEFAULT
  }
return *p.Description
}
var UpdateDomainInfo_OwnerEmail_DEFAULT string
func (p *UpdateDomainInfo) GetOwnerEmail() string {
  if !p.IsSetOwnerEmail() {
    return UpdateDomainInfo_OwnerEmail_DEFAULT
  }
return *p.OwnerEmail
}
func (p *UpdateDomainInfo) IsSetDescription() bool {
  return p.Description != nil
}

func (p *UpdateDomainInfo) IsSetOwnerEmail() bool {
  return p.OwnerEmail != nil
}

func (p *UpdateDomainInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateDomainInfo)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Description = &v
}
  return nil
}

func (p *UpdateDomainInfo)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.OwnerEmail = &v
}
  return nil
}

func (p *UpdateDomainInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateDomainInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateDomainInfo) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDescription() {
    if err := oprot.WriteFieldBegin("description", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:description: ", p), err) }
    if err := oprot.WriteString(string(*p.Description)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.description (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:description: ", p), err) }
  }
  return err
}

func (p *UpdateDomainInfo) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetOwnerEmail() {
    if err := oprot.WriteFieldBegin("ownerEmail", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:ownerEmail: ", p), err) }
    if err := oprot.WriteString(string(*p.OwnerEmail)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ownerEmail (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:ownerEmail: ", p), err) }
  }
  return err
}

func (p *UpdateDomainInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateDomainInfo(%+v)", *p)
}

// Attributes:
//  - Name
//  - Description
//  - WorkflowExecutionRetentionPeriodInDays
//  - EmitMetric
type RegisterDomainRequest struct {
  // unused fields # 1 to 9
  Name *string `thrift:"name,10" db:"name" json:"name,omitempty"`
  // unused fields # 11 to 19
  Description *string `thrift:"description,20" db:"description" json:"description,omitempty"`
  // unused fields # 21 to 29
  WorkflowExecutionRetentionPeriodInDays *int32 `thrift:"workflowExecutionRetentionPeriodInDays,30" db:"workflowExecutionRetentionPeriodInDays" json:"workflowExecutionRetentionPeriodInDays,omitempty"`
  // unused fields # 31 to 39
  EmitMetric *bool `thrift:"emitMetric,40" db:"emitMetric" json:"emitMetric,omitempty"`
}

func NewRegisterDomainRequest() *RegisterDomainRequest {
  return &RegisterDomainRequest{}
}

var RegisterDomainRequest_Name_DEFAULT string
func (p *RegisterDomainRequest) GetName() string {
  if !p.IsSetName() {
    return RegisterDomainRequest_Name_DEFAULT
  }
return *p.Name
}
var RegisterDomainRequest_Description_DEFAULT string
func (p *RegisterDomainRequest) GetDescription() string {
  if !p.IsSetDescription() {
    return RegisterDomainRequest_Description_DEFAULT
  }
return *p.Description
}
var RegisterDomainRequest_WorkflowExecutionRetentionPeriodInDays_DEFAULT int32
func (p *RegisterDomainRequest) GetWorkflowExecutionRetentionPeriodInDays() int32 {
  if !p.IsSetWorkflowExecutionRetentionPeriodInDays() {
    return RegisterDomainRequest_WorkflowExecutionRetentionPeriodInDays_DEFAULT
  }
return *p.WorkflowExecutionRetentionPeriodInDays
}
var RegisterDomainRequest_EmitMetric_DEFAULT bool
func (p *RegisterDomainRequest) GetEmitMetric() bool {
  if !p.IsSetEmitMetric() {
    return RegisterDomainRequest_EmitMetric_DEFAULT
  }
return *p.EmitMetric
}
func (p *RegisterDomainRequest) IsSetName() bool {
  return p.Name != nil
}

func (p *RegisterDomainRequest) IsSetDescription() bool {
  return p.Description != nil
}

func (p *RegisterDomainRequest) IsSetWorkflowExecutionRetentionPeriodInDays() bool {
  return p.WorkflowExecutionRetentionPeriodInDays != nil
}

func (p *RegisterDomainRequest) IsSetEmitMetric() bool {
  return p.EmitMetric != nil
}

func (p *RegisterDomainRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RegisterDomainRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *RegisterDomainRequest)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Description = &v
}
  return nil
}

func (p *RegisterDomainRequest)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.WorkflowExecutionRetentionPeriodInDays = &v
}
  return nil
}

func (p *RegisterDomainRequest)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.EmitMetric = &v
}
  return nil
}

func (p *RegisterDomainRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RegisterDomainRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegisterDomainRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:name: ", p), err) }
  }
  return err
}

func (p *RegisterDomainRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetDescription() {
    if err := oprot.WriteFieldBegin("description", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:description: ", p), err) }
    if err := oprot.WriteString(string(*p.Description)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.description (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:description: ", p), err) }
  }
  return err
}

func (p *RegisterDomainRequest) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetWorkflowExecutionRetentionPeriodInDays() {
    if err := oprot.WriteFieldBegin("workflowExecutionRetentionPeriodInDays", thrift.I32, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:workflowExecutionRetentionPeriodInDays: ", p), err) }
    if err := oprot.WriteI32(int32(*p.WorkflowExecutionRetentionPeriodInDays)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.workflowExecutionRetentionPeriodInDays (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:workflowExecutionRetentionPeriodInDays: ", p), err) }
  }
  return err
}

func (p *RegisterDomainRequest) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmitMetric() {
    if err := oprot.WriteFieldBegin("emitMetric", thrift.BOOL, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:emitMetric: ", p), err) }
    if err := oprot.WriteBool(bool(*p.EmitMetric)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.emitMetric (40) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:emitMetric: ", p), err) }
  }
  return err
}

func (p *RegisterDomainRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegisterDomainRequest(%+v)", *p)
}

// Attributes:
//  - Name
type DescribeDomainRequest struct {
  // unused fields # 1 to 9
  Name *string `thrift:"name,10" db:"name" json:"name,omitempty"`
}

func NewDescribeDomainRequest() *DescribeDomainRequest {
  return &DescribeDomainRequest{}
}

var DescribeDomainRequest_Name_DEFAULT string
func (p *DescribeDomainRequest) GetName() string {
  if !p.IsSetName() {
    return DescribeDomainRequest_Name_DEFAULT
  }
return *p.Name
}
func (p *DescribeDomainRequest) IsSetName() bool {
  return p.Name != nil
}

func (p *DescribeDomainRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DescribeDomainRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *DescribeDomainRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DescribeDomainRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DescribeDomainRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:name: ", p), err) }
  }
  return err
}

func (p *DescribeDomainRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DescribeDomainRequest(%+v)", *p)
}

// Attributes:
//  - DomainInfo
//  - Configuration
type DescribeDomainResponse struct {
  // unused fields # 1 to 9
  DomainInfo *DomainInfo `thrift:"domainInfo,10" db:"domainInfo" json:"domainInfo,omitempty"`
  // unused fields # 11 to 19
  Configuration *DomainConfiguration `thrift:"configuration,20" db:"configuration" json:"configuration,omitempty"`
}

func NewDescribeDomainResponse() *DescribeDomainResponse {
  return &DescribeDomainResponse{}
}

var DescribeDomainResponse_DomainInfo_DEFAULT *DomainInfo
func (p *DescribeDomainResponse) GetDomainInfo() *DomainInfo {
  if !p.IsSetDomainInfo() {
    return DescribeDomainResponse_DomainInfo_DEFAULT
  }
return p.DomainInfo
}
var DescribeDomainResponse_Configuration_DEFAULT *DomainConfiguration
func (p *DescribeDomainResponse) GetConfiguration() *DomainConfiguration {
  if !p.IsSetConfiguration() {
    return DescribeDomainResponse_Configuration_DEFAULT
  }
return p.Configuration
}
func (p *DescribeDomainResponse) IsSetDomainInfo() bool {
  return p.DomainInfo != nil
}

func (p *DescribeDomainResponse) IsSetConfiguration() bool {
  return p.Configuration != nil
}

func (p *DescribeDomainResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DescribeDomainResponse)  ReadField10(iprot thrift.TProtocol) error {
  p.DomainInfo = &DomainInfo{}
  if err := p.DomainInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DomainInfo), err)
  }
  return nil
}

func (p *DescribeDomainResponse)  ReadField20(iprot thrift.TProtocol) error {
  p.Configuration = &DomainConfiguration{}
  if err := p.Configuration.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Configuration), err)
  }
  return nil
}

func (p *DescribeDomainResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DescribeDomainResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DescribeDomainResponse) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainInfo() {
    if err := oprot.WriteFieldBegin("domainInfo", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:domainInfo: ", p), err) }
    if err := p.DomainInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DomainInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:domainInfo: ", p), err) }
  }
  return err
}

func (p *DescribeDomainResponse) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetConfiguration() {
    if err := oprot.WriteFieldBegin("configuration", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:configuration: ", p), err) }
    if err := p.Configuration.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Configuration), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:configuration: ", p), err) }
  }
  return err
}

func (p *DescribeDomainResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DescribeDomainResponse(%+v)", *p)
}

// Attributes:
//  - Name
//  - UpdatedInfo
//  - Configuration
type UpdateDomainRequest struct {
  // unused fields # 1 to 9
  Name *string `thrift:"name,10" db:"name" json:"name,omitempty"`
  // unused fields # 11 to 19
  UpdatedInfo *UpdateDomainInfo `thrift:"updatedInfo,20" db:"updatedInfo" json:"updatedInfo,omitempty"`
  // unused fields # 21 to 29
  Configuration *DomainConfiguration `thrift:"configuration,30" db:"configuration" json:"configuration,omitempty"`
}

func NewUpdateDomainRequest() *UpdateDomainRequest {
  return &UpdateDomainRequest{}
}

var UpdateDomainRequest_Name_DEFAULT string
func (p *UpdateDomainRequest) GetName() string {
  if !p.IsSetName() {
    return UpdateDomainRequest_Name_DEFAULT
  }
return *p.Name
}
var UpdateDomainRequest_UpdatedInfo_DEFAULT *UpdateDomainInfo
func (p *UpdateDomainRequest) GetUpdatedInfo() *UpdateDomainInfo {
  if !p.IsSetUpdatedInfo() {
    return UpdateDomainRequest_UpdatedInfo_DEFAULT
  }
return p.UpdatedInfo
}
var UpdateDomainRequest_Configuration_DEFAULT *DomainConfiguration
func (p *UpdateDomainRequest) GetConfiguration() *DomainConfiguration {
  if !p.IsSetConfiguration() {
    return UpdateDomainRequest_Configuration_DEFAULT
  }
return p.Configuration
}
func (p *UpdateDomainRequest) IsSetName() bool {
  return p.Name != nil
}

func (p *UpdateDomainRequest) IsSetUpdatedInfo() bool {
  return p.UpdatedInfo != nil
}

func (p *UpdateDomainRequest) IsSetConfiguration() bool {
  return p.Configuration != nil
}

func (p *UpdateDomainRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateDomainRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *UpdateDomainRequest)  ReadField20(iprot thrift.TProtocol) error {
  p.UpdatedInfo = &UpdateDomainInfo{}
  if err := p.UpdatedInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdatedInfo), err)
  }
  return nil
}

func (p *UpdateDomainRequest)  ReadField30(iprot thrift.TProtocol) error {
  p.Configuration = &DomainConfiguration{}
  if err := p.Configuration.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Configuration), err)
  }
  return nil
}

func (p *UpdateDomainRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateDomainRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateDomainRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:name: ", p), err) }
  }
  return err
}

func (p *UpdateDomainRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetUpdatedInfo() {
    if err := oprot.WriteFieldBegin("updatedInfo", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:updatedInfo: ", p), err) }
    if err := p.UpdatedInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdatedInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:updatedInfo: ", p), err) }
  }
  return err
}

func (p *UpdateDomainRequest) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetConfiguration() {
    if err := oprot.WriteFieldBegin("configuration", thrift.STRUCT, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:configuration: ", p), err) }
    if err := p.Configuration.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Configuration), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:configuration: ", p), err) }
  }
  return err
}

func (p *UpdateDomainRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateDomainRequest(%+v)", *p)
}

// Attributes:
//  - DomainInfo
//  - Configuration
type UpdateDomainResponse struct {
  // unused fields # 1 to 9
  DomainInfo *DomainInfo `thrift:"domainInfo,10" db:"domainInfo" json:"domainInfo,omitempty"`
  // unused fields # 11 to 19
  Configuration *DomainConfiguration `thrift:"configuration,20" db:"configuration" json:"configuration,omitempty"`
}

func NewUpdateDomainResponse() *UpdateDomainResponse {
  return &UpdateDomainResponse{}
}

var UpdateDomainResponse_DomainInfo_DEFAULT *DomainInfo
func (p *UpdateDomainResponse) GetDomainInfo() *DomainInfo {
  if !p.IsSetDomainInfo() {
    return UpdateDomainResponse_DomainInfo_DEFAULT
  }
return p.DomainInfo
}
var UpdateDomainResponse_Configuration_DEFAULT *DomainConfiguration
func (p *UpdateDomainResponse) GetConfiguration() *DomainConfiguration {
  if !p.IsSetConfiguration() {
    return UpdateDomainResponse_Configuration_DEFAULT
  }
return p.Configuration
}
func (p *UpdateDomainResponse) IsSetDomainInfo() bool {
  return p.DomainInfo != nil
}

func (p *UpdateDomainResponse) IsSetConfiguration() bool {
  return p.Configuration != nil
}

func (p *UpdateDomainResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateDomainResponse)  ReadField10(iprot thrift.TProtocol) error {
  p.DomainInfo = &DomainInfo{}
  if err := p.DomainInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DomainInfo), err)
  }
  return nil
}

func (p *UpdateDomainResponse)  ReadField20(iprot thrift.TProtocol) error {
  p.Configuration = &DomainConfiguration{}
  if err := p.Configuration.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Configuration), err)
  }
  return nil
}

func (p *UpdateDomainResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateDomainResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateDomainResponse) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomainInfo() {
    if err := oprot.WriteFieldBegin("domainInfo", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:domainInfo: ", p), err) }
    if err := p.DomainInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DomainInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:domainInfo: ", p), err) }
  }
  return err
}

func (p *UpdateDomainResponse) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetConfiguration() {
    if err := oprot.WriteFieldBegin("configuration", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:configuration: ", p), err) }
    if err := p.Configuration.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Configuration), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:configuration: ", p), err) }
  }
  return err
}

func (p *UpdateDomainResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateDomainResponse(%+v)", *p)
}

// Attributes:
//  - Name
type DeprecateDomainRequest struct {
  // unused fields # 1 to 9
  Name *string `thrift:"name,10" db:"name" json:"name,omitempty"`
}

func NewDeprecateDomainRequest() *DeprecateDomainRequest {
  return &DeprecateDomainRequest{}
}

var DeprecateDomainRequest_Name_DEFAULT string
func (p *DeprecateDomainRequest) GetName() string {
  if !p.IsSetName() {
    return DeprecateDomainRequest_Name_DEFAULT
  }
return *p.Name
}
func (p *DeprecateDomainRequest) IsSetName() bool {
  return p.Name != nil
}

func (p *DeprecateDomainRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeprecateDomainRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *DeprecateDomainRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeprecateDomainRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeprecateDomainRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:name: ", p), err) }
  }
  return err
}

func (p *DeprecateDomainRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeprecateDomainRequest(%+v)", *p)
}

// Attributes:
//  - Domain
//  - WorkflowId
//  - WorkflowType
//  - TaskList
//  - Input
//  - ExecutionStartToCloseTimeoutSeconds
//  - TaskStartToCloseTimeoutSeconds
//  - Identity
//  - RequestId
type StartWorkflowExecutionRequest struct {
  // unused fields # 1 to 9
  Domain *string `thrift:"domain,10" db:"domain" json:"domain,omitempty"`
  // unused fields # 11 to 19
  WorkflowId *string `thrift:"workflowId,20" db:"workflowId" json:"workflowId,omitempty"`
  // unused fields # 21 to 29
  WorkflowType *WorkflowType `thrift:"workflowType,30" db:"workflowType" json:"workflowType,omitempty"`
  // unused fields # 31 to 39
  TaskList *TaskList `thrift:"taskList,40" db:"taskList" json:"taskList,omitempty"`
  // unused fields # 41 to 49
  Input []byte `thrift:"input,50" db:"input" json:"input,omitempty"`
  // unused fields # 51 to 59
  ExecutionStartToCloseTimeoutSeconds *int32 `thrift:"executionStartToCloseTimeoutSeconds,60" db:"executionStartToCloseTimeoutSeconds" json:"executionStartToCloseTimeoutSeconds,omitempty"`
  // unused fields # 61 to 69
  TaskStartToCloseTimeoutSeconds *int32 `thrift:"taskStartToCloseTimeoutSeconds,70" db:"taskStartToCloseTimeoutSeconds" json:"taskStartToCloseTimeoutSeconds,omitempty"`
  // unused fields # 71 to 79
  Identity *string `thrift:"identity,80" db:"identity" json:"identity,omitempty"`
  // unused fields # 81 to 89
  RequestId *string `thrift:"requestId,90" db:"requestId" json:"requestId,omitempty"`
}

func NewStartWorkflowExecutionRequest() *StartWorkflowExecutionRequest {
  return &StartWorkflowExecutionRequest{}
}

var StartWorkflowExecutionRequest_Domain_DEFAULT string
func (p *StartWorkflowExecutionRequest) GetDomain() string {
  if !p.IsSetDomain() {
    return StartWorkflowExecutionRequest_Domain_DEFAULT
  }
return *p.Domain
}
var StartWorkflowExecutionRequest_WorkflowId_DEFAULT string
func (p *StartWorkflowExecutionRequest) GetWorkflowId() string {
  if !p.IsSetWorkflowId() {
    return StartWorkflowExecutionRequest_WorkflowId_DEFAULT
  }
return *p.WorkflowId
}
var StartWorkflowExecutionRequest_WorkflowType_DEFAULT *WorkflowType
func (p *StartWorkflowExecutionRequest) GetWorkflowType() *WorkflowType {
  if !p.IsSetWorkflowType() {
    return StartWorkflowExecutionRequest_WorkflowType_DEFAULT
  }
return p.WorkflowType
}
var StartWorkflowExecutionRequest_TaskList_DEFAULT *TaskList
func (p *StartWorkflowExecutionRequest) GetTaskList() *TaskList {
  if !p.IsSetTaskList() {
    return StartWorkflowExecutionRequest_TaskList_DEFAULT
  }
return p.TaskList
}
var StartWorkflowExecutionRequest_Input_DEFAULT []byte

func (p *StartWorkflowExecutionRequest) GetInput() []byte {
  return p.Input
}
var StartWorkflowExecutionRequest_ExecutionStartToCloseTimeoutSeconds_DEFAULT int32
func (p *StartWorkflowExecutionRequest) GetExecutionStartToCloseTimeoutSeconds() int32 {
  if !p.IsSetExecutionStartToCloseTimeoutSeconds() {
    return StartWorkflowExecutionRequest_ExecutionStartToCloseTimeoutSeconds_DEFAULT
  }
return *p.ExecutionStartToCloseTimeoutSeconds
}
var StartWorkflowExecutionRequest_TaskStartToCloseTimeoutSeconds_DEFAULT int32
func (p *StartWorkflowExecutionRequest) GetTaskStartToCloseTimeoutSeconds() int32 {
  if !p.IsSetTaskStartToCloseTimeoutSeconds() {
    return StartWorkflowExecutionRequest_TaskStartToCloseTimeoutSeconds_DEFAULT
  }
return *p.TaskStartToCloseTimeoutSeconds
}
var StartWorkflowExecutionRequest_Identity_DEFAULT string
func (p *StartWorkflowExecutionRequest) GetIdentity() string {
  if !p.IsSetIdentity() {
    return StartWorkflowExecutionRequest_Identity_DEFAULT
  }
return *p.Identity
}
var StartWorkflowExecutionRequest_RequestId_DEFAULT string
func (p *StartWorkflowExecutionRequest) GetRequestId() string {
  if !p.IsSetRequestId() {
    return StartWorkflowExecutionRequest_RequestId_DEFAULT
  }
return *p.RequestId
}
func (p *StartWorkflowExecutionRequest) IsSetDomain() bool {
  return p.Domain != nil
}

func (p *StartWorkflowExecutionRequest) IsSetWorkflowId() bool {
  return p.WorkflowId != nil
}

func (p *StartWorkflowExecutionRequest) IsSetWorkflowType() bool {
  return p.WorkflowType != nil
}

func (p *StartWorkflowExecutionRequest) IsSetTaskList() bool {
  return p.TaskList != nil
}

func (p *StartWorkflowExecutionRequest) IsSetInput() bool {
  return p.Input != nil
}

func (p *StartWorkflowExecutionRequest) IsSetExecutionStartToCloseTimeoutSeconds() bool {
  return p.ExecutionStartToCloseTimeoutSeconds != nil
}

func (p *StartWorkflowExecutionRequest) IsSetTaskStartToCloseTimeoutSeconds() bool {
  return p.TaskStartToCloseTimeoutSeconds != nil
}

func (p *StartWorkflowExecutionRequest) IsSetIdentity() bool {
  return p.Identity != nil
}

func (p *StartWorkflowExecutionRequest) IsSetRequestId() bool {
  return p.RequestId != nil
}

func (p *StartWorkflowExecutionRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    case 50:
      if err := p.ReadField50(iprot); err != nil {
        return err
      }
    case 60:
      if err := p.ReadField60(iprot); err != nil {
        return err
      }
    case 70:
      if err := p.ReadField70(iprot); err != nil {
        return err
      }
    case 80:
      if err := p.ReadField80(iprot); err != nil {
        return err
      }
    case 90:
      if err := p.ReadField90(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StartWorkflowExecutionRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Domain = &v
}
  return nil
}

func (p *StartWorkflowExecutionRequest)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.WorkflowId = &v
}
  return nil
}

func (p *StartWorkflowExecutionRequest)  ReadField30(iprot thrift.TProtocol) error {
  p.WorkflowType = &WorkflowType{}
  if err := p.WorkflowType.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WorkflowType), err)
  }
  return nil
}

func (p *StartWorkflowExecutionRequest)  ReadField40(iprot thrift.TProtocol) error {
  p.TaskList = &TaskList{}
  if err := p.TaskList.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TaskList), err)
  }
  return nil
}

func (p *StartWorkflowExecutionRequest)  ReadField50(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 50: ", err)
} else {
  p.Input = v
}
  return nil
}

func (p *StartWorkflowExecutionRequest)  ReadField60(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 60: ", err)
} else {
  p.ExecutionStartToCloseTimeoutSeconds = &v
}
  return nil
}

func (p *StartWorkflowExecutionRequest)  ReadField70(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 70: ", err)
} else {
  p.TaskStartToCloseTimeoutSeconds = &v
}
  return nil
}

func (p *StartWorkflowExecutionRequest)  ReadField80(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 80: ", err)
} else {
  p.Identity = &v
}
  return nil
}

func (p *StartWorkflowExecutionRequest)  ReadField90(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 90: ", err)
} else {
  p.RequestId = &v
}
  return nil
}

func (p *StartWorkflowExecutionRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("StartWorkflowExecutionRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField50(oprot); err != nil { return err }
    if err := p.writeField60(oprot); err != nil { return err }
    if err := p.writeField70(oprot); err != nil { return err }
    if err := p.writeField80(oprot); err != nil { return err }
    if err := p.writeField90(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StartWorkflowExecutionRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomain() {
    if err := oprot.WriteFieldBegin("domain", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:domain: ", p), err) }
    if err := oprot.WriteString(string(*p.Domain)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domain (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:domain: ", p), err) }
  }
  return err
}

func (p *StartWorkflowExecutionRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetWorkflowId() {
    if err := oprot.WriteFieldBegin("workflowId", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:workflowId: ", p), err) }
    if err := oprot.WriteString(string(*p.WorkflowId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.workflowId (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:workflowId: ", p), err) }
  }
  return err
}

func (p *StartWorkflowExecutionRequest) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetWorkflowType() {
    if err := oprot.WriteFieldBegin("workflowType", thrift.STRUCT, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:workflowType: ", p), err) }
    if err := p.WorkflowType.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WorkflowType), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:workflowType: ", p), err) }
  }
  return err
}

func (p *StartWorkflowExecutionRequest) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskList() {
    if err := oprot.WriteFieldBegin("taskList", thrift.STRUCT, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:taskList: ", p), err) }
    if err := p.TaskList.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TaskList), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:taskList: ", p), err) }
  }
  return err
}

func (p *StartWorkflowExecutionRequest) writeField50(oprot thrift.TProtocol) (err error) {
  if p.IsSetInput() {
    if err := oprot.WriteFieldBegin("input", thrift.STRING, 50); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:input: ", p), err) }
    if err := oprot.WriteBinary(p.Input); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.input (50) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 50:input: ", p), err) }
  }
  return err
}

func (p *StartWorkflowExecutionRequest) writeField60(oprot thrift.TProtocol) (err error) {
  if p.IsSetExecutionStartToCloseTimeoutSeconds() {
    if err := oprot.WriteFieldBegin("executionStartToCloseTimeoutSeconds", thrift.I32, 60); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:executionStartToCloseTimeoutSeconds: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ExecutionStartToCloseTimeoutSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.executionStartToCloseTimeoutSeconds (60) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 60:executionStartToCloseTimeoutSeconds: ", p), err) }
  }
  return err
}

func (p *StartWorkflowExecutionRequest) writeField70(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskStartToCloseTimeoutSeconds() {
    if err := oprot.WriteFieldBegin("taskStartToCloseTimeoutSeconds", thrift.I32, 70); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 70:taskStartToCloseTimeoutSeconds: ", p), err) }
    if err := oprot.WriteI32(int32(*p.TaskStartToCloseTimeoutSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.taskStartToCloseTimeoutSeconds (70) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 70:taskStartToCloseTimeoutSeconds: ", p), err) }
  }
  return err
}

func (p *StartWorkflowExecutionRequest) writeField80(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentity() {
    if err := oprot.WriteFieldBegin("identity", thrift.STRING, 80); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 80:identity: ", p), err) }
    if err := oprot.WriteString(string(*p.Identity)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.identity (80) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 80:identity: ", p), err) }
  }
  return err
}

func (p *StartWorkflowExecutionRequest) writeField90(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestId() {
    if err := oprot.WriteFieldBegin("requestId", thrift.STRING, 90); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 90:requestId: ", p), err) }
    if err := oprot.WriteString(string(*p.RequestId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.requestId (90) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 90:requestId: ", p), err) }
  }
  return err
}

func (p *StartWorkflowExecutionRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StartWorkflowExecutionRequest(%+v)", *p)
}

// Attributes:
//  - RunId
type StartWorkflowExecutionResponse struct {
  // unused fields # 1 to 9
  RunId *string `thrift:"runId,10" db:"runId" json:"runId,omitempty"`
}

func NewStartWorkflowExecutionResponse() *StartWorkflowExecutionResponse {
  return &StartWorkflowExecutionResponse{}
}

var StartWorkflowExecutionResponse_RunId_DEFAULT string
func (p *StartWorkflowExecutionResponse) GetRunId() string {
  if !p.IsSetRunId() {
    return StartWorkflowExecutionResponse_RunId_DEFAULT
  }
return *p.RunId
}
func (p *StartWorkflowExecutionResponse) IsSetRunId() bool {
  return p.RunId != nil
}

func (p *StartWorkflowExecutionResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StartWorkflowExecutionResponse)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.RunId = &v
}
  return nil
}

func (p *StartWorkflowExecutionResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("StartWorkflowExecutionResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StartWorkflowExecutionResponse) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetRunId() {
    if err := oprot.WriteFieldBegin("runId", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:runId: ", p), err) }
    if err := oprot.WriteString(string(*p.RunId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.runId (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:runId: ", p), err) }
  }
  return err
}

func (p *StartWorkflowExecutionResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StartWorkflowExecutionResponse(%+v)", *p)
}

// Attributes:
//  - Domain
//  - TaskList
//  - Identity
type PollForDecisionTaskRequest struct {
  // unused fields # 1 to 9
  Domain *string `thrift:"domain,10" db:"domain" json:"domain,omitempty"`
  // unused fields # 11 to 19
  TaskList *TaskList `thrift:"taskList,20" db:"taskList" json:"taskList,omitempty"`
  // unused fields # 21 to 29
  Identity *string `thrift:"identity,30" db:"identity" json:"identity,omitempty"`
}

func NewPollForDecisionTaskRequest() *PollForDecisionTaskRequest {
  return &PollForDecisionTaskRequest{}
}

var PollForDecisionTaskRequest_Domain_DEFAULT string
func (p *PollForDecisionTaskRequest) GetDomain() string {
  if !p.IsSetDomain() {
    return PollForDecisionTaskRequest_Domain_DEFAULT
  }
return *p.Domain
}
var PollForDecisionTaskRequest_TaskList_DEFAULT *TaskList
func (p *PollForDecisionTaskRequest) GetTaskList() *TaskList {
  if !p.IsSetTaskList() {
    return PollForDecisionTaskRequest_TaskList_DEFAULT
  }
return p.TaskList
}
var PollForDecisionTaskRequest_Identity_DEFAULT string
func (p *PollForDecisionTaskRequest) GetIdentity() string {
  if !p.IsSetIdentity() {
    return PollForDecisionTaskRequest_Identity_DEFAULT
  }
return *p.Identity
}
func (p *PollForDecisionTaskRequest) IsSetDomain() bool {
  return p.Domain != nil
}

func (p *PollForDecisionTaskRequest) IsSetTaskList() bool {
  return p.TaskList != nil
}

func (p *PollForDecisionTaskRequest) IsSetIdentity() bool {
  return p.Identity != nil
}

func (p *PollForDecisionTaskRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PollForDecisionTaskRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Domain = &v
}
  return nil
}

func (p *PollForDecisionTaskRequest)  ReadField20(iprot thrift.TProtocol) error {
  p.TaskList = &TaskList{}
  if err := p.TaskList.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TaskList), err)
  }
  return nil
}

func (p *PollForDecisionTaskRequest)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.Identity = &v
}
  return nil
}

func (p *PollForDecisionTaskRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PollForDecisionTaskRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PollForDecisionTaskRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomain() {
    if err := oprot.WriteFieldBegin("domain", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:domain: ", p), err) }
    if err := oprot.WriteString(string(*p.Domain)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domain (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:domain: ", p), err) }
  }
  return err
}

func (p *PollForDecisionTaskRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskList() {
    if err := oprot.WriteFieldBegin("taskList", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:taskList: ", p), err) }
    if err := p.TaskList.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TaskList), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:taskList: ", p), err) }
  }
  return err
}

func (p *PollForDecisionTaskRequest) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentity() {
    if err := oprot.WriteFieldBegin("identity", thrift.STRING, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:identity: ", p), err) }
    if err := oprot.WriteString(string(*p.Identity)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.identity (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:identity: ", p), err) }
  }
  return err
}

func (p *PollForDecisionTaskRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PollForDecisionTaskRequest(%+v)", *p)
}

// Attributes:
//  - TaskToken
//  - WorkflowExecution
//  - WorkflowType
//  - PreviousStartedEventId
//  - StartedEventId
//  - History
type PollForDecisionTaskResponse struct {
  // unused fields # 1 to 9
  TaskToken []byte `thrift:"taskToken,10" db:"taskToken" json:"taskToken,omitempty"`
  // unused fields # 11 to 19
  WorkflowExecution *WorkflowExecution `thrift:"workflowExecution,20" db:"workflowExecution" json:"workflowExecution,omitempty"`
  // unused fields # 21 to 29
  WorkflowType *WorkflowType `thrift:"workflowType,30" db:"workflowType" json:"workflowType,omitempty"`
  // unused fields # 31 to 39
  PreviousStartedEventId *int64 `thrift:"previousStartedEventId,40" db:"previousStartedEventId" json:"previousStartedEventId,omitempty"`
  // unused fields # 41 to 49
  StartedEventId *int64 `thrift:"startedEventId,50" db:"startedEventId" json:"startedEventId,omitempty"`
  // unused fields # 51 to 59
  History *History `thrift:"history,60" db:"history" json:"history,omitempty"`
}

func NewPollForDecisionTaskResponse() *PollForDecisionTaskResponse {
  return &PollForDecisionTaskResponse{}
}

var PollForDecisionTaskResponse_TaskToken_DEFAULT []byte

func (p *PollForDecisionTaskResponse) GetTaskToken() []byte {
  return p.TaskToken
}
var PollForDecisionTaskResponse_WorkflowExecution_DEFAULT *WorkflowExecution
func (p *PollForDecisionTaskResponse) GetWorkflowExecution() *WorkflowExecution {
  if !p.IsSetWorkflowExecution() {
    return PollForDecisionTaskResponse_WorkflowExecution_DEFAULT
  }
return p.WorkflowExecution
}
var PollForDecisionTaskResponse_WorkflowType_DEFAULT *WorkflowType
func (p *PollForDecisionTaskResponse) GetWorkflowType() *WorkflowType {
  if !p.IsSetWorkflowType() {
    return PollForDecisionTaskResponse_WorkflowType_DEFAULT
  }
return p.WorkflowType
}
var PollForDecisionTaskResponse_PreviousStartedEventId_DEFAULT int64
func (p *PollForDecisionTaskResponse) GetPreviousStartedEventId() int64 {
  if !p.IsSetPreviousStartedEventId() {
    return PollForDecisionTaskResponse_PreviousStartedEventId_DEFAULT
  }
return *p.PreviousStartedEventId
}
var PollForDecisionTaskResponse_StartedEventId_DEFAULT int64
func (p *PollForDecisionTaskResponse) GetStartedEventId() int64 {
  if !p.IsSetStartedEventId() {
    return PollForDecisionTaskResponse_StartedEventId_DEFAULT
  }
return *p.StartedEventId
}
var PollForDecisionTaskResponse_History_DEFAULT *History
func (p *PollForDecisionTaskResponse) GetHistory() *History {
  if !p.IsSetHistory() {
    return PollForDecisionTaskResponse_History_DEFAULT
  }
return p.History
}
func (p *PollForDecisionTaskResponse) IsSetTaskToken() bool {
  return p.TaskToken != nil
}

func (p *PollForDecisionTaskResponse) IsSetWorkflowExecution() bool {
  return p.WorkflowExecution != nil
}

func (p *PollForDecisionTaskResponse) IsSetWorkflowType() bool {
  return p.WorkflowType != nil
}

func (p *PollForDecisionTaskResponse) IsSetPreviousStartedEventId() bool {
  return p.PreviousStartedEventId != nil
}

func (p *PollForDecisionTaskResponse) IsSetStartedEventId() bool {
  return p.StartedEventId != nil
}

func (p *PollForDecisionTaskResponse) IsSetHistory() bool {
  return p.History != nil
}

func (p *PollForDecisionTaskResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    case 50:
      if err := p.ReadField50(iprot); err != nil {
        return err
      }
    case 60:
      if err := p.ReadField60(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PollForDecisionTaskResponse)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TaskToken = v
}
  return nil
}

func (p *PollForDecisionTaskResponse)  ReadField20(iprot thrift.TProtocol) error {
  p.WorkflowExecution = &WorkflowExecution{}
  if err := p.WorkflowExecution.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WorkflowExecution), err)
  }
  return nil
}

func (p *PollForDecisionTaskResponse)  ReadField30(iprot thrift.TProtocol) error {
  p.WorkflowType = &WorkflowType{}
  if err := p.WorkflowType.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WorkflowType), err)
  }
  return nil
}

func (p *PollForDecisionTaskResponse)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.PreviousStartedEventId = &v
}
  return nil
}

func (p *PollForDecisionTaskResponse)  ReadField50(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 50: ", err)
} else {
  p.StartedEventId = &v
}
  return nil
}

func (p *PollForDecisionTaskResponse)  ReadField60(iprot thrift.TProtocol) error {
  p.History = &History{}
  if err := p.History.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.History), err)
  }
  return nil
}

func (p *PollForDecisionTaskResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PollForDecisionTaskResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField50(oprot); err != nil { return err }
    if err := p.writeField60(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PollForDecisionTaskResponse) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskToken() {
    if err := oprot.WriteFieldBegin("taskToken", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:taskToken: ", p), err) }
    if err := oprot.WriteBinary(p.TaskToken); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.taskToken (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:taskToken: ", p), err) }
  }
  return err
}

func (p *PollForDecisionTaskResponse) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetWorkflowExecution() {
    if err := oprot.WriteFieldBegin("workflowExecution", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:workflowExecution: ", p), err) }
    if err := p.WorkflowExecution.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WorkflowExecution), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:workflowExecution: ", p), err) }
  }
  return err
}

func (p *PollForDecisionTaskResponse) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetWorkflowType() {
    if err := oprot.WriteFieldBegin("workflowType", thrift.STRUCT, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:workflowType: ", p), err) }
    if err := p.WorkflowType.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WorkflowType), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:workflowType: ", p), err) }
  }
  return err
}

func (p *PollForDecisionTaskResponse) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetPreviousStartedEventId() {
    if err := oprot.WriteFieldBegin("previousStartedEventId", thrift.I64, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:previousStartedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.PreviousStartedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.previousStartedEventId (40) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:previousStartedEventId: ", p), err) }
  }
  return err
}

func (p *PollForDecisionTaskResponse) writeField50(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartedEventId() {
    if err := oprot.WriteFieldBegin("startedEventId", thrift.I64, 50); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:startedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.StartedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startedEventId (50) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 50:startedEventId: ", p), err) }
  }
  return err
}

func (p *PollForDecisionTaskResponse) writeField60(oprot thrift.TProtocol) (err error) {
  if p.IsSetHistory() {
    if err := oprot.WriteFieldBegin("history", thrift.STRUCT, 60); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:history: ", p), err) }
    if err := p.History.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.History), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 60:history: ", p), err) }
  }
  return err
}

func (p *PollForDecisionTaskResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PollForDecisionTaskResponse(%+v)", *p)
}

// Attributes:
//  - TaskToken
//  - Decisions
//  - ExecutionContext
//  - Identity
type RespondDecisionTaskCompletedRequest struct {
  // unused fields # 1 to 9
  TaskToken []byte `thrift:"taskToken,10" db:"taskToken" json:"taskToken,omitempty"`
  // unused fields # 11 to 19
  Decisions []*Decision `thrift:"decisions,20" db:"decisions" json:"decisions,omitempty"`
  // unused fields # 21 to 29
  ExecutionContext []byte `thrift:"executionContext,30" db:"executionContext" json:"executionContext,omitempty"`
  // unused fields # 31 to 39
  Identity *string `thrift:"identity,40" db:"identity" json:"identity,omitempty"`
}

func NewRespondDecisionTaskCompletedRequest() *RespondDecisionTaskCompletedRequest {
  return &RespondDecisionTaskCompletedRequest{}
}

var RespondDecisionTaskCompletedRequest_TaskToken_DEFAULT []byte

func (p *RespondDecisionTaskCompletedRequest) GetTaskToken() []byte {
  return p.TaskToken
}
var RespondDecisionTaskCompletedRequest_Decisions_DEFAULT []*Decision

func (p *RespondDecisionTaskCompletedRequest) GetDecisions() []*Decision {
  return p.Decisions
}
var RespondDecisionTaskCompletedRequest_ExecutionContext_DEFAULT []byte

func (p *RespondDecisionTaskCompletedRequest) GetExecutionContext() []byte {
  return p.ExecutionContext
}
var RespondDecisionTaskCompletedRequest_Identity_DEFAULT string
func (p *RespondDecisionTaskCompletedRequest) GetIdentity() string {
  if !p.IsSetIdentity() {
    return RespondDecisionTaskCompletedRequest_Identity_DEFAULT
  }
return *p.Identity
}
func (p *RespondDecisionTaskCompletedRequest) IsSetTaskToken() bool {
  return p.TaskToken != nil
}

func (p *RespondDecisionTaskCompletedRequest) IsSetDecisions() bool {
  return p.Decisions != nil
}

func (p *RespondDecisionTaskCompletedRequest) IsSetExecutionContext() bool {
  return p.ExecutionContext != nil
}

func (p *RespondDecisionTaskCompletedRequest) IsSetIdentity() bool {
  return p.Identity != nil
}

func (p *RespondDecisionTaskCompletedRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RespondDecisionTaskCompletedRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TaskToken = v
}
  return nil
}

func (p *RespondDecisionTaskCompletedRequest)  ReadField20(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Decision, 0, size)
  p.Decisions =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &Decision{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Decisions = append(p.Decisions, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RespondDecisionTaskCompletedRequest)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.ExecutionContext = v
}
  return nil
}

func (p *RespondDecisionTaskCompletedRequest)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.Identity = &v
}
  return nil
}

func (p *RespondDecisionTaskCompletedRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RespondDecisionTaskCompletedRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RespondDecisionTaskCompletedRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskToken() {
    if err := oprot.WriteFieldBegin("taskToken", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:taskToken: ", p), err) }
    if err := oprot.WriteBinary(p.TaskToken); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.taskToken (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:taskToken: ", p), err) }
  }
  return err
}

func (p *RespondDecisionTaskCompletedRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetDecisions() {
    if err := oprot.WriteFieldBegin("decisions", thrift.LIST, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:decisions: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Decisions)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Decisions {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:decisions: ", p), err) }
  }
  return err
}

func (p *RespondDecisionTaskCompletedRequest) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetExecutionContext() {
    if err := oprot.WriteFieldBegin("executionContext", thrift.STRING, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:executionContext: ", p), err) }
    if err := oprot.WriteBinary(p.ExecutionContext); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.executionContext (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:executionContext: ", p), err) }
  }
  return err
}

func (p *RespondDecisionTaskCompletedRequest) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentity() {
    if err := oprot.WriteFieldBegin("identity", thrift.STRING, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:identity: ", p), err) }
    if err := oprot.WriteString(string(*p.Identity)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.identity (40) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:identity: ", p), err) }
  }
  return err
}

func (p *RespondDecisionTaskCompletedRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RespondDecisionTaskCompletedRequest(%+v)", *p)
}

// Attributes:
//  - Domain
//  - TaskList
//  - Identity
type PollForActivityTaskRequest struct {
  // unused fields # 1 to 9
  Domain *string `thrift:"domain,10" db:"domain" json:"domain,omitempty"`
  // unused fields # 11 to 19
  TaskList *TaskList `thrift:"taskList,20" db:"taskList" json:"taskList,omitempty"`
  // unused fields # 21 to 29
  Identity *string `thrift:"identity,30" db:"identity" json:"identity,omitempty"`
}

func NewPollForActivityTaskRequest() *PollForActivityTaskRequest {
  return &PollForActivityTaskRequest{}
}

var PollForActivityTaskRequest_Domain_DEFAULT string
func (p *PollForActivityTaskRequest) GetDomain() string {
  if !p.IsSetDomain() {
    return PollForActivityTaskRequest_Domain_DEFAULT
  }
return *p.Domain
}
var PollForActivityTaskRequest_TaskList_DEFAULT *TaskList
func (p *PollForActivityTaskRequest) GetTaskList() *TaskList {
  if !p.IsSetTaskList() {
    return PollForActivityTaskRequest_TaskList_DEFAULT
  }
return p.TaskList
}
var PollForActivityTaskRequest_Identity_DEFAULT string
func (p *PollForActivityTaskRequest) GetIdentity() string {
  if !p.IsSetIdentity() {
    return PollForActivityTaskRequest_Identity_DEFAULT
  }
return *p.Identity
}
func (p *PollForActivityTaskRequest) IsSetDomain() bool {
  return p.Domain != nil
}

func (p *PollForActivityTaskRequest) IsSetTaskList() bool {
  return p.TaskList != nil
}

func (p *PollForActivityTaskRequest) IsSetIdentity() bool {
  return p.Identity != nil
}

func (p *PollForActivityTaskRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PollForActivityTaskRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Domain = &v
}
  return nil
}

func (p *PollForActivityTaskRequest)  ReadField20(iprot thrift.TProtocol) error {
  p.TaskList = &TaskList{}
  if err := p.TaskList.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TaskList), err)
  }
  return nil
}

func (p *PollForActivityTaskRequest)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.Identity = &v
}
  return nil
}

func (p *PollForActivityTaskRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PollForActivityTaskRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PollForActivityTaskRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomain() {
    if err := oprot.WriteFieldBegin("domain", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:domain: ", p), err) }
    if err := oprot.WriteString(string(*p.Domain)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domain (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:domain: ", p), err) }
  }
  return err
}

func (p *PollForActivityTaskRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskList() {
    if err := oprot.WriteFieldBegin("taskList", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:taskList: ", p), err) }
    if err := p.TaskList.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TaskList), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:taskList: ", p), err) }
  }
  return err
}

func (p *PollForActivityTaskRequest) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentity() {
    if err := oprot.WriteFieldBegin("identity", thrift.STRING, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:identity: ", p), err) }
    if err := oprot.WriteString(string(*p.Identity)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.identity (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:identity: ", p), err) }
  }
  return err
}

func (p *PollForActivityTaskRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PollForActivityTaskRequest(%+v)", *p)
}

// Attributes:
//  - TaskToken
//  - WorkflowExecution
//  - ActivityId
//  - ActivityType
//  - Input
//  - StartedEventId
type PollForActivityTaskResponse struct {
  // unused fields # 1 to 9
  TaskToken []byte `thrift:"taskToken,10" db:"taskToken" json:"taskToken,omitempty"`
  // unused fields # 11 to 19
  WorkflowExecution *WorkflowExecution `thrift:"workflowExecution,20" db:"workflowExecution" json:"workflowExecution,omitempty"`
  // unused fields # 21 to 29
  ActivityId *string `thrift:"activityId,30" db:"activityId" json:"activityId,omitempty"`
  // unused fields # 31 to 39
  ActivityType *ActivityType `thrift:"activityType,40" db:"activityType" json:"activityType,omitempty"`
  // unused fields # 41 to 49
  Input []byte `thrift:"input,50" db:"input" json:"input,omitempty"`
  // unused fields # 51 to 59
  StartedEventId *int64 `thrift:"startedEventId,60" db:"startedEventId" json:"startedEventId,omitempty"`
}

func NewPollForActivityTaskResponse() *PollForActivityTaskResponse {
  return &PollForActivityTaskResponse{}
}

var PollForActivityTaskResponse_TaskToken_DEFAULT []byte

func (p *PollForActivityTaskResponse) GetTaskToken() []byte {
  return p.TaskToken
}
var PollForActivityTaskResponse_WorkflowExecution_DEFAULT *WorkflowExecution
func (p *PollForActivityTaskResponse) GetWorkflowExecution() *WorkflowExecution {
  if !p.IsSetWorkflowExecution() {
    return PollForActivityTaskResponse_WorkflowExecution_DEFAULT
  }
return p.WorkflowExecution
}
var PollForActivityTaskResponse_ActivityId_DEFAULT string
func (p *PollForActivityTaskResponse) GetActivityId() string {
  if !p.IsSetActivityId() {
    return PollForActivityTaskResponse_ActivityId_DEFAULT
  }
return *p.ActivityId
}
var PollForActivityTaskResponse_ActivityType_DEFAULT *ActivityType
func (p *PollForActivityTaskResponse) GetActivityType() *ActivityType {
  if !p.IsSetActivityType() {
    return PollForActivityTaskResponse_ActivityType_DEFAULT
  }
return p.ActivityType
}
var PollForActivityTaskResponse_Input_DEFAULT []byte

func (p *PollForActivityTaskResponse) GetInput() []byte {
  return p.Input
}
var PollForActivityTaskResponse_StartedEventId_DEFAULT int64
func (p *PollForActivityTaskResponse) GetStartedEventId() int64 {
  if !p.IsSetStartedEventId() {
    return PollForActivityTaskResponse_StartedEventId_DEFAULT
  }
return *p.StartedEventId
}
func (p *PollForActivityTaskResponse) IsSetTaskToken() bool {
  return p.TaskToken != nil
}

func (p *PollForActivityTaskResponse) IsSetWorkflowExecution() bool {
  return p.WorkflowExecution != nil
}

func (p *PollForActivityTaskResponse) IsSetActivityId() bool {
  return p.ActivityId != nil
}

func (p *PollForActivityTaskResponse) IsSetActivityType() bool {
  return p.ActivityType != nil
}

func (p *PollForActivityTaskResponse) IsSetInput() bool {
  return p.Input != nil
}

func (p *PollForActivityTaskResponse) IsSetStartedEventId() bool {
  return p.StartedEventId != nil
}

func (p *PollForActivityTaskResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    case 50:
      if err := p.ReadField50(iprot); err != nil {
        return err
      }
    case 60:
      if err := p.ReadField60(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PollForActivityTaskResponse)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TaskToken = v
}
  return nil
}

func (p *PollForActivityTaskResponse)  ReadField20(iprot thrift.TProtocol) error {
  p.WorkflowExecution = &WorkflowExecution{}
  if err := p.WorkflowExecution.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WorkflowExecution), err)
  }
  return nil
}

func (p *PollForActivityTaskResponse)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.ActivityId = &v
}
  return nil
}

func (p *PollForActivityTaskResponse)  ReadField40(iprot thrift.TProtocol) error {
  p.ActivityType = &ActivityType{}
  if err := p.ActivityType.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ActivityType), err)
  }
  return nil
}

func (p *PollForActivityTaskResponse)  ReadField50(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 50: ", err)
} else {
  p.Input = v
}
  return nil
}

func (p *PollForActivityTaskResponse)  ReadField60(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 60: ", err)
} else {
  p.StartedEventId = &v
}
  return nil
}

func (p *PollForActivityTaskResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PollForActivityTaskResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField50(oprot); err != nil { return err }
    if err := p.writeField60(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PollForActivityTaskResponse) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskToken() {
    if err := oprot.WriteFieldBegin("taskToken", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:taskToken: ", p), err) }
    if err := oprot.WriteBinary(p.TaskToken); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.taskToken (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:taskToken: ", p), err) }
  }
  return err
}

func (p *PollForActivityTaskResponse) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetWorkflowExecution() {
    if err := oprot.WriteFieldBegin("workflowExecution", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:workflowExecution: ", p), err) }
    if err := p.WorkflowExecution.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WorkflowExecution), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:workflowExecution: ", p), err) }
  }
  return err
}

func (p *PollForActivityTaskResponse) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetActivityId() {
    if err := oprot.WriteFieldBegin("activityId", thrift.STRING, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:activityId: ", p), err) }
    if err := oprot.WriteString(string(*p.ActivityId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.activityId (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:activityId: ", p), err) }
  }
  return err
}

func (p *PollForActivityTaskResponse) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetActivityType() {
    if err := oprot.WriteFieldBegin("activityType", thrift.STRUCT, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:activityType: ", p), err) }
    if err := p.ActivityType.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ActivityType), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:activityType: ", p), err) }
  }
  return err
}

func (p *PollForActivityTaskResponse) writeField50(oprot thrift.TProtocol) (err error) {
  if p.IsSetInput() {
    if err := oprot.WriteFieldBegin("input", thrift.STRING, 50); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:input: ", p), err) }
    if err := oprot.WriteBinary(p.Input); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.input (50) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 50:input: ", p), err) }
  }
  return err
}

func (p *PollForActivityTaskResponse) writeField60(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartedEventId() {
    if err := oprot.WriteFieldBegin("startedEventId", thrift.I64, 60); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:startedEventId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.StartedEventId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startedEventId (60) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 60:startedEventId: ", p), err) }
  }
  return err
}

func (p *PollForActivityTaskResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PollForActivityTaskResponse(%+v)", *p)
}

// Attributes:
//  - TaskToken
//  - Details
//  - Identity
type RecordActivityTaskHeartbeatRequest struct {
  // unused fields # 1 to 9
  TaskToken []byte `thrift:"taskToken,10" db:"taskToken" json:"taskToken,omitempty"`
  // unused fields # 11 to 19
  Details []byte `thrift:"details,20" db:"details" json:"details,omitempty"`
  // unused fields # 21 to 29
  Identity *string `thrift:"identity,30" db:"identity" json:"identity,omitempty"`
}

func NewRecordActivityTaskHeartbeatRequest() *RecordActivityTaskHeartbeatRequest {
  return &RecordActivityTaskHeartbeatRequest{}
}

var RecordActivityTaskHeartbeatRequest_TaskToken_DEFAULT []byte

func (p *RecordActivityTaskHeartbeatRequest) GetTaskToken() []byte {
  return p.TaskToken
}
var RecordActivityTaskHeartbeatRequest_Details_DEFAULT []byte

func (p *RecordActivityTaskHeartbeatRequest) GetDetails() []byte {
  return p.Details
}
var RecordActivityTaskHeartbeatRequest_Identity_DEFAULT string
func (p *RecordActivityTaskHeartbeatRequest) GetIdentity() string {
  if !p.IsSetIdentity() {
    return RecordActivityTaskHeartbeatRequest_Identity_DEFAULT
  }
return *p.Identity
}
func (p *RecordActivityTaskHeartbeatRequest) IsSetTaskToken() bool {
  return p.TaskToken != nil
}

func (p *RecordActivityTaskHeartbeatRequest) IsSetDetails() bool {
  return p.Details != nil
}

func (p *RecordActivityTaskHeartbeatRequest) IsSetIdentity() bool {
  return p.Identity != nil
}

func (p *RecordActivityTaskHeartbeatRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RecordActivityTaskHeartbeatRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TaskToken = v
}
  return nil
}

func (p *RecordActivityTaskHeartbeatRequest)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Details = v
}
  return nil
}

func (p *RecordActivityTaskHeartbeatRequest)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.Identity = &v
}
  return nil
}

func (p *RecordActivityTaskHeartbeatRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RecordActivityTaskHeartbeatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RecordActivityTaskHeartbeatRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskToken() {
    if err := oprot.WriteFieldBegin("taskToken", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:taskToken: ", p), err) }
    if err := oprot.WriteBinary(p.TaskToken); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.taskToken (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:taskToken: ", p), err) }
  }
  return err
}

func (p *RecordActivityTaskHeartbeatRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetDetails() {
    if err := oprot.WriteFieldBegin("details", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:details: ", p), err) }
    if err := oprot.WriteBinary(p.Details); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.details (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:details: ", p), err) }
  }
  return err
}

func (p *RecordActivityTaskHeartbeatRequest) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentity() {
    if err := oprot.WriteFieldBegin("identity", thrift.STRING, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:identity: ", p), err) }
    if err := oprot.WriteString(string(*p.Identity)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.identity (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:identity: ", p), err) }
  }
  return err
}

func (p *RecordActivityTaskHeartbeatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RecordActivityTaskHeartbeatRequest(%+v)", *p)
}

// Attributes:
//  - CancelRequested
type RecordActivityTaskHeartbeatResponse struct {
  // unused fields # 1 to 9
  CancelRequested *bool `thrift:"cancelRequested,10" db:"cancelRequested" json:"cancelRequested,omitempty"`
}

func NewRecordActivityTaskHeartbeatResponse() *RecordActivityTaskHeartbeatResponse {
  return &RecordActivityTaskHeartbeatResponse{}
}

var RecordActivityTaskHeartbeatResponse_CancelRequested_DEFAULT bool
func (p *RecordActivityTaskHeartbeatResponse) GetCancelRequested() bool {
  if !p.IsSetCancelRequested() {
    return RecordActivityTaskHeartbeatResponse_CancelRequested_DEFAULT
  }
return *p.CancelRequested
}
func (p *RecordActivityTaskHeartbeatResponse) IsSetCancelRequested() bool {
  return p.CancelRequested != nil
}

func (p *RecordActivityTaskHeartbeatResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RecordActivityTaskHeartbeatResponse)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.CancelRequested = &v
}
  return nil
}

func (p *RecordActivityTaskHeartbeatResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RecordActivityTaskHeartbeatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RecordActivityTaskHeartbeatResponse) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetCancelRequested() {
    if err := oprot.WriteFieldBegin("cancelRequested", thrift.BOOL, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:cancelRequested: ", p), err) }
    if err := oprot.WriteBool(bool(*p.CancelRequested)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cancelRequested (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:cancelRequested: ", p), err) }
  }
  return err
}

func (p *RecordActivityTaskHeartbeatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RecordActivityTaskHeartbeatResponse(%+v)", *p)
}

// Attributes:
//  - TaskToken
//  - Result_
//  - Identity
type RespondActivityTaskCompletedRequest struct {
  // unused fields # 1 to 9
  TaskToken []byte `thrift:"taskToken,10" db:"taskToken" json:"taskToken,omitempty"`
  // unused fields # 11 to 19
  Result_ []byte `thrift:"result,20" db:"result" json:"result,omitempty"`
  // unused fields # 21 to 29
  Identity *string `thrift:"identity,30" db:"identity" json:"identity,omitempty"`
}

func NewRespondActivityTaskCompletedRequest() *RespondActivityTaskCompletedRequest {
  return &RespondActivityTaskCompletedRequest{}
}

var RespondActivityTaskCompletedRequest_TaskToken_DEFAULT []byte

func (p *RespondActivityTaskCompletedRequest) GetTaskToken() []byte {
  return p.TaskToken
}
var RespondActivityTaskCompletedRequest_Result__DEFAULT []byte

func (p *RespondActivityTaskCompletedRequest) GetResult_() []byte {
  return p.Result_
}
var RespondActivityTaskCompletedRequest_Identity_DEFAULT string
func (p *RespondActivityTaskCompletedRequest) GetIdentity() string {
  if !p.IsSetIdentity() {
    return RespondActivityTaskCompletedRequest_Identity_DEFAULT
  }
return *p.Identity
}
func (p *RespondActivityTaskCompletedRequest) IsSetTaskToken() bool {
  return p.TaskToken != nil
}

func (p *RespondActivityTaskCompletedRequest) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *RespondActivityTaskCompletedRequest) IsSetIdentity() bool {
  return p.Identity != nil
}

func (p *RespondActivityTaskCompletedRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RespondActivityTaskCompletedRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TaskToken = v
}
  return nil
}

func (p *RespondActivityTaskCompletedRequest)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Result_ = v
}
  return nil
}

func (p *RespondActivityTaskCompletedRequest)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.Identity = &v
}
  return nil
}

func (p *RespondActivityTaskCompletedRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RespondActivityTaskCompletedRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RespondActivityTaskCompletedRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskToken() {
    if err := oprot.WriteFieldBegin("taskToken", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:taskToken: ", p), err) }
    if err := oprot.WriteBinary(p.TaskToken); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.taskToken (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:taskToken: ", p), err) }
  }
  return err
}

func (p *RespondActivityTaskCompletedRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetResult_() {
    if err := oprot.WriteFieldBegin("result", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:result: ", p), err) }
    if err := oprot.WriteBinary(p.Result_); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.result (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:result: ", p), err) }
  }
  return err
}

func (p *RespondActivityTaskCompletedRequest) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentity() {
    if err := oprot.WriteFieldBegin("identity", thrift.STRING, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:identity: ", p), err) }
    if err := oprot.WriteString(string(*p.Identity)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.identity (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:identity: ", p), err) }
  }
  return err
}

func (p *RespondActivityTaskCompletedRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RespondActivityTaskCompletedRequest(%+v)", *p)
}

// Attributes:
//  - TaskToken
//  - Reason
//  - Details
//  - Identity
type RespondActivityTaskFailedRequest struct {
  // unused fields # 1 to 9
  TaskToken []byte `thrift:"taskToken,10" db:"taskToken" json:"taskToken,omitempty"`
  // unused fields # 11 to 19
  Reason *string `thrift:"reason,20" db:"reason" json:"reason,omitempty"`
  // unused fields # 21 to 29
  Details []byte `thrift:"details,30" db:"details" json:"details,omitempty"`
  // unused fields # 31 to 39
  Identity *string `thrift:"identity,40" db:"identity" json:"identity,omitempty"`
}

func NewRespondActivityTaskFailedRequest() *RespondActivityTaskFailedRequest {
  return &RespondActivityTaskFailedRequest{}
}

var RespondActivityTaskFailedRequest_TaskToken_DEFAULT []byte

func (p *RespondActivityTaskFailedRequest) GetTaskToken() []byte {
  return p.TaskToken
}
var RespondActivityTaskFailedRequest_Reason_DEFAULT string
func (p *RespondActivityTaskFailedRequest) GetReason() string {
  if !p.IsSetReason() {
    return RespondActivityTaskFailedRequest_Reason_DEFAULT
  }
return *p.Reason
}
var RespondActivityTaskFailedRequest_Details_DEFAULT []byte

func (p *RespondActivityTaskFailedRequest) GetDetails() []byte {
  return p.Details
}
var RespondActivityTaskFailedRequest_Identity_DEFAULT string
func (p *RespondActivityTaskFailedRequest) GetIdentity() string {
  if !p.IsSetIdentity() {
    return RespondActivityTaskFailedRequest_Identity_DEFAULT
  }
return *p.Identity
}
func (p *RespondActivityTaskFailedRequest) IsSetTaskToken() bool {
  return p.TaskToken != nil
}

func (p *RespondActivityTaskFailedRequest) IsSetReason() bool {
  return p.Reason != nil
}

func (p *RespondActivityTaskFailedRequest) IsSetDetails() bool {
  return p.Details != nil
}

func (p *RespondActivityTaskFailedRequest) IsSetIdentity() bool {
  return p.Identity != nil
}

func (p *RespondActivityTaskFailedRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RespondActivityTaskFailedRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TaskToken = v
}
  return nil
}

func (p *RespondActivityTaskFailedRequest)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Reason = &v
}
  return nil
}

func (p *RespondActivityTaskFailedRequest)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.Details = v
}
  return nil
}

func (p *RespondActivityTaskFailedRequest)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.Identity = &v
}
  return nil
}

func (p *RespondActivityTaskFailedRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RespondActivityTaskFailedRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RespondActivityTaskFailedRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskToken() {
    if err := oprot.WriteFieldBegin("taskToken", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:taskToken: ", p), err) }
    if err := oprot.WriteBinary(p.TaskToken); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.taskToken (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:taskToken: ", p), err) }
  }
  return err
}

func (p *RespondActivityTaskFailedRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetReason() {
    if err := oprot.WriteFieldBegin("reason", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:reason: ", p), err) }
    if err := oprot.WriteString(string(*p.Reason)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reason (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:reason: ", p), err) }
  }
  return err
}

func (p *RespondActivityTaskFailedRequest) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetDetails() {
    if err := oprot.WriteFieldBegin("details", thrift.STRING, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:details: ", p), err) }
    if err := oprot.WriteBinary(p.Details); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.details (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:details: ", p), err) }
  }
  return err
}

func (p *RespondActivityTaskFailedRequest) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentity() {
    if err := oprot.WriteFieldBegin("identity", thrift.STRING, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:identity: ", p), err) }
    if err := oprot.WriteString(string(*p.Identity)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.identity (40) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:identity: ", p), err) }
  }
  return err
}

func (p *RespondActivityTaskFailedRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RespondActivityTaskFailedRequest(%+v)", *p)
}

// Attributes:
//  - TaskToken
//  - Details
//  - Identity
type RespondActivityTaskCanceledRequest struct {
  // unused fields # 1 to 9
  TaskToken []byte `thrift:"taskToken,10" db:"taskToken" json:"taskToken,omitempty"`
  // unused fields # 11 to 19
  Details []byte `thrift:"details,20" db:"details" json:"details,omitempty"`
  // unused fields # 21 to 29
  Identity *string `thrift:"identity,30" db:"identity" json:"identity,omitempty"`
}

func NewRespondActivityTaskCanceledRequest() *RespondActivityTaskCanceledRequest {
  return &RespondActivityTaskCanceledRequest{}
}

var RespondActivityTaskCanceledRequest_TaskToken_DEFAULT []byte

func (p *RespondActivityTaskCanceledRequest) GetTaskToken() []byte {
  return p.TaskToken
}
var RespondActivityTaskCanceledRequest_Details_DEFAULT []byte

func (p *RespondActivityTaskCanceledRequest) GetDetails() []byte {
  return p.Details
}
var RespondActivityTaskCanceledRequest_Identity_DEFAULT string
func (p *RespondActivityTaskCanceledRequest) GetIdentity() string {
  if !p.IsSetIdentity() {
    return RespondActivityTaskCanceledRequest_Identity_DEFAULT
  }
return *p.Identity
}
func (p *RespondActivityTaskCanceledRequest) IsSetTaskToken() bool {
  return p.TaskToken != nil
}

func (p *RespondActivityTaskCanceledRequest) IsSetDetails() bool {
  return p.Details != nil
}

func (p *RespondActivityTaskCanceledRequest) IsSetIdentity() bool {
  return p.Identity != nil
}

func (p *RespondActivityTaskCanceledRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RespondActivityTaskCanceledRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TaskToken = v
}
  return nil
}

func (p *RespondActivityTaskCanceledRequest)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Details = v
}
  return nil
}

func (p *RespondActivityTaskCanceledRequest)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.Identity = &v
}
  return nil
}

func (p *RespondActivityTaskCanceledRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RespondActivityTaskCanceledRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RespondActivityTaskCanceledRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskToken() {
    if err := oprot.WriteFieldBegin("taskToken", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:taskToken: ", p), err) }
    if err := oprot.WriteBinary(p.TaskToken); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.taskToken (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:taskToken: ", p), err) }
  }
  return err
}

func (p *RespondActivityTaskCanceledRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetDetails() {
    if err := oprot.WriteFieldBegin("details", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:details: ", p), err) }
    if err := oprot.WriteBinary(p.Details); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.details (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:details: ", p), err) }
  }
  return err
}

func (p *RespondActivityTaskCanceledRequest) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentity() {
    if err := oprot.WriteFieldBegin("identity", thrift.STRING, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:identity: ", p), err) }
    if err := oprot.WriteString(string(*p.Identity)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.identity (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:identity: ", p), err) }
  }
  return err
}

func (p *RespondActivityTaskCanceledRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RespondActivityTaskCanceledRequest(%+v)", *p)
}

// Attributes:
//  - Domain
//  - Execution
type GetWorkflowExecutionHistoryRequest struct {
  // unused fields # 1 to 9
  Domain *string `thrift:"domain,10" db:"domain" json:"domain,omitempty"`
  // unused fields # 11 to 19
  Execution *WorkflowExecution `thrift:"execution,20" db:"execution" json:"execution,omitempty"`
}

func NewGetWorkflowExecutionHistoryRequest() *GetWorkflowExecutionHistoryRequest {
  return &GetWorkflowExecutionHistoryRequest{}
}

var GetWorkflowExecutionHistoryRequest_Domain_DEFAULT string
func (p *GetWorkflowExecutionHistoryRequest) GetDomain() string {
  if !p.IsSetDomain() {
    return GetWorkflowExecutionHistoryRequest_Domain_DEFAULT
  }
return *p.Domain
}
var GetWorkflowExecutionHistoryRequest_Execution_DEFAULT *WorkflowExecution
func (p *GetWorkflowExecutionHistoryRequest) GetExecution() *WorkflowExecution {
  if !p.IsSetExecution() {
    return GetWorkflowExecutionHistoryRequest_Execution_DEFAULT
  }
return p.Execution
}
func (p *GetWorkflowExecutionHistoryRequest) IsSetDomain() bool {
  return p.Domain != nil
}

func (p *GetWorkflowExecutionHistoryRequest) IsSetExecution() bool {
  return p.Execution != nil
}

func (p *GetWorkflowExecutionHistoryRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetWorkflowExecutionHistoryRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Domain = &v
}
  return nil
}

func (p *GetWorkflowExecutionHistoryRequest)  ReadField20(iprot thrift.TProtocol) error {
  p.Execution = &WorkflowExecution{}
  if err := p.Execution.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Execution), err)
  }
  return nil
}

func (p *GetWorkflowExecutionHistoryRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetWorkflowExecutionHistoryRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetWorkflowExecutionHistoryRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomain() {
    if err := oprot.WriteFieldBegin("domain", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:domain: ", p), err) }
    if err := oprot.WriteString(string(*p.Domain)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domain (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:domain: ", p), err) }
  }
  return err
}

func (p *GetWorkflowExecutionHistoryRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetExecution() {
    if err := oprot.WriteFieldBegin("execution", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:execution: ", p), err) }
    if err := p.Execution.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Execution), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:execution: ", p), err) }
  }
  return err
}

func (p *GetWorkflowExecutionHistoryRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetWorkflowExecutionHistoryRequest(%+v)", *p)
}

// Attributes:
//  - History
type GetWorkflowExecutionHistoryResponse struct {
  // unused fields # 1 to 9
  History *History `thrift:"history,10" db:"history" json:"history,omitempty"`
}

func NewGetWorkflowExecutionHistoryResponse() *GetWorkflowExecutionHistoryResponse {
  return &GetWorkflowExecutionHistoryResponse{}
}

var GetWorkflowExecutionHistoryResponse_History_DEFAULT *History
func (p *GetWorkflowExecutionHistoryResponse) GetHistory() *History {
  if !p.IsSetHistory() {
    return GetWorkflowExecutionHistoryResponse_History_DEFAULT
  }
return p.History
}
func (p *GetWorkflowExecutionHistoryResponse) IsSetHistory() bool {
  return p.History != nil
}

func (p *GetWorkflowExecutionHistoryResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetWorkflowExecutionHistoryResponse)  ReadField10(iprot thrift.TProtocol) error {
  p.History = &History{}
  if err := p.History.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.History), err)
  }
  return nil
}

func (p *GetWorkflowExecutionHistoryResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetWorkflowExecutionHistoryResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetWorkflowExecutionHistoryResponse) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetHistory() {
    if err := oprot.WriteFieldBegin("history", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:history: ", p), err) }
    if err := p.History.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.History), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:history: ", p), err) }
  }
  return err
}

func (p *GetWorkflowExecutionHistoryResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetWorkflowExecutionHistoryResponse(%+v)", *p)
}

