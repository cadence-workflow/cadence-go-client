// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by thriftrw v1.11.0. DO NOT EDIT.
// @generated

package replicator

import (
	"bytes"
	"encoding/json"
	"fmt"
	"go.uber.org/cadence/.gen/go/shared"
	"go.uber.org/thriftrw/wire"
	"math"
	"strconv"
	"strings"
)

type DomainOperation int32

const (
	DomainOperationCreate DomainOperation = 0
	DomainOperationUpdate DomainOperation = 1
)

// DomainOperation_Values returns all recognized values of DomainOperation.
func DomainOperation_Values() []DomainOperation {
	return []DomainOperation{
		DomainOperationCreate,
		DomainOperationUpdate,
	}
}

// UnmarshalText tries to decode DomainOperation from a byte slice
// containing its name.
//
//   var v DomainOperation
//   err := v.UnmarshalText([]byte("Create"))
func (v *DomainOperation) UnmarshalText(value []byte) error {
	switch string(value) {
	case "Create":
		*v = DomainOperationCreate
		return nil
	case "Update":
		*v = DomainOperationUpdate
		return nil
	default:
		return fmt.Errorf("unknown enum value %q for %q", value, "DomainOperation")
	}
}

// Ptr returns a pointer to this enum value.
func (v DomainOperation) Ptr() *DomainOperation {
	return &v
}

// ToWire translates DomainOperation into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// Enums are represented as 32-bit integers over the wire.
func (v DomainOperation) ToWire() (wire.Value, error) {
	return wire.NewValueI32(int32(v)), nil
}

// FromWire deserializes DomainOperation from its Thrift-level
// representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TI32)
//   if err != nil {
//     return DomainOperation(0), err
//   }
//
//   var v DomainOperation
//   if err := v.FromWire(x); err != nil {
//     return DomainOperation(0), err
//   }
//   return v, nil
func (v *DomainOperation) FromWire(w wire.Value) error {
	*v = (DomainOperation)(w.GetI32())
	return nil
}

// String returns a readable string representation of DomainOperation.
func (v DomainOperation) String() string {
	w := int32(v)
	switch w {
	case 0:
		return "Create"
	case 1:
		return "Update"
	}
	return fmt.Sprintf("DomainOperation(%d)", w)
}

// Equals returns true if this DomainOperation value matches the provided
// value.
func (v DomainOperation) Equals(rhs DomainOperation) bool {
	return v == rhs
}

// MarshalJSON serializes DomainOperation into JSON.
//
// If the enum value is recognized, its name is returned. Otherwise,
// its integer value is returned.
//
// This implements json.Marshaler.
func (v DomainOperation) MarshalJSON() ([]byte, error) {
	switch int32(v) {
	case 0:
		return ([]byte)("\"Create\""), nil
	case 1:
		return ([]byte)("\"Update\""), nil
	}
	return ([]byte)(strconv.FormatInt(int64(v), 10)), nil
}

// UnmarshalJSON attempts to decode DomainOperation from its JSON
// representation.
//
// This implementation supports both, numeric and string inputs. If a
// string is provided, it must be a known enum name.
//
// This implements json.Unmarshaler.
func (v *DomainOperation) UnmarshalJSON(text []byte) error {
	d := json.NewDecoder(bytes.NewReader(text))
	d.UseNumber()
	t, err := d.Token()
	if err != nil {
		return err
	}

	switch w := t.(type) {
	case json.Number:
		x, err := w.Int64()
		if err != nil {
			return err
		}
		if x > math.MaxInt32 {
			return fmt.Errorf("enum overflow from JSON %q for %q", text, "DomainOperation")
		}
		if x < math.MinInt32 {
			return fmt.Errorf("enum underflow from JSON %q for %q", text, "DomainOperation")
		}
		*v = (DomainOperation)(x)
		return nil
	case string:
		return v.UnmarshalText([]byte(w))
	default:
		return fmt.Errorf("invalid JSON value %q (%T) to unmarshal into %q", t, t, "DomainOperation")
	}
}

type DomainTaskAttributes struct {
	DomainOperation   *DomainOperation                       `json:"domainOperation,omitempty"`
	ID                *string                                `json:"id,omitempty"`
	Info              *shared.DomainInfo                     `json:"info,omitempty"`
	Config            *shared.DomainConfiguration            `json:"config,omitempty"`
	ReplicationConfig *shared.DomainReplicationConfiguration `json:"replicationConfig,omitempty"`
	ConfigVersion     *int64                                 `json:"configVersion,omitempty"`
	FailoverVersion   *int64                                 `json:"failoverVersion,omitempty"`
}

// ToWire translates a DomainTaskAttributes struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *DomainTaskAttributes) ToWire() (wire.Value, error) {
	var (
		fields [7]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.DomainOperation != nil {
		w, err = v.DomainOperation.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 5, Value: w}
		i++
	}
	if v.ID != nil {
		w, err = wire.NewValueString(*(v.ID)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.Info != nil {
		w, err = v.Info.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.Config != nil {
		w, err = v.Config.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.ReplicationConfig != nil {
		w, err = v.ReplicationConfig.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.ConfigVersion != nil {
		w, err = wire.NewValueI64(*(v.ConfigVersion)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.FailoverVersion != nil {
		w, err = wire.NewValueI64(*(v.FailoverVersion)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _DomainOperation_Read(w wire.Value) (DomainOperation, error) {
	var v DomainOperation
	err := v.FromWire(w)
	return v, err
}

func _DomainInfo_Read(w wire.Value) (*shared.DomainInfo, error) {
	var v shared.DomainInfo
	err := v.FromWire(w)
	return &v, err
}

func _DomainConfiguration_Read(w wire.Value) (*shared.DomainConfiguration, error) {
	var v shared.DomainConfiguration
	err := v.FromWire(w)
	return &v, err
}

func _DomainReplicationConfiguration_Read(w wire.Value) (*shared.DomainReplicationConfiguration, error) {
	var v shared.DomainReplicationConfiguration
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a DomainTaskAttributes struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a DomainTaskAttributes struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v DomainTaskAttributes
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *DomainTaskAttributes) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 5:
			if field.Value.Type() == wire.TI32 {
				var x DomainOperation
				x, err = _DomainOperation_Read(field.Value)
				v.DomainOperation = &x
				if err != nil {
					return err
				}

			}
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.ID = &x
				if err != nil {
					return err
				}

			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.Info, err = _DomainInfo_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 30:
			if field.Value.Type() == wire.TStruct {
				v.Config, err = _DomainConfiguration_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 40:
			if field.Value.Type() == wire.TStruct {
				v.ReplicationConfig, err = _DomainReplicationConfiguration_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 50:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.ConfigVersion = &x
				if err != nil {
					return err
				}

			}
		case 60:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.FailoverVersion = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a DomainTaskAttributes
// struct.
func (v *DomainTaskAttributes) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [7]string
	i := 0
	if v.DomainOperation != nil {
		fields[i] = fmt.Sprintf("DomainOperation: %v", *(v.DomainOperation))
		i++
	}
	if v.ID != nil {
		fields[i] = fmt.Sprintf("ID: %v", *(v.ID))
		i++
	}
	if v.Info != nil {
		fields[i] = fmt.Sprintf("Info: %v", v.Info)
		i++
	}
	if v.Config != nil {
		fields[i] = fmt.Sprintf("Config: %v", v.Config)
		i++
	}
	if v.ReplicationConfig != nil {
		fields[i] = fmt.Sprintf("ReplicationConfig: %v", v.ReplicationConfig)
		i++
	}
	if v.ConfigVersion != nil {
		fields[i] = fmt.Sprintf("ConfigVersion: %v", *(v.ConfigVersion))
		i++
	}
	if v.FailoverVersion != nil {
		fields[i] = fmt.Sprintf("FailoverVersion: %v", *(v.FailoverVersion))
		i++
	}

	return fmt.Sprintf("DomainTaskAttributes{%v}", strings.Join(fields[:i], ", "))
}

func _DomainOperation_EqualsPtr(lhs, rhs *DomainOperation) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return x.Equals(y)
	}
	return lhs == nil && rhs == nil
}

func _String_EqualsPtr(lhs, rhs *string) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func _I64_EqualsPtr(lhs, rhs *int64) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

// Equals returns true if all the fields of this DomainTaskAttributes match the
// provided DomainTaskAttributes.
//
// This function performs a deep comparison.
func (v *DomainTaskAttributes) Equals(rhs *DomainTaskAttributes) bool {
	if !_DomainOperation_EqualsPtr(v.DomainOperation, rhs.DomainOperation) {
		return false
	}
	if !_String_EqualsPtr(v.ID, rhs.ID) {
		return false
	}
	if !((v.Info == nil && rhs.Info == nil) || (v.Info != nil && rhs.Info != nil && v.Info.Equals(rhs.Info))) {
		return false
	}
	if !((v.Config == nil && rhs.Config == nil) || (v.Config != nil && rhs.Config != nil && v.Config.Equals(rhs.Config))) {
		return false
	}
	if !((v.ReplicationConfig == nil && rhs.ReplicationConfig == nil) || (v.ReplicationConfig != nil && rhs.ReplicationConfig != nil && v.ReplicationConfig.Equals(rhs.ReplicationConfig))) {
		return false
	}
	if !_I64_EqualsPtr(v.ConfigVersion, rhs.ConfigVersion) {
		return false
	}
	if !_I64_EqualsPtr(v.FailoverVersion, rhs.FailoverVersion) {
		return false
	}

	return true
}

// GetDomainOperation returns the value of DomainOperation if it is set or its
// zero value if it is unset.
func (v *DomainTaskAttributes) GetDomainOperation() (o DomainOperation) {
	if v.DomainOperation != nil {
		return *v.DomainOperation
	}

	return
}

// GetID returns the value of ID if it is set or its
// zero value if it is unset.
func (v *DomainTaskAttributes) GetID() (o string) {
	if v.ID != nil {
		return *v.ID
	}

	return
}

// GetConfigVersion returns the value of ConfigVersion if it is set or its
// zero value if it is unset.
func (v *DomainTaskAttributes) GetConfigVersion() (o int64) {
	if v.ConfigVersion != nil {
		return *v.ConfigVersion
	}

	return
}

// GetFailoverVersion returns the value of FailoverVersion if it is set or its
// zero value if it is unset.
func (v *DomainTaskAttributes) GetFailoverVersion() (o int64) {
	if v.FailoverVersion != nil {
		return *v.FailoverVersion
	}

	return
}

type GetDomainReplicationMessagesRequest struct {
	LastRetrievedMessageId *int64  `json:"lastRetrievedMessageId,omitempty"`
	LastProcessedMessageId *int64  `json:"lastProcessedMessageId,omitempty"`
	ClusterName            *string `json:"clusterName,omitempty"`
}

// ToWire translates a GetDomainReplicationMessagesRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *GetDomainReplicationMessagesRequest) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.LastRetrievedMessageId != nil {
		w, err = wire.NewValueI64(*(v.LastRetrievedMessageId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.LastProcessedMessageId != nil {
		w, err = wire.NewValueI64(*(v.LastProcessedMessageId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.ClusterName != nil {
		w, err = wire.NewValueString(*(v.ClusterName)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a GetDomainReplicationMessagesRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a GetDomainReplicationMessagesRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v GetDomainReplicationMessagesRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *GetDomainReplicationMessagesRequest) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.LastRetrievedMessageId = &x
				if err != nil {
					return err
				}

			}
		case 20:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.LastProcessedMessageId = &x
				if err != nil {
					return err
				}

			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.ClusterName = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a GetDomainReplicationMessagesRequest
// struct.
func (v *GetDomainReplicationMessagesRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [3]string
	i := 0
	if v.LastRetrievedMessageId != nil {
		fields[i] = fmt.Sprintf("LastRetrievedMessageId: %v", *(v.LastRetrievedMessageId))
		i++
	}
	if v.LastProcessedMessageId != nil {
		fields[i] = fmt.Sprintf("LastProcessedMessageId: %v", *(v.LastProcessedMessageId))
		i++
	}
	if v.ClusterName != nil {
		fields[i] = fmt.Sprintf("ClusterName: %v", *(v.ClusterName))
		i++
	}

	return fmt.Sprintf("GetDomainReplicationMessagesRequest{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this GetDomainReplicationMessagesRequest match the
// provided GetDomainReplicationMessagesRequest.
//
// This function performs a deep comparison.
func (v *GetDomainReplicationMessagesRequest) Equals(rhs *GetDomainReplicationMessagesRequest) bool {
	if !_I64_EqualsPtr(v.LastRetrievedMessageId, rhs.LastRetrievedMessageId) {
		return false
	}
	if !_I64_EqualsPtr(v.LastProcessedMessageId, rhs.LastProcessedMessageId) {
		return false
	}
	if !_String_EqualsPtr(v.ClusterName, rhs.ClusterName) {
		return false
	}

	return true
}

// GetLastRetrievedMessageId returns the value of LastRetrievedMessageId if it is set or its
// zero value if it is unset.
func (v *GetDomainReplicationMessagesRequest) GetLastRetrievedMessageId() (o int64) {
	if v.LastRetrievedMessageId != nil {
		return *v.LastRetrievedMessageId
	}

	return
}

// GetLastProcessedMessageId returns the value of LastProcessedMessageId if it is set or its
// zero value if it is unset.
func (v *GetDomainReplicationMessagesRequest) GetLastProcessedMessageId() (o int64) {
	if v.LastProcessedMessageId != nil {
		return *v.LastProcessedMessageId
	}

	return
}

// GetClusterName returns the value of ClusterName if it is set or its
// zero value if it is unset.
func (v *GetDomainReplicationMessagesRequest) GetClusterName() (o string) {
	if v.ClusterName != nil {
		return *v.ClusterName
	}

	return
}

type GetDomainReplicationMessagesResponse struct {
	Messages *ReplicationMessages `json:"messages,omitempty"`
}

// ToWire translates a GetDomainReplicationMessagesResponse struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *GetDomainReplicationMessagesResponse) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Messages != nil {
		w, err = v.Messages.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _ReplicationMessages_Read(w wire.Value) (*ReplicationMessages, error) {
	var v ReplicationMessages
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a GetDomainReplicationMessagesResponse struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a GetDomainReplicationMessagesResponse struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v GetDomainReplicationMessagesResponse
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *GetDomainReplicationMessagesResponse) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TStruct {
				v.Messages, err = _ReplicationMessages_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a GetDomainReplicationMessagesResponse
// struct.
func (v *GetDomainReplicationMessagesResponse) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Messages != nil {
		fields[i] = fmt.Sprintf("Messages: %v", v.Messages)
		i++
	}

	return fmt.Sprintf("GetDomainReplicationMessagesResponse{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this GetDomainReplicationMessagesResponse match the
// provided GetDomainReplicationMessagesResponse.
//
// This function performs a deep comparison.
func (v *GetDomainReplicationMessagesResponse) Equals(rhs *GetDomainReplicationMessagesResponse) bool {
	if !((v.Messages == nil && rhs.Messages == nil) || (v.Messages != nil && rhs.Messages != nil && v.Messages.Equals(rhs.Messages))) {
		return false
	}

	return true
}

type GetReplicationMessagesRequest struct {
	Tokens      []*ReplicationToken `json:"tokens,omitempty"`
	ClusterName *string             `json:"clusterName,omitempty"`
}

type _List_ReplicationToken_ValueList []*ReplicationToken

func (v _List_ReplicationToken_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_ReplicationToken_ValueList) Size() int {
	return len(v)
}

func (_List_ReplicationToken_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_ReplicationToken_ValueList) Close() {}

// ToWire translates a GetReplicationMessagesRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *GetReplicationMessagesRequest) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Tokens != nil {
		w, err = wire.NewValueList(_List_ReplicationToken_ValueList(v.Tokens)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.ClusterName != nil {
		w, err = wire.NewValueString(*(v.ClusterName)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _ReplicationToken_Read(w wire.Value) (*ReplicationToken, error) {
	var v ReplicationToken
	err := v.FromWire(w)
	return &v, err
}

func _List_ReplicationToken_Read(l wire.ValueList) ([]*ReplicationToken, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}

	o := make([]*ReplicationToken, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _ReplicationToken_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

// FromWire deserializes a GetReplicationMessagesRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a GetReplicationMessagesRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v GetReplicationMessagesRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *GetReplicationMessagesRequest) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TList {
				v.Tokens, err = _List_ReplicationToken_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.ClusterName = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a GetReplicationMessagesRequest
// struct.
func (v *GetReplicationMessagesRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.Tokens != nil {
		fields[i] = fmt.Sprintf("Tokens: %v", v.Tokens)
		i++
	}
	if v.ClusterName != nil {
		fields[i] = fmt.Sprintf("ClusterName: %v", *(v.ClusterName))
		i++
	}

	return fmt.Sprintf("GetReplicationMessagesRequest{%v}", strings.Join(fields[:i], ", "))
}

func _List_ReplicationToken_Equals(lhs, rhs []*ReplicationToken) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for i, lv := range lhs {
		rv := rhs[i]
		if !lv.Equals(rv) {
			return false
		}
	}

	return true
}

// Equals returns true if all the fields of this GetReplicationMessagesRequest match the
// provided GetReplicationMessagesRequest.
//
// This function performs a deep comparison.
func (v *GetReplicationMessagesRequest) Equals(rhs *GetReplicationMessagesRequest) bool {
	if !((v.Tokens == nil && rhs.Tokens == nil) || (v.Tokens != nil && rhs.Tokens != nil && _List_ReplicationToken_Equals(v.Tokens, rhs.Tokens))) {
		return false
	}
	if !_String_EqualsPtr(v.ClusterName, rhs.ClusterName) {
		return false
	}

	return true
}

// GetClusterName returns the value of ClusterName if it is set or its
// zero value if it is unset.
func (v *GetReplicationMessagesRequest) GetClusterName() (o string) {
	if v.ClusterName != nil {
		return *v.ClusterName
	}

	return
}

type GetReplicationMessagesResponse struct {
	MessagesByShard map[int32]*ReplicationMessages `json:"messagesByShard,omitempty"`
}

type _Map_I32_ReplicationMessages_MapItemList map[int32]*ReplicationMessages

func (m _Map_I32_ReplicationMessages_MapItemList) ForEach(f func(wire.MapItem) error) error {
	for k, v := range m {
		if v == nil {
			return fmt.Errorf("invalid [%v]: value is nil", k)
		}
		kw, err := wire.NewValueI32(k), error(nil)
		if err != nil {
			return err
		}

		vw, err := v.ToWire()
		if err != nil {
			return err
		}
		err = f(wire.MapItem{Key: kw, Value: vw})
		if err != nil {
			return err
		}
	}
	return nil
}

func (m _Map_I32_ReplicationMessages_MapItemList) Size() int {
	return len(m)
}

func (_Map_I32_ReplicationMessages_MapItemList) KeyType() wire.Type {
	return wire.TI32
}

func (_Map_I32_ReplicationMessages_MapItemList) ValueType() wire.Type {
	return wire.TStruct
}

func (_Map_I32_ReplicationMessages_MapItemList) Close() {}

// ToWire translates a GetReplicationMessagesResponse struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *GetReplicationMessagesResponse) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.MessagesByShard != nil {
		w, err = wire.NewValueMap(_Map_I32_ReplicationMessages_MapItemList(v.MessagesByShard)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Map_I32_ReplicationMessages_Read(m wire.MapItemList) (map[int32]*ReplicationMessages, error) {
	if m.KeyType() != wire.TI32 {
		return nil, nil
	}

	if m.ValueType() != wire.TStruct {
		return nil, nil
	}

	o := make(map[int32]*ReplicationMessages, m.Size())
	err := m.ForEach(func(x wire.MapItem) error {
		k, err := x.Key.GetI32(), error(nil)
		if err != nil {
			return err
		}

		v, err := _ReplicationMessages_Read(x.Value)
		if err != nil {
			return err
		}

		o[k] = v
		return nil
	})
	m.Close()
	return o, err
}

// FromWire deserializes a GetReplicationMessagesResponse struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a GetReplicationMessagesResponse struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v GetReplicationMessagesResponse
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *GetReplicationMessagesResponse) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TMap {
				v.MessagesByShard, err = _Map_I32_ReplicationMessages_Read(field.Value.GetMap())
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a GetReplicationMessagesResponse
// struct.
func (v *GetReplicationMessagesResponse) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.MessagesByShard != nil {
		fields[i] = fmt.Sprintf("MessagesByShard: %v", v.MessagesByShard)
		i++
	}

	return fmt.Sprintf("GetReplicationMessagesResponse{%v}", strings.Join(fields[:i], ", "))
}

func _Map_I32_ReplicationMessages_Equals(lhs, rhs map[int32]*ReplicationMessages) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for lk, lv := range lhs {
		rv, ok := rhs[lk]
		if !ok {
			return false
		}
		if !lv.Equals(rv) {
			return false
		}
	}
	return true
}

// Equals returns true if all the fields of this GetReplicationMessagesResponse match the
// provided GetReplicationMessagesResponse.
//
// This function performs a deep comparison.
func (v *GetReplicationMessagesResponse) Equals(rhs *GetReplicationMessagesResponse) bool {
	if !((v.MessagesByShard == nil && rhs.MessagesByShard == nil) || (v.MessagesByShard != nil && rhs.MessagesByShard != nil && _Map_I32_ReplicationMessages_Equals(v.MessagesByShard, rhs.MessagesByShard))) {
		return false
	}

	return true
}

type HistoryMetadataTaskAttributes struct {
	TargetClusters []string `json:"targetClusters,omitempty"`
	DomainId       *string  `json:"domainId,omitempty"`
	WorkflowId     *string  `json:"workflowId,omitempty"`
	RunId          *string  `json:"runId,omitempty"`
	FirstEventId   *int64   `json:"firstEventId,omitempty"`
	NextEventId    *int64   `json:"nextEventId,omitempty"`
}

type _List_String_ValueList []string

func (v _List_String_ValueList) ForEach(f func(wire.Value) error) error {
	for _, x := range v {
		w, err := wire.NewValueString(x), error(nil)
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_String_ValueList) Size() int {
	return len(v)
}

func (_List_String_ValueList) ValueType() wire.Type {
	return wire.TBinary
}

func (_List_String_ValueList) Close() {}

// ToWire translates a HistoryMetadataTaskAttributes struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *HistoryMetadataTaskAttributes) ToWire() (wire.Value, error) {
	var (
		fields [6]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.TargetClusters != nil {
		w, err = wire.NewValueList(_List_String_ValueList(v.TargetClusters)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 5, Value: w}
		i++
	}
	if v.DomainId != nil {
		w, err = wire.NewValueString(*(v.DomainId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowId != nil {
		w, err = wire.NewValueString(*(v.WorkflowId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.RunId != nil {
		w, err = wire.NewValueString(*(v.RunId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.FirstEventId != nil {
		w, err = wire.NewValueI64(*(v.FirstEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.NextEventId != nil {
		w, err = wire.NewValueI64(*(v.NextEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _List_String_Read(l wire.ValueList) ([]string, error) {
	if l.ValueType() != wire.TBinary {
		return nil, nil
	}

	o := make([]string, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := x.GetString(), error(nil)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

// FromWire deserializes a HistoryMetadataTaskAttributes struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a HistoryMetadataTaskAttributes struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v HistoryMetadataTaskAttributes
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *HistoryMetadataTaskAttributes) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 5:
			if field.Value.Type() == wire.TList {
				v.TargetClusters, err = _List_String_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.DomainId = &x
				if err != nil {
					return err
				}

			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.WorkflowId = &x
				if err != nil {
					return err
				}

			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.RunId = &x
				if err != nil {
					return err
				}

			}
		case 40:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.FirstEventId = &x
				if err != nil {
					return err
				}

			}
		case 50:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.NextEventId = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a HistoryMetadataTaskAttributes
// struct.
func (v *HistoryMetadataTaskAttributes) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [6]string
	i := 0
	if v.TargetClusters != nil {
		fields[i] = fmt.Sprintf("TargetClusters: %v", v.TargetClusters)
		i++
	}
	if v.DomainId != nil {
		fields[i] = fmt.Sprintf("DomainId: %v", *(v.DomainId))
		i++
	}
	if v.WorkflowId != nil {
		fields[i] = fmt.Sprintf("WorkflowId: %v", *(v.WorkflowId))
		i++
	}
	if v.RunId != nil {
		fields[i] = fmt.Sprintf("RunId: %v", *(v.RunId))
		i++
	}
	if v.FirstEventId != nil {
		fields[i] = fmt.Sprintf("FirstEventId: %v", *(v.FirstEventId))
		i++
	}
	if v.NextEventId != nil {
		fields[i] = fmt.Sprintf("NextEventId: %v", *(v.NextEventId))
		i++
	}

	return fmt.Sprintf("HistoryMetadataTaskAttributes{%v}", strings.Join(fields[:i], ", "))
}

func _List_String_Equals(lhs, rhs []string) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for i, lv := range lhs {
		rv := rhs[i]
		if !(lv == rv) {
			return false
		}
	}

	return true
}

// Equals returns true if all the fields of this HistoryMetadataTaskAttributes match the
// provided HistoryMetadataTaskAttributes.
//
// This function performs a deep comparison.
func (v *HistoryMetadataTaskAttributes) Equals(rhs *HistoryMetadataTaskAttributes) bool {
	if !((v.TargetClusters == nil && rhs.TargetClusters == nil) || (v.TargetClusters != nil && rhs.TargetClusters != nil && _List_String_Equals(v.TargetClusters, rhs.TargetClusters))) {
		return false
	}
	if !_String_EqualsPtr(v.DomainId, rhs.DomainId) {
		return false
	}
	if !_String_EqualsPtr(v.WorkflowId, rhs.WorkflowId) {
		return false
	}
	if !_String_EqualsPtr(v.RunId, rhs.RunId) {
		return false
	}
	if !_I64_EqualsPtr(v.FirstEventId, rhs.FirstEventId) {
		return false
	}
	if !_I64_EqualsPtr(v.NextEventId, rhs.NextEventId) {
		return false
	}

	return true
}

// GetDomainId returns the value of DomainId if it is set or its
// zero value if it is unset.
func (v *HistoryMetadataTaskAttributes) GetDomainId() (o string) {
	if v.DomainId != nil {
		return *v.DomainId
	}

	return
}

// GetWorkflowId returns the value of WorkflowId if it is set or its
// zero value if it is unset.
func (v *HistoryMetadataTaskAttributes) GetWorkflowId() (o string) {
	if v.WorkflowId != nil {
		return *v.WorkflowId
	}

	return
}

// GetRunId returns the value of RunId if it is set or its
// zero value if it is unset.
func (v *HistoryMetadataTaskAttributes) GetRunId() (o string) {
	if v.RunId != nil {
		return *v.RunId
	}

	return
}

// GetFirstEventId returns the value of FirstEventId if it is set or its
// zero value if it is unset.
func (v *HistoryMetadataTaskAttributes) GetFirstEventId() (o int64) {
	if v.FirstEventId != nil {
		return *v.FirstEventId
	}

	return
}

// GetNextEventId returns the value of NextEventId if it is set or its
// zero value if it is unset.
func (v *HistoryMetadataTaskAttributes) GetNextEventId() (o int64) {
	if v.NextEventId != nil {
		return *v.NextEventId
	}

	return
}

type HistoryTaskAttributes struct {
	TargetClusters          []string                           `json:"targetClusters,omitempty"`
	DomainId                *string                            `json:"domainId,omitempty"`
	WorkflowId              *string                            `json:"workflowId,omitempty"`
	RunId                   *string                            `json:"runId,omitempty"`
	FirstEventId            *int64                             `json:"firstEventId,omitempty"`
	NextEventId             *int64                             `json:"nextEventId,omitempty"`
	Version                 *int64                             `json:"version,omitempty"`
	ReplicationInfo         map[string]*shared.ReplicationInfo `json:"replicationInfo,omitempty"`
	History                 *shared.History                    `json:"history,omitempty"`
	NewRunHistory           *shared.History                    `json:"newRunHistory,omitempty"`
	EventStoreVersion       *int32                             `json:"eventStoreVersion,omitempty"`
	NewRunEventStoreVersion *int32                             `json:"newRunEventStoreVersion,omitempty"`
	ResetWorkflow           *bool                              `json:"resetWorkflow,omitempty"`
	NewRunNDC               *bool                              `json:"newRunNDC,omitempty"`
}

type _Map_String_ReplicationInfo_MapItemList map[string]*shared.ReplicationInfo

func (m _Map_String_ReplicationInfo_MapItemList) ForEach(f func(wire.MapItem) error) error {
	for k, v := range m {
		if v == nil {
			return fmt.Errorf("invalid [%v]: value is nil", k)
		}
		kw, err := wire.NewValueString(k), error(nil)
		if err != nil {
			return err
		}

		vw, err := v.ToWire()
		if err != nil {
			return err
		}
		err = f(wire.MapItem{Key: kw, Value: vw})
		if err != nil {
			return err
		}
	}
	return nil
}

func (m _Map_String_ReplicationInfo_MapItemList) Size() int {
	return len(m)
}

func (_Map_String_ReplicationInfo_MapItemList) KeyType() wire.Type {
	return wire.TBinary
}

func (_Map_String_ReplicationInfo_MapItemList) ValueType() wire.Type {
	return wire.TStruct
}

func (_Map_String_ReplicationInfo_MapItemList) Close() {}

// ToWire translates a HistoryTaskAttributes struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *HistoryTaskAttributes) ToWire() (wire.Value, error) {
	var (
		fields [14]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.TargetClusters != nil {
		w, err = wire.NewValueList(_List_String_ValueList(v.TargetClusters)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 5, Value: w}
		i++
	}
	if v.DomainId != nil {
		w, err = wire.NewValueString(*(v.DomainId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowId != nil {
		w, err = wire.NewValueString(*(v.WorkflowId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.RunId != nil {
		w, err = wire.NewValueString(*(v.RunId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.FirstEventId != nil {
		w, err = wire.NewValueI64(*(v.FirstEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.NextEventId != nil {
		w, err = wire.NewValueI64(*(v.NextEventId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.Version != nil {
		w, err = wire.NewValueI64(*(v.Version)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	if v.ReplicationInfo != nil {
		w, err = wire.NewValueMap(_Map_String_ReplicationInfo_MapItemList(v.ReplicationInfo)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 70, Value: w}
		i++
	}
	if v.History != nil {
		w, err = v.History.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 80, Value: w}
		i++
	}
	if v.NewRunHistory != nil {
		w, err = v.NewRunHistory.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 90, Value: w}
		i++
	}
	if v.EventStoreVersion != nil {
		w, err = wire.NewValueI32(*(v.EventStoreVersion)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 100, Value: w}
		i++
	}
	if v.NewRunEventStoreVersion != nil {
		w, err = wire.NewValueI32(*(v.NewRunEventStoreVersion)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 110, Value: w}
		i++
	}
	if v.ResetWorkflow != nil {
		w, err = wire.NewValueBool(*(v.ResetWorkflow)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 120, Value: w}
		i++
	}
	if v.NewRunNDC != nil {
		w, err = wire.NewValueBool(*(v.NewRunNDC)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 130, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _ReplicationInfo_Read(w wire.Value) (*shared.ReplicationInfo, error) {
	var v shared.ReplicationInfo
	err := v.FromWire(w)
	return &v, err
}

func _Map_String_ReplicationInfo_Read(m wire.MapItemList) (map[string]*shared.ReplicationInfo, error) {
	if m.KeyType() != wire.TBinary {
		return nil, nil
	}

	if m.ValueType() != wire.TStruct {
		return nil, nil
	}

	o := make(map[string]*shared.ReplicationInfo, m.Size())
	err := m.ForEach(func(x wire.MapItem) error {
		k, err := x.Key.GetString(), error(nil)
		if err != nil {
			return err
		}

		v, err := _ReplicationInfo_Read(x.Value)
		if err != nil {
			return err
		}

		o[k] = v
		return nil
	})
	m.Close()
	return o, err
}

func _History_Read(w wire.Value) (*shared.History, error) {
	var v shared.History
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a HistoryTaskAttributes struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a HistoryTaskAttributes struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v HistoryTaskAttributes
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *HistoryTaskAttributes) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 5:
			if field.Value.Type() == wire.TList {
				v.TargetClusters, err = _List_String_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.DomainId = &x
				if err != nil {
					return err
				}

			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.WorkflowId = &x
				if err != nil {
					return err
				}

			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.RunId = &x
				if err != nil {
					return err
				}

			}
		case 40:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.FirstEventId = &x
				if err != nil {
					return err
				}

			}
		case 50:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.NextEventId = &x
				if err != nil {
					return err
				}

			}
		case 60:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.Version = &x
				if err != nil {
					return err
				}

			}
		case 70:
			if field.Value.Type() == wire.TMap {
				v.ReplicationInfo, err = _Map_String_ReplicationInfo_Read(field.Value.GetMap())
				if err != nil {
					return err
				}

			}
		case 80:
			if field.Value.Type() == wire.TStruct {
				v.History, err = _History_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 90:
			if field.Value.Type() == wire.TStruct {
				v.NewRunHistory, err = _History_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 100:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.EventStoreVersion = &x
				if err != nil {
					return err
				}

			}
		case 110:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.NewRunEventStoreVersion = &x
				if err != nil {
					return err
				}

			}
		case 120:
			if field.Value.Type() == wire.TBool {
				var x bool
				x, err = field.Value.GetBool(), error(nil)
				v.ResetWorkflow = &x
				if err != nil {
					return err
				}

			}
		case 130:
			if field.Value.Type() == wire.TBool {
				var x bool
				x, err = field.Value.GetBool(), error(nil)
				v.NewRunNDC = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a HistoryTaskAttributes
// struct.
func (v *HistoryTaskAttributes) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [14]string
	i := 0
	if v.TargetClusters != nil {
		fields[i] = fmt.Sprintf("TargetClusters: %v", v.TargetClusters)
		i++
	}
	if v.DomainId != nil {
		fields[i] = fmt.Sprintf("DomainId: %v", *(v.DomainId))
		i++
	}
	if v.WorkflowId != nil {
		fields[i] = fmt.Sprintf("WorkflowId: %v", *(v.WorkflowId))
		i++
	}
	if v.RunId != nil {
		fields[i] = fmt.Sprintf("RunId: %v", *(v.RunId))
		i++
	}
	if v.FirstEventId != nil {
		fields[i] = fmt.Sprintf("FirstEventId: %v", *(v.FirstEventId))
		i++
	}
	if v.NextEventId != nil {
		fields[i] = fmt.Sprintf("NextEventId: %v", *(v.NextEventId))
		i++
	}
	if v.Version != nil {
		fields[i] = fmt.Sprintf("Version: %v", *(v.Version))
		i++
	}
	if v.ReplicationInfo != nil {
		fields[i] = fmt.Sprintf("ReplicationInfo: %v", v.ReplicationInfo)
		i++
	}
	if v.History != nil {
		fields[i] = fmt.Sprintf("History: %v", v.History)
		i++
	}
	if v.NewRunHistory != nil {
		fields[i] = fmt.Sprintf("NewRunHistory: %v", v.NewRunHistory)
		i++
	}
	if v.EventStoreVersion != nil {
		fields[i] = fmt.Sprintf("EventStoreVersion: %v", *(v.EventStoreVersion))
		i++
	}
	if v.NewRunEventStoreVersion != nil {
		fields[i] = fmt.Sprintf("NewRunEventStoreVersion: %v", *(v.NewRunEventStoreVersion))
		i++
	}
	if v.ResetWorkflow != nil {
		fields[i] = fmt.Sprintf("ResetWorkflow: %v", *(v.ResetWorkflow))
		i++
	}
	if v.NewRunNDC != nil {
		fields[i] = fmt.Sprintf("NewRunNDC: %v", *(v.NewRunNDC))
		i++
	}

	return fmt.Sprintf("HistoryTaskAttributes{%v}", strings.Join(fields[:i], ", "))
}

func _Map_String_ReplicationInfo_Equals(lhs, rhs map[string]*shared.ReplicationInfo) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for lk, lv := range lhs {
		rv, ok := rhs[lk]
		if !ok {
			return false
		}
		if !lv.Equals(rv) {
			return false
		}
	}
	return true
}

func _I32_EqualsPtr(lhs, rhs *int32) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func _Bool_EqualsPtr(lhs, rhs *bool) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

// Equals returns true if all the fields of this HistoryTaskAttributes match the
// provided HistoryTaskAttributes.
//
// This function performs a deep comparison.
func (v *HistoryTaskAttributes) Equals(rhs *HistoryTaskAttributes) bool {
	if !((v.TargetClusters == nil && rhs.TargetClusters == nil) || (v.TargetClusters != nil && rhs.TargetClusters != nil && _List_String_Equals(v.TargetClusters, rhs.TargetClusters))) {
		return false
	}
	if !_String_EqualsPtr(v.DomainId, rhs.DomainId) {
		return false
	}
	if !_String_EqualsPtr(v.WorkflowId, rhs.WorkflowId) {
		return false
	}
	if !_String_EqualsPtr(v.RunId, rhs.RunId) {
		return false
	}
	if !_I64_EqualsPtr(v.FirstEventId, rhs.FirstEventId) {
		return false
	}
	if !_I64_EqualsPtr(v.NextEventId, rhs.NextEventId) {
		return false
	}
	if !_I64_EqualsPtr(v.Version, rhs.Version) {
		return false
	}
	if !((v.ReplicationInfo == nil && rhs.ReplicationInfo == nil) || (v.ReplicationInfo != nil && rhs.ReplicationInfo != nil && _Map_String_ReplicationInfo_Equals(v.ReplicationInfo, rhs.ReplicationInfo))) {
		return false
	}
	if !((v.History == nil && rhs.History == nil) || (v.History != nil && rhs.History != nil && v.History.Equals(rhs.History))) {
		return false
	}
	if !((v.NewRunHistory == nil && rhs.NewRunHistory == nil) || (v.NewRunHistory != nil && rhs.NewRunHistory != nil && v.NewRunHistory.Equals(rhs.NewRunHistory))) {
		return false
	}
	if !_I32_EqualsPtr(v.EventStoreVersion, rhs.EventStoreVersion) {
		return false
	}
	if !_I32_EqualsPtr(v.NewRunEventStoreVersion, rhs.NewRunEventStoreVersion) {
		return false
	}
	if !_Bool_EqualsPtr(v.ResetWorkflow, rhs.ResetWorkflow) {
		return false
	}
	if !_Bool_EqualsPtr(v.NewRunNDC, rhs.NewRunNDC) {
		return false
	}

	return true
}

// GetDomainId returns the value of DomainId if it is set or its
// zero value if it is unset.
func (v *HistoryTaskAttributes) GetDomainId() (o string) {
	if v.DomainId != nil {
		return *v.DomainId
	}

	return
}

// GetWorkflowId returns the value of WorkflowId if it is set or its
// zero value if it is unset.
func (v *HistoryTaskAttributes) GetWorkflowId() (o string) {
	if v.WorkflowId != nil {
		return *v.WorkflowId
	}

	return
}

// GetRunId returns the value of RunId if it is set or its
// zero value if it is unset.
func (v *HistoryTaskAttributes) GetRunId() (o string) {
	if v.RunId != nil {
		return *v.RunId
	}

	return
}

// GetFirstEventId returns the value of FirstEventId if it is set or its
// zero value if it is unset.
func (v *HistoryTaskAttributes) GetFirstEventId() (o int64) {
	if v.FirstEventId != nil {
		return *v.FirstEventId
	}

	return
}

// GetNextEventId returns the value of NextEventId if it is set or its
// zero value if it is unset.
func (v *HistoryTaskAttributes) GetNextEventId() (o int64) {
	if v.NextEventId != nil {
		return *v.NextEventId
	}

	return
}

// GetVersion returns the value of Version if it is set or its
// zero value if it is unset.
func (v *HistoryTaskAttributes) GetVersion() (o int64) {
	if v.Version != nil {
		return *v.Version
	}

	return
}

// GetEventStoreVersion returns the value of EventStoreVersion if it is set or its
// zero value if it is unset.
func (v *HistoryTaskAttributes) GetEventStoreVersion() (o int32) {
	if v.EventStoreVersion != nil {
		return *v.EventStoreVersion
	}

	return
}

// GetNewRunEventStoreVersion returns the value of NewRunEventStoreVersion if it is set or its
// zero value if it is unset.
func (v *HistoryTaskAttributes) GetNewRunEventStoreVersion() (o int32) {
	if v.NewRunEventStoreVersion != nil {
		return *v.NewRunEventStoreVersion
	}

	return
}

// GetResetWorkflow returns the value of ResetWorkflow if it is set or its
// zero value if it is unset.
func (v *HistoryTaskAttributes) GetResetWorkflow() (o bool) {
	if v.ResetWorkflow != nil {
		return *v.ResetWorkflow
	}

	return
}

// GetNewRunNDC returns the value of NewRunNDC if it is set or its
// zero value if it is unset.
func (v *HistoryTaskAttributes) GetNewRunNDC() (o bool) {
	if v.NewRunNDC != nil {
		return *v.NewRunNDC
	}

	return
}

type HistoryTaskV2Attributes struct {
	TaskId              *int64                       `json:"taskId,omitempty"`
	DomainId            *string                      `json:"domainId,omitempty"`
	WorkflowId          *string                      `json:"workflowId,omitempty"`
	RunId               *string                      `json:"runId,omitempty"`
	VersionHistoryItems []*shared.VersionHistoryItem `json:"versionHistoryItems,omitempty"`
	Events              *shared.DataBlob             `json:"events,omitempty"`
	NewRunEvents        *shared.DataBlob             `json:"newRunEvents,omitempty"`
}

type _List_VersionHistoryItem_ValueList []*shared.VersionHistoryItem

func (v _List_VersionHistoryItem_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_VersionHistoryItem_ValueList) Size() int {
	return len(v)
}

func (_List_VersionHistoryItem_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_VersionHistoryItem_ValueList) Close() {}

// ToWire translates a HistoryTaskV2Attributes struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *HistoryTaskV2Attributes) ToWire() (wire.Value, error) {
	var (
		fields [7]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.TaskId != nil {
		w, err = wire.NewValueI64(*(v.TaskId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 5, Value: w}
		i++
	}
	if v.DomainId != nil {
		w, err = wire.NewValueString(*(v.DomainId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowId != nil {
		w, err = wire.NewValueString(*(v.WorkflowId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.RunId != nil {
		w, err = wire.NewValueString(*(v.RunId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.VersionHistoryItems != nil {
		w, err = wire.NewValueList(_List_VersionHistoryItem_ValueList(v.VersionHistoryItems)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.Events != nil {
		w, err = v.Events.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.NewRunEvents != nil {
		w, err = v.NewRunEvents.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 70, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _VersionHistoryItem_Read(w wire.Value) (*shared.VersionHistoryItem, error) {
	var v shared.VersionHistoryItem
	err := v.FromWire(w)
	return &v, err
}

func _List_VersionHistoryItem_Read(l wire.ValueList) ([]*shared.VersionHistoryItem, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}

	o := make([]*shared.VersionHistoryItem, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _VersionHistoryItem_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func _DataBlob_Read(w wire.Value) (*shared.DataBlob, error) {
	var v shared.DataBlob
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a HistoryTaskV2Attributes struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a HistoryTaskV2Attributes struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v HistoryTaskV2Attributes
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *HistoryTaskV2Attributes) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 5:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.TaskId = &x
				if err != nil {
					return err
				}

			}
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.DomainId = &x
				if err != nil {
					return err
				}

			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.WorkflowId = &x
				if err != nil {
					return err
				}

			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.RunId = &x
				if err != nil {
					return err
				}

			}
		case 40:
			if field.Value.Type() == wire.TList {
				v.VersionHistoryItems, err = _List_VersionHistoryItem_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		case 50:
			if field.Value.Type() == wire.TStruct {
				v.Events, err = _DataBlob_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 70:
			if field.Value.Type() == wire.TStruct {
				v.NewRunEvents, err = _DataBlob_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a HistoryTaskV2Attributes
// struct.
func (v *HistoryTaskV2Attributes) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [7]string
	i := 0
	if v.TaskId != nil {
		fields[i] = fmt.Sprintf("TaskId: %v", *(v.TaskId))
		i++
	}
	if v.DomainId != nil {
		fields[i] = fmt.Sprintf("DomainId: %v", *(v.DomainId))
		i++
	}
	if v.WorkflowId != nil {
		fields[i] = fmt.Sprintf("WorkflowId: %v", *(v.WorkflowId))
		i++
	}
	if v.RunId != nil {
		fields[i] = fmt.Sprintf("RunId: %v", *(v.RunId))
		i++
	}
	if v.VersionHistoryItems != nil {
		fields[i] = fmt.Sprintf("VersionHistoryItems: %v", v.VersionHistoryItems)
		i++
	}
	if v.Events != nil {
		fields[i] = fmt.Sprintf("Events: %v", v.Events)
		i++
	}
	if v.NewRunEvents != nil {
		fields[i] = fmt.Sprintf("NewRunEvents: %v", v.NewRunEvents)
		i++
	}

	return fmt.Sprintf("HistoryTaskV2Attributes{%v}", strings.Join(fields[:i], ", "))
}

func _List_VersionHistoryItem_Equals(lhs, rhs []*shared.VersionHistoryItem) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for i, lv := range lhs {
		rv := rhs[i]
		if !lv.Equals(rv) {
			return false
		}
	}

	return true
}

// Equals returns true if all the fields of this HistoryTaskV2Attributes match the
// provided HistoryTaskV2Attributes.
//
// This function performs a deep comparison.
func (v *HistoryTaskV2Attributes) Equals(rhs *HistoryTaskV2Attributes) bool {
	if !_I64_EqualsPtr(v.TaskId, rhs.TaskId) {
		return false
	}
	if !_String_EqualsPtr(v.DomainId, rhs.DomainId) {
		return false
	}
	if !_String_EqualsPtr(v.WorkflowId, rhs.WorkflowId) {
		return false
	}
	if !_String_EqualsPtr(v.RunId, rhs.RunId) {
		return false
	}
	if !((v.VersionHistoryItems == nil && rhs.VersionHistoryItems == nil) || (v.VersionHistoryItems != nil && rhs.VersionHistoryItems != nil && _List_VersionHistoryItem_Equals(v.VersionHistoryItems, rhs.VersionHistoryItems))) {
		return false
	}
	if !((v.Events == nil && rhs.Events == nil) || (v.Events != nil && rhs.Events != nil && v.Events.Equals(rhs.Events))) {
		return false
	}
	if !((v.NewRunEvents == nil && rhs.NewRunEvents == nil) || (v.NewRunEvents != nil && rhs.NewRunEvents != nil && v.NewRunEvents.Equals(rhs.NewRunEvents))) {
		return false
	}

	return true
}

// GetTaskId returns the value of TaskId if it is set or its
// zero value if it is unset.
func (v *HistoryTaskV2Attributes) GetTaskId() (o int64) {
	if v.TaskId != nil {
		return *v.TaskId
	}

	return
}

// GetDomainId returns the value of DomainId if it is set or its
// zero value if it is unset.
func (v *HistoryTaskV2Attributes) GetDomainId() (o string) {
	if v.DomainId != nil {
		return *v.DomainId
	}

	return
}

// GetWorkflowId returns the value of WorkflowId if it is set or its
// zero value if it is unset.
func (v *HistoryTaskV2Attributes) GetWorkflowId() (o string) {
	if v.WorkflowId != nil {
		return *v.WorkflowId
	}

	return
}

// GetRunId returns the value of RunId if it is set or its
// zero value if it is unset.
func (v *HistoryTaskV2Attributes) GetRunId() (o string) {
	if v.RunId != nil {
		return *v.RunId
	}

	return
}

type ReplicationMessages struct {
	ReplicationTasks       []*ReplicationTask `json:"replicationTasks,omitempty"`
	LastRetrievedMessageId *int64             `json:"lastRetrievedMessageId,omitempty"`
	HasMore                *bool              `json:"hasMore,omitempty"`
	SyncShardStatus        *SyncShardStatus   `json:"syncShardStatus,omitempty"`
}

type _List_ReplicationTask_ValueList []*ReplicationTask

func (v _List_ReplicationTask_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_ReplicationTask_ValueList) Size() int {
	return len(v)
}

func (_List_ReplicationTask_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_ReplicationTask_ValueList) Close() {}

// ToWire translates a ReplicationMessages struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *ReplicationMessages) ToWire() (wire.Value, error) {
	var (
		fields [4]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.ReplicationTasks != nil {
		w, err = wire.NewValueList(_List_ReplicationTask_ValueList(v.ReplicationTasks)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.LastRetrievedMessageId != nil {
		w, err = wire.NewValueI64(*(v.LastRetrievedMessageId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.HasMore != nil {
		w, err = wire.NewValueBool(*(v.HasMore)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.SyncShardStatus != nil {
		w, err = v.SyncShardStatus.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _ReplicationTask_Read(w wire.Value) (*ReplicationTask, error) {
	var v ReplicationTask
	err := v.FromWire(w)
	return &v, err
}

func _List_ReplicationTask_Read(l wire.ValueList) ([]*ReplicationTask, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}

	o := make([]*ReplicationTask, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _ReplicationTask_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func _SyncShardStatus_Read(w wire.Value) (*SyncShardStatus, error) {
	var v SyncShardStatus
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a ReplicationMessages struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a ReplicationMessages struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v ReplicationMessages
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *ReplicationMessages) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TList {
				v.ReplicationTasks, err = _List_ReplicationTask_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		case 20:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.LastRetrievedMessageId = &x
				if err != nil {
					return err
				}

			}
		case 30:
			if field.Value.Type() == wire.TBool {
				var x bool
				x, err = field.Value.GetBool(), error(nil)
				v.HasMore = &x
				if err != nil {
					return err
				}

			}
		case 40:
			if field.Value.Type() == wire.TStruct {
				v.SyncShardStatus, err = _SyncShardStatus_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a ReplicationMessages
// struct.
func (v *ReplicationMessages) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [4]string
	i := 0
	if v.ReplicationTasks != nil {
		fields[i] = fmt.Sprintf("ReplicationTasks: %v", v.ReplicationTasks)
		i++
	}
	if v.LastRetrievedMessageId != nil {
		fields[i] = fmt.Sprintf("LastRetrievedMessageId: %v", *(v.LastRetrievedMessageId))
		i++
	}
	if v.HasMore != nil {
		fields[i] = fmt.Sprintf("HasMore: %v", *(v.HasMore))
		i++
	}
	if v.SyncShardStatus != nil {
		fields[i] = fmt.Sprintf("SyncShardStatus: %v", v.SyncShardStatus)
		i++
	}

	return fmt.Sprintf("ReplicationMessages{%v}", strings.Join(fields[:i], ", "))
}

func _List_ReplicationTask_Equals(lhs, rhs []*ReplicationTask) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for i, lv := range lhs {
		rv := rhs[i]
		if !lv.Equals(rv) {
			return false
		}
	}

	return true
}

// Equals returns true if all the fields of this ReplicationMessages match the
// provided ReplicationMessages.
//
// This function performs a deep comparison.
func (v *ReplicationMessages) Equals(rhs *ReplicationMessages) bool {
	if !((v.ReplicationTasks == nil && rhs.ReplicationTasks == nil) || (v.ReplicationTasks != nil && rhs.ReplicationTasks != nil && _List_ReplicationTask_Equals(v.ReplicationTasks, rhs.ReplicationTasks))) {
		return false
	}
	if !_I64_EqualsPtr(v.LastRetrievedMessageId, rhs.LastRetrievedMessageId) {
		return false
	}
	if !_Bool_EqualsPtr(v.HasMore, rhs.HasMore) {
		return false
	}
	if !((v.SyncShardStatus == nil && rhs.SyncShardStatus == nil) || (v.SyncShardStatus != nil && rhs.SyncShardStatus != nil && v.SyncShardStatus.Equals(rhs.SyncShardStatus))) {
		return false
	}

	return true
}

// GetLastRetrievedMessageId returns the value of LastRetrievedMessageId if it is set or its
// zero value if it is unset.
func (v *ReplicationMessages) GetLastRetrievedMessageId() (o int64) {
	if v.LastRetrievedMessageId != nil {
		return *v.LastRetrievedMessageId
	}

	return
}

// GetHasMore returns the value of HasMore if it is set or its
// zero value if it is unset.
func (v *ReplicationMessages) GetHasMore() (o bool) {
	if v.HasMore != nil {
		return *v.HasMore
	}

	return
}

type ReplicationTask struct {
	TaskType                      *ReplicationTaskType           `json:"taskType,omitempty"`
	SourceTaskId                  *int64                         `json:"sourceTaskId,omitempty"`
	DomainTaskAttributes          *DomainTaskAttributes          `json:"domainTaskAttributes,omitempty"`
	HistoryTaskAttributes         *HistoryTaskAttributes         `json:"historyTaskAttributes,omitempty"`
	SyncShardStatusTaskAttributes *SyncShardStatusTaskAttributes `json:"syncShardStatusTaskAttributes,omitempty"`
	SyncActivityTaskAttributes    *SyncActivityTaskAttributes    `json:"syncActivityTaskAttributes,omitempty"`
	HistoryMetadataTaskAttributes *HistoryMetadataTaskAttributes `json:"historyMetadataTaskAttributes,omitempty"`
	HistoryTaskV2Attributes       *HistoryTaskV2Attributes       `json:"historyTaskV2Attributes,omitempty"`
}

// ToWire translates a ReplicationTask struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *ReplicationTask) ToWire() (wire.Value, error) {
	var (
		fields [8]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.TaskType != nil {
		w, err = v.TaskType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.SourceTaskId != nil {
		w, err = wire.NewValueI64(*(v.SourceTaskId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 11, Value: w}
		i++
	}
	if v.DomainTaskAttributes != nil {
		w, err = v.DomainTaskAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.HistoryTaskAttributes != nil {
		w, err = v.HistoryTaskAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.SyncShardStatusTaskAttributes != nil {
		w, err = v.SyncShardStatusTaskAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.SyncActivityTaskAttributes != nil {
		w, err = v.SyncActivityTaskAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.HistoryMetadataTaskAttributes != nil {
		w, err = v.HistoryMetadataTaskAttributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	if v.HistoryTaskV2Attributes != nil {
		w, err = v.HistoryTaskV2Attributes.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 70, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _ReplicationTaskType_Read(w wire.Value) (ReplicationTaskType, error) {
	var v ReplicationTaskType
	err := v.FromWire(w)
	return v, err
}

func _DomainTaskAttributes_Read(w wire.Value) (*DomainTaskAttributes, error) {
	var v DomainTaskAttributes
	err := v.FromWire(w)
	return &v, err
}

func _HistoryTaskAttributes_Read(w wire.Value) (*HistoryTaskAttributes, error) {
	var v HistoryTaskAttributes
	err := v.FromWire(w)
	return &v, err
}

func _SyncShardStatusTaskAttributes_Read(w wire.Value) (*SyncShardStatusTaskAttributes, error) {
	var v SyncShardStatusTaskAttributes
	err := v.FromWire(w)
	return &v, err
}

func _SyncActivityTaskAttributes_Read(w wire.Value) (*SyncActivityTaskAttributes, error) {
	var v SyncActivityTaskAttributes
	err := v.FromWire(w)
	return &v, err
}

func _HistoryMetadataTaskAttributes_Read(w wire.Value) (*HistoryMetadataTaskAttributes, error) {
	var v HistoryMetadataTaskAttributes
	err := v.FromWire(w)
	return &v, err
}

func _HistoryTaskV2Attributes_Read(w wire.Value) (*HistoryTaskV2Attributes, error) {
	var v HistoryTaskV2Attributes
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a ReplicationTask struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a ReplicationTask struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v ReplicationTask
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *ReplicationTask) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TI32 {
				var x ReplicationTaskType
				x, err = _ReplicationTaskType_Read(field.Value)
				v.TaskType = &x
				if err != nil {
					return err
				}

			}
		case 11:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.SourceTaskId = &x
				if err != nil {
					return err
				}

			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.DomainTaskAttributes, err = _DomainTaskAttributes_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 30:
			if field.Value.Type() == wire.TStruct {
				v.HistoryTaskAttributes, err = _HistoryTaskAttributes_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 40:
			if field.Value.Type() == wire.TStruct {
				v.SyncShardStatusTaskAttributes, err = _SyncShardStatusTaskAttributes_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 50:
			if field.Value.Type() == wire.TStruct {
				v.SyncActivityTaskAttributes, err = _SyncActivityTaskAttributes_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 60:
			if field.Value.Type() == wire.TStruct {
				v.HistoryMetadataTaskAttributes, err = _HistoryMetadataTaskAttributes_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 70:
			if field.Value.Type() == wire.TStruct {
				v.HistoryTaskV2Attributes, err = _HistoryTaskV2Attributes_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a ReplicationTask
// struct.
func (v *ReplicationTask) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [8]string
	i := 0
	if v.TaskType != nil {
		fields[i] = fmt.Sprintf("TaskType: %v", *(v.TaskType))
		i++
	}
	if v.SourceTaskId != nil {
		fields[i] = fmt.Sprintf("SourceTaskId: %v", *(v.SourceTaskId))
		i++
	}
	if v.DomainTaskAttributes != nil {
		fields[i] = fmt.Sprintf("DomainTaskAttributes: %v", v.DomainTaskAttributes)
		i++
	}
	if v.HistoryTaskAttributes != nil {
		fields[i] = fmt.Sprintf("HistoryTaskAttributes: %v", v.HistoryTaskAttributes)
		i++
	}
	if v.SyncShardStatusTaskAttributes != nil {
		fields[i] = fmt.Sprintf("SyncShardStatusTaskAttributes: %v", v.SyncShardStatusTaskAttributes)
		i++
	}
	if v.SyncActivityTaskAttributes != nil {
		fields[i] = fmt.Sprintf("SyncActivityTaskAttributes: %v", v.SyncActivityTaskAttributes)
		i++
	}
	if v.HistoryMetadataTaskAttributes != nil {
		fields[i] = fmt.Sprintf("HistoryMetadataTaskAttributes: %v", v.HistoryMetadataTaskAttributes)
		i++
	}
	if v.HistoryTaskV2Attributes != nil {
		fields[i] = fmt.Sprintf("HistoryTaskV2Attributes: %v", v.HistoryTaskV2Attributes)
		i++
	}

	return fmt.Sprintf("ReplicationTask{%v}", strings.Join(fields[:i], ", "))
}

func _ReplicationTaskType_EqualsPtr(lhs, rhs *ReplicationTaskType) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return x.Equals(y)
	}
	return lhs == nil && rhs == nil
}

// Equals returns true if all the fields of this ReplicationTask match the
// provided ReplicationTask.
//
// This function performs a deep comparison.
func (v *ReplicationTask) Equals(rhs *ReplicationTask) bool {
	if !_ReplicationTaskType_EqualsPtr(v.TaskType, rhs.TaskType) {
		return false
	}
	if !_I64_EqualsPtr(v.SourceTaskId, rhs.SourceTaskId) {
		return false
	}
	if !((v.DomainTaskAttributes == nil && rhs.DomainTaskAttributes == nil) || (v.DomainTaskAttributes != nil && rhs.DomainTaskAttributes != nil && v.DomainTaskAttributes.Equals(rhs.DomainTaskAttributes))) {
		return false
	}
	if !((v.HistoryTaskAttributes == nil && rhs.HistoryTaskAttributes == nil) || (v.HistoryTaskAttributes != nil && rhs.HistoryTaskAttributes != nil && v.HistoryTaskAttributes.Equals(rhs.HistoryTaskAttributes))) {
		return false
	}
	if !((v.SyncShardStatusTaskAttributes == nil && rhs.SyncShardStatusTaskAttributes == nil) || (v.SyncShardStatusTaskAttributes != nil && rhs.SyncShardStatusTaskAttributes != nil && v.SyncShardStatusTaskAttributes.Equals(rhs.SyncShardStatusTaskAttributes))) {
		return false
	}
	if !((v.SyncActivityTaskAttributes == nil && rhs.SyncActivityTaskAttributes == nil) || (v.SyncActivityTaskAttributes != nil && rhs.SyncActivityTaskAttributes != nil && v.SyncActivityTaskAttributes.Equals(rhs.SyncActivityTaskAttributes))) {
		return false
	}
	if !((v.HistoryMetadataTaskAttributes == nil && rhs.HistoryMetadataTaskAttributes == nil) || (v.HistoryMetadataTaskAttributes != nil && rhs.HistoryMetadataTaskAttributes != nil && v.HistoryMetadataTaskAttributes.Equals(rhs.HistoryMetadataTaskAttributes))) {
		return false
	}
	if !((v.HistoryTaskV2Attributes == nil && rhs.HistoryTaskV2Attributes == nil) || (v.HistoryTaskV2Attributes != nil && rhs.HistoryTaskV2Attributes != nil && v.HistoryTaskV2Attributes.Equals(rhs.HistoryTaskV2Attributes))) {
		return false
	}

	return true
}

// GetTaskType returns the value of TaskType if it is set or its
// zero value if it is unset.
func (v *ReplicationTask) GetTaskType() (o ReplicationTaskType) {
	if v.TaskType != nil {
		return *v.TaskType
	}

	return
}

// GetSourceTaskId returns the value of SourceTaskId if it is set or its
// zero value if it is unset.
func (v *ReplicationTask) GetSourceTaskId() (o int64) {
	if v.SourceTaskId != nil {
		return *v.SourceTaskId
	}

	return
}

type ReplicationTaskType int32

const (
	ReplicationTaskTypeDomain          ReplicationTaskType = 0
	ReplicationTaskTypeHistory         ReplicationTaskType = 1
	ReplicationTaskTypeSyncShardStatus ReplicationTaskType = 2
	ReplicationTaskTypeSyncActivity    ReplicationTaskType = 3
	ReplicationTaskTypeHistoryMetadata ReplicationTaskType = 4
	ReplicationTaskTypeHistoryV2       ReplicationTaskType = 5
)

// ReplicationTaskType_Values returns all recognized values of ReplicationTaskType.
func ReplicationTaskType_Values() []ReplicationTaskType {
	return []ReplicationTaskType{
		ReplicationTaskTypeDomain,
		ReplicationTaskTypeHistory,
		ReplicationTaskTypeSyncShardStatus,
		ReplicationTaskTypeSyncActivity,
		ReplicationTaskTypeHistoryMetadata,
		ReplicationTaskTypeHistoryV2,
	}
}

// UnmarshalText tries to decode ReplicationTaskType from a byte slice
// containing its name.
//
//   var v ReplicationTaskType
//   err := v.UnmarshalText([]byte("Domain"))
func (v *ReplicationTaskType) UnmarshalText(value []byte) error {
	switch string(value) {
	case "Domain":
		*v = ReplicationTaskTypeDomain
		return nil
	case "History":
		*v = ReplicationTaskTypeHistory
		return nil
	case "SyncShardStatus":
		*v = ReplicationTaskTypeSyncShardStatus
		return nil
	case "SyncActivity":
		*v = ReplicationTaskTypeSyncActivity
		return nil
	case "HistoryMetadata":
		*v = ReplicationTaskTypeHistoryMetadata
		return nil
	case "HistoryV2":
		*v = ReplicationTaskTypeHistoryV2
		return nil
	default:
		return fmt.Errorf("unknown enum value %q for %q", value, "ReplicationTaskType")
	}
}

// Ptr returns a pointer to this enum value.
func (v ReplicationTaskType) Ptr() *ReplicationTaskType {
	return &v
}

// ToWire translates ReplicationTaskType into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// Enums are represented as 32-bit integers over the wire.
func (v ReplicationTaskType) ToWire() (wire.Value, error) {
	return wire.NewValueI32(int32(v)), nil
}

// FromWire deserializes ReplicationTaskType from its Thrift-level
// representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TI32)
//   if err != nil {
//     return ReplicationTaskType(0), err
//   }
//
//   var v ReplicationTaskType
//   if err := v.FromWire(x); err != nil {
//     return ReplicationTaskType(0), err
//   }
//   return v, nil
func (v *ReplicationTaskType) FromWire(w wire.Value) error {
	*v = (ReplicationTaskType)(w.GetI32())
	return nil
}

// String returns a readable string representation of ReplicationTaskType.
func (v ReplicationTaskType) String() string {
	w := int32(v)
	switch w {
	case 0:
		return "Domain"
	case 1:
		return "History"
	case 2:
		return "SyncShardStatus"
	case 3:
		return "SyncActivity"
	case 4:
		return "HistoryMetadata"
	case 5:
		return "HistoryV2"
	}
	return fmt.Sprintf("ReplicationTaskType(%d)", w)
}

// Equals returns true if this ReplicationTaskType value matches the provided
// value.
func (v ReplicationTaskType) Equals(rhs ReplicationTaskType) bool {
	return v == rhs
}

// MarshalJSON serializes ReplicationTaskType into JSON.
//
// If the enum value is recognized, its name is returned. Otherwise,
// its integer value is returned.
//
// This implements json.Marshaler.
func (v ReplicationTaskType) MarshalJSON() ([]byte, error) {
	switch int32(v) {
	case 0:
		return ([]byte)("\"Domain\""), nil
	case 1:
		return ([]byte)("\"History\""), nil
	case 2:
		return ([]byte)("\"SyncShardStatus\""), nil
	case 3:
		return ([]byte)("\"SyncActivity\""), nil
	case 4:
		return ([]byte)("\"HistoryMetadata\""), nil
	case 5:
		return ([]byte)("\"HistoryV2\""), nil
	}
	return ([]byte)(strconv.FormatInt(int64(v), 10)), nil
}

// UnmarshalJSON attempts to decode ReplicationTaskType from its JSON
// representation.
//
// This implementation supports both, numeric and string inputs. If a
// string is provided, it must be a known enum name.
//
// This implements json.Unmarshaler.
func (v *ReplicationTaskType) UnmarshalJSON(text []byte) error {
	d := json.NewDecoder(bytes.NewReader(text))
	d.UseNumber()
	t, err := d.Token()
	if err != nil {
		return err
	}

	switch w := t.(type) {
	case json.Number:
		x, err := w.Int64()
		if err != nil {
			return err
		}
		if x > math.MaxInt32 {
			return fmt.Errorf("enum overflow from JSON %q for %q", text, "ReplicationTaskType")
		}
		if x < math.MinInt32 {
			return fmt.Errorf("enum underflow from JSON %q for %q", text, "ReplicationTaskType")
		}
		*v = (ReplicationTaskType)(x)
		return nil
	case string:
		return v.UnmarshalText([]byte(w))
	default:
		return fmt.Errorf("invalid JSON value %q (%T) to unmarshal into %q", t, t, "ReplicationTaskType")
	}
}

type ReplicationToken struct {
	ShardID                *int32 `json:"shardID,omitempty"`
	LastRetrievedMessageId *int64 `json:"lastRetrievedMessageId,omitempty"`
	LastProcessedMessageId *int64 `json:"lastProcessedMessageId,omitempty"`
}

// ToWire translates a ReplicationToken struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *ReplicationToken) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.ShardID != nil {
		w, err = wire.NewValueI32(*(v.ShardID)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.LastRetrievedMessageId != nil {
		w, err = wire.NewValueI64(*(v.LastRetrievedMessageId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.LastProcessedMessageId != nil {
		w, err = wire.NewValueI64(*(v.LastProcessedMessageId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a ReplicationToken struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a ReplicationToken struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v ReplicationToken
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *ReplicationToken) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.ShardID = &x
				if err != nil {
					return err
				}

			}
		case 20:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.LastRetrievedMessageId = &x
				if err != nil {
					return err
				}

			}
		case 30:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.LastProcessedMessageId = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a ReplicationToken
// struct.
func (v *ReplicationToken) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [3]string
	i := 0
	if v.ShardID != nil {
		fields[i] = fmt.Sprintf("ShardID: %v", *(v.ShardID))
		i++
	}
	if v.LastRetrievedMessageId != nil {
		fields[i] = fmt.Sprintf("LastRetrievedMessageId: %v", *(v.LastRetrievedMessageId))
		i++
	}
	if v.LastProcessedMessageId != nil {
		fields[i] = fmt.Sprintf("LastProcessedMessageId: %v", *(v.LastProcessedMessageId))
		i++
	}

	return fmt.Sprintf("ReplicationToken{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this ReplicationToken match the
// provided ReplicationToken.
//
// This function performs a deep comparison.
func (v *ReplicationToken) Equals(rhs *ReplicationToken) bool {
	if !_I32_EqualsPtr(v.ShardID, rhs.ShardID) {
		return false
	}
	if !_I64_EqualsPtr(v.LastRetrievedMessageId, rhs.LastRetrievedMessageId) {
		return false
	}
	if !_I64_EqualsPtr(v.LastProcessedMessageId, rhs.LastProcessedMessageId) {
		return false
	}

	return true
}

// GetShardID returns the value of ShardID if it is set or its
// zero value if it is unset.
func (v *ReplicationToken) GetShardID() (o int32) {
	if v.ShardID != nil {
		return *v.ShardID
	}

	return
}

// GetLastRetrievedMessageId returns the value of LastRetrievedMessageId if it is set or its
// zero value if it is unset.
func (v *ReplicationToken) GetLastRetrievedMessageId() (o int64) {
	if v.LastRetrievedMessageId != nil {
		return *v.LastRetrievedMessageId
	}

	return
}

// GetLastProcessedMessageId returns the value of LastProcessedMessageId if it is set or its
// zero value if it is unset.
func (v *ReplicationToken) GetLastProcessedMessageId() (o int64) {
	if v.LastProcessedMessageId != nil {
		return *v.LastProcessedMessageId
	}

	return
}

type SyncActivityTaskAttributes struct {
	DomainId           *string                `json:"domainId,omitempty"`
	WorkflowId         *string                `json:"workflowId,omitempty"`
	RunId              *string                `json:"runId,omitempty"`
	Version            *int64                 `json:"version,omitempty"`
	ScheduledId        *int64                 `json:"scheduledId,omitempty"`
	ScheduledTime      *int64                 `json:"scheduledTime,omitempty"`
	StartedId          *int64                 `json:"startedId,omitempty"`
	StartedTime        *int64                 `json:"startedTime,omitempty"`
	LastHeartbeatTime  *int64                 `json:"lastHeartbeatTime,omitempty"`
	Details            []byte                 `json:"details,omitempty"`
	Attempt            *int32                 `json:"attempt,omitempty"`
	LastFailureReason  *string                `json:"lastFailureReason,omitempty"`
	LastWorkerIdentity *string                `json:"lastWorkerIdentity,omitempty"`
	LastFailureDetails []byte                 `json:"lastFailureDetails,omitempty"`
	VersionHistory     *shared.VersionHistory `json:"versionHistory,omitempty"`
}

// ToWire translates a SyncActivityTaskAttributes struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *SyncActivityTaskAttributes) ToWire() (wire.Value, error) {
	var (
		fields [15]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.DomainId != nil {
		w, err = wire.NewValueString(*(v.DomainId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.WorkflowId != nil {
		w, err = wire.NewValueString(*(v.WorkflowId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.RunId != nil {
		w, err = wire.NewValueString(*(v.RunId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.Version != nil {
		w, err = wire.NewValueI64(*(v.Version)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.ScheduledId != nil {
		w, err = wire.NewValueI64(*(v.ScheduledId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.ScheduledTime != nil {
		w, err = wire.NewValueI64(*(v.ScheduledTime)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	if v.StartedId != nil {
		w, err = wire.NewValueI64(*(v.StartedId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 70, Value: w}
		i++
	}
	if v.StartedTime != nil {
		w, err = wire.NewValueI64(*(v.StartedTime)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 80, Value: w}
		i++
	}
	if v.LastHeartbeatTime != nil {
		w, err = wire.NewValueI64(*(v.LastHeartbeatTime)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 90, Value: w}
		i++
	}
	if v.Details != nil {
		w, err = wire.NewValueBinary(v.Details), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 100, Value: w}
		i++
	}
	if v.Attempt != nil {
		w, err = wire.NewValueI32(*(v.Attempt)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 110, Value: w}
		i++
	}
	if v.LastFailureReason != nil {
		w, err = wire.NewValueString(*(v.LastFailureReason)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 120, Value: w}
		i++
	}
	if v.LastWorkerIdentity != nil {
		w, err = wire.NewValueString(*(v.LastWorkerIdentity)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 130, Value: w}
		i++
	}
	if v.LastFailureDetails != nil {
		w, err = wire.NewValueBinary(v.LastFailureDetails), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 140, Value: w}
		i++
	}
	if v.VersionHistory != nil {
		w, err = v.VersionHistory.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 150, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _VersionHistory_Read(w wire.Value) (*shared.VersionHistory, error) {
	var v shared.VersionHistory
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a SyncActivityTaskAttributes struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a SyncActivityTaskAttributes struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v SyncActivityTaskAttributes
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *SyncActivityTaskAttributes) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.DomainId = &x
				if err != nil {
					return err
				}

			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.WorkflowId = &x
				if err != nil {
					return err
				}

			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.RunId = &x
				if err != nil {
					return err
				}

			}
		case 40:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.Version = &x
				if err != nil {
					return err
				}

			}
		case 50:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.ScheduledId = &x
				if err != nil {
					return err
				}

			}
		case 60:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.ScheduledTime = &x
				if err != nil {
					return err
				}

			}
		case 70:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.StartedId = &x
				if err != nil {
					return err
				}

			}
		case 80:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.StartedTime = &x
				if err != nil {
					return err
				}

			}
		case 90:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.LastHeartbeatTime = &x
				if err != nil {
					return err
				}

			}
		case 100:
			if field.Value.Type() == wire.TBinary {
				v.Details, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}

			}
		case 110:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.Attempt = &x
				if err != nil {
					return err
				}

			}
		case 120:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.LastFailureReason = &x
				if err != nil {
					return err
				}

			}
		case 130:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.LastWorkerIdentity = &x
				if err != nil {
					return err
				}

			}
		case 140:
			if field.Value.Type() == wire.TBinary {
				v.LastFailureDetails, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}

			}
		case 150:
			if field.Value.Type() == wire.TStruct {
				v.VersionHistory, err = _VersionHistory_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a SyncActivityTaskAttributes
// struct.
func (v *SyncActivityTaskAttributes) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [15]string
	i := 0
	if v.DomainId != nil {
		fields[i] = fmt.Sprintf("DomainId: %v", *(v.DomainId))
		i++
	}
	if v.WorkflowId != nil {
		fields[i] = fmt.Sprintf("WorkflowId: %v", *(v.WorkflowId))
		i++
	}
	if v.RunId != nil {
		fields[i] = fmt.Sprintf("RunId: %v", *(v.RunId))
		i++
	}
	if v.Version != nil {
		fields[i] = fmt.Sprintf("Version: %v", *(v.Version))
		i++
	}
	if v.ScheduledId != nil {
		fields[i] = fmt.Sprintf("ScheduledId: %v", *(v.ScheduledId))
		i++
	}
	if v.ScheduledTime != nil {
		fields[i] = fmt.Sprintf("ScheduledTime: %v", *(v.ScheduledTime))
		i++
	}
	if v.StartedId != nil {
		fields[i] = fmt.Sprintf("StartedId: %v", *(v.StartedId))
		i++
	}
	if v.StartedTime != nil {
		fields[i] = fmt.Sprintf("StartedTime: %v", *(v.StartedTime))
		i++
	}
	if v.LastHeartbeatTime != nil {
		fields[i] = fmt.Sprintf("LastHeartbeatTime: %v", *(v.LastHeartbeatTime))
		i++
	}
	if v.Details != nil {
		fields[i] = fmt.Sprintf("Details: %v", v.Details)
		i++
	}
	if v.Attempt != nil {
		fields[i] = fmt.Sprintf("Attempt: %v", *(v.Attempt))
		i++
	}
	if v.LastFailureReason != nil {
		fields[i] = fmt.Sprintf("LastFailureReason: %v", *(v.LastFailureReason))
		i++
	}
	if v.LastWorkerIdentity != nil {
		fields[i] = fmt.Sprintf("LastWorkerIdentity: %v", *(v.LastWorkerIdentity))
		i++
	}
	if v.LastFailureDetails != nil {
		fields[i] = fmt.Sprintf("LastFailureDetails: %v", v.LastFailureDetails)
		i++
	}
	if v.VersionHistory != nil {
		fields[i] = fmt.Sprintf("VersionHistory: %v", v.VersionHistory)
		i++
	}

	return fmt.Sprintf("SyncActivityTaskAttributes{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this SyncActivityTaskAttributes match the
// provided SyncActivityTaskAttributes.
//
// This function performs a deep comparison.
func (v *SyncActivityTaskAttributes) Equals(rhs *SyncActivityTaskAttributes) bool {
	if !_String_EqualsPtr(v.DomainId, rhs.DomainId) {
		return false
	}
	if !_String_EqualsPtr(v.WorkflowId, rhs.WorkflowId) {
		return false
	}
	if !_String_EqualsPtr(v.RunId, rhs.RunId) {
		return false
	}
	if !_I64_EqualsPtr(v.Version, rhs.Version) {
		return false
	}
	if !_I64_EqualsPtr(v.ScheduledId, rhs.ScheduledId) {
		return false
	}
	if !_I64_EqualsPtr(v.ScheduledTime, rhs.ScheduledTime) {
		return false
	}
	if !_I64_EqualsPtr(v.StartedId, rhs.StartedId) {
		return false
	}
	if !_I64_EqualsPtr(v.StartedTime, rhs.StartedTime) {
		return false
	}
	if !_I64_EqualsPtr(v.LastHeartbeatTime, rhs.LastHeartbeatTime) {
		return false
	}
	if !((v.Details == nil && rhs.Details == nil) || (v.Details != nil && rhs.Details != nil && bytes.Equal(v.Details, rhs.Details))) {
		return false
	}
	if !_I32_EqualsPtr(v.Attempt, rhs.Attempt) {
		return false
	}
	if !_String_EqualsPtr(v.LastFailureReason, rhs.LastFailureReason) {
		return false
	}
	if !_String_EqualsPtr(v.LastWorkerIdentity, rhs.LastWorkerIdentity) {
		return false
	}
	if !((v.LastFailureDetails == nil && rhs.LastFailureDetails == nil) || (v.LastFailureDetails != nil && rhs.LastFailureDetails != nil && bytes.Equal(v.LastFailureDetails, rhs.LastFailureDetails))) {
		return false
	}
	if !((v.VersionHistory == nil && rhs.VersionHistory == nil) || (v.VersionHistory != nil && rhs.VersionHistory != nil && v.VersionHistory.Equals(rhs.VersionHistory))) {
		return false
	}

	return true
}

// GetDomainId returns the value of DomainId if it is set or its
// zero value if it is unset.
func (v *SyncActivityTaskAttributes) GetDomainId() (o string) {
	if v.DomainId != nil {
		return *v.DomainId
	}

	return
}

// GetWorkflowId returns the value of WorkflowId if it is set or its
// zero value if it is unset.
func (v *SyncActivityTaskAttributes) GetWorkflowId() (o string) {
	if v.WorkflowId != nil {
		return *v.WorkflowId
	}

	return
}

// GetRunId returns the value of RunId if it is set or its
// zero value if it is unset.
func (v *SyncActivityTaskAttributes) GetRunId() (o string) {
	if v.RunId != nil {
		return *v.RunId
	}

	return
}

// GetVersion returns the value of Version if it is set or its
// zero value if it is unset.
func (v *SyncActivityTaskAttributes) GetVersion() (o int64) {
	if v.Version != nil {
		return *v.Version
	}

	return
}

// GetScheduledId returns the value of ScheduledId if it is set or its
// zero value if it is unset.
func (v *SyncActivityTaskAttributes) GetScheduledId() (o int64) {
	if v.ScheduledId != nil {
		return *v.ScheduledId
	}

	return
}

// GetScheduledTime returns the value of ScheduledTime if it is set or its
// zero value if it is unset.
func (v *SyncActivityTaskAttributes) GetScheduledTime() (o int64) {
	if v.ScheduledTime != nil {
		return *v.ScheduledTime
	}

	return
}

// GetStartedId returns the value of StartedId if it is set or its
// zero value if it is unset.
func (v *SyncActivityTaskAttributes) GetStartedId() (o int64) {
	if v.StartedId != nil {
		return *v.StartedId
	}

	return
}

// GetStartedTime returns the value of StartedTime if it is set or its
// zero value if it is unset.
func (v *SyncActivityTaskAttributes) GetStartedTime() (o int64) {
	if v.StartedTime != nil {
		return *v.StartedTime
	}

	return
}

// GetLastHeartbeatTime returns the value of LastHeartbeatTime if it is set or its
// zero value if it is unset.
func (v *SyncActivityTaskAttributes) GetLastHeartbeatTime() (o int64) {
	if v.LastHeartbeatTime != nil {
		return *v.LastHeartbeatTime
	}

	return
}

// GetAttempt returns the value of Attempt if it is set or its
// zero value if it is unset.
func (v *SyncActivityTaskAttributes) GetAttempt() (o int32) {
	if v.Attempt != nil {
		return *v.Attempt
	}

	return
}

// GetLastFailureReason returns the value of LastFailureReason if it is set or its
// zero value if it is unset.
func (v *SyncActivityTaskAttributes) GetLastFailureReason() (o string) {
	if v.LastFailureReason != nil {
		return *v.LastFailureReason
	}

	return
}

// GetLastWorkerIdentity returns the value of LastWorkerIdentity if it is set or its
// zero value if it is unset.
func (v *SyncActivityTaskAttributes) GetLastWorkerIdentity() (o string) {
	if v.LastWorkerIdentity != nil {
		return *v.LastWorkerIdentity
	}

	return
}

type SyncShardStatus struct {
	Timestamp *int64 `json:"timestamp,omitempty"`
}

// ToWire translates a SyncShardStatus struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *SyncShardStatus) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Timestamp != nil {
		w, err = wire.NewValueI64(*(v.Timestamp)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a SyncShardStatus struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a SyncShardStatus struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v SyncShardStatus
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *SyncShardStatus) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.Timestamp = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a SyncShardStatus
// struct.
func (v *SyncShardStatus) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Timestamp != nil {
		fields[i] = fmt.Sprintf("Timestamp: %v", *(v.Timestamp))
		i++
	}

	return fmt.Sprintf("SyncShardStatus{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this SyncShardStatus match the
// provided SyncShardStatus.
//
// This function performs a deep comparison.
func (v *SyncShardStatus) Equals(rhs *SyncShardStatus) bool {
	if !_I64_EqualsPtr(v.Timestamp, rhs.Timestamp) {
		return false
	}

	return true
}

// GetTimestamp returns the value of Timestamp if it is set or its
// zero value if it is unset.
func (v *SyncShardStatus) GetTimestamp() (o int64) {
	if v.Timestamp != nil {
		return *v.Timestamp
	}

	return
}

type SyncShardStatusTaskAttributes struct {
	SourceCluster *string `json:"sourceCluster,omitempty"`
	ShardId       *int64  `json:"shardId,omitempty"`
	Timestamp     *int64  `json:"timestamp,omitempty"`
}

// ToWire translates a SyncShardStatusTaskAttributes struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *SyncShardStatusTaskAttributes) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.SourceCluster != nil {
		w, err = wire.NewValueString(*(v.SourceCluster)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.ShardId != nil {
		w, err = wire.NewValueI64(*(v.ShardId)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.Timestamp != nil {
		w, err = wire.NewValueI64(*(v.Timestamp)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a SyncShardStatusTaskAttributes struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a SyncShardStatusTaskAttributes struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v SyncShardStatusTaskAttributes
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *SyncShardStatusTaskAttributes) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.SourceCluster = &x
				if err != nil {
					return err
				}

			}
		case 20:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.ShardId = &x
				if err != nil {
					return err
				}

			}
		case 30:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.Timestamp = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a SyncShardStatusTaskAttributes
// struct.
func (v *SyncShardStatusTaskAttributes) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [3]string
	i := 0
	if v.SourceCluster != nil {
		fields[i] = fmt.Sprintf("SourceCluster: %v", *(v.SourceCluster))
		i++
	}
	if v.ShardId != nil {
		fields[i] = fmt.Sprintf("ShardId: %v", *(v.ShardId))
		i++
	}
	if v.Timestamp != nil {
		fields[i] = fmt.Sprintf("Timestamp: %v", *(v.Timestamp))
		i++
	}

	return fmt.Sprintf("SyncShardStatusTaskAttributes{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this SyncShardStatusTaskAttributes match the
// provided SyncShardStatusTaskAttributes.
//
// This function performs a deep comparison.
func (v *SyncShardStatusTaskAttributes) Equals(rhs *SyncShardStatusTaskAttributes) bool {
	if !_String_EqualsPtr(v.SourceCluster, rhs.SourceCluster) {
		return false
	}
	if !_I64_EqualsPtr(v.ShardId, rhs.ShardId) {
		return false
	}
	if !_I64_EqualsPtr(v.Timestamp, rhs.Timestamp) {
		return false
	}

	return true
}

// GetSourceCluster returns the value of SourceCluster if it is set or its
// zero value if it is unset.
func (v *SyncShardStatusTaskAttributes) GetSourceCluster() (o string) {
	if v.SourceCluster != nil {
		return *v.SourceCluster
	}

	return
}

// GetShardId returns the value of ShardId if it is set or its
// zero value if it is unset.
func (v *SyncShardStatusTaskAttributes) GetShardId() (o int64) {
	if v.ShardId != nil {
		return *v.ShardId
	}

	return
}

// GetTimestamp returns the value of Timestamp if it is set or its
// zero value if it is unset.
func (v *SyncShardStatusTaskAttributes) GetTimestamp() (o int64) {
	if v.Timestamp != nil {
		return *v.Timestamp
	}

	return
}
